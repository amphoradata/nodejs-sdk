/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Authentication
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the Client.
 */
export interface Authentication {


    /**
     * @summary Returns a JWT (JSON Web Token).
     *
     *
     * @param {object} body Token Request Parameters.
     *
     * @param {string} body.username
     *
     * @param {string} body.password
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    requestTokenWithHttpOperationResponse(body: models.TokenRequest, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * @summary Returns a JWT (JSON Web Token).
     *
     *
     * @param {object} body Token Request Parameters.
     *
     * @param {string} body.username
     *
     * @param {string} body.password
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    requestToken(body: models.TokenRequest, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    requestToken(body: models.TokenRequest, callback: ServiceCallback<string>): void;
    requestToken(body: models.TokenRequest, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * Market
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the Client.
 */
export interface Market {


    /**
     * @summary Executes a fuzzy location search.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.query] Search Text.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FuzzySearchResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    lookupLocationWithHttpOperationResponse(options?: { query? : string, xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FuzzySearchResponse>>;

    /**
     * @summary Executes a fuzzy location search.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.query] Search Text.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FuzzySearchResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FuzzySearchResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FuzzySearchResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    lookupLocation(options?: { query? : string, xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.FuzzySearchResponse>;
    lookupLocation(callback: ServiceCallback<models.FuzzySearchResponse>): void;
    lookupLocation(options: { query? : string, xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FuzzySearchResponse>): void;


    /**
     * @summary Finds Amphora using a fuzzy search.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.query] A string as a search term.
     *
     * @param {number} [options.top] How many results to return.
     *
     * @param {number} [options.skip] How many pages (in multiples of top) to skip.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    findWithHttpOperationResponse(options?: { query? : string, top? : number, skip? : number, xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BasicAmphora[]>>;

    /**
     * @summary Finds Amphora using a fuzzy search.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.query] A string as a search term.
     *
     * @param {number} [options.top] How many results to return.
     *
     * @param {number} [options.skip] How many pages (in multiples of top) to skip.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    find(options?: { query? : string, top? : number, skip? : number, xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.BasicAmphora[]>;
    find(callback: ServiceCallback<models.BasicAmphora[]>): void;
    find(options: { query? : string, top? : number, skip? : number, xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BasicAmphora[]>): void;
}

/**
 * @class
 * OrganisationRestriction
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the Client.
 */
export interface OrganisationRestriction {


    /**
     * @summary Restricts an organisation from accessing data.
     *
     * @param {object} body Restriction to create.
     *
     * @param {object} [body.kind]
     *
     * @param {string} [body.targetOrganisationId] Target Organisation's Id
     *
     * @param {string} id Your organisation Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Restriction>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(body: models.Restriction, id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Restriction>>;

    /**
     * @summary Restricts an organisation from accessing data.
     *
     * @param {object} body Restriction to create.
     *
     * @param {object} [body.kind]
     *
     * @param {string} [body.targetOrganisationId] Target Organisation's Id
     *
     * @param {string} id Your organisation Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Restriction} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Restriction} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Restriction} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(body: models.Restriction, id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Restriction>;
    create(body: models.Restriction, id: string, callback: ServiceCallback<models.Restriction>): void;
    create(body: models.Restriction, id: string, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Restriction>): void;


    /**
     * @summary Deletes a restriction.
     *
     * @param {string} id Your organisation Id.
     *
     * @param {string} targetOrganisationId Organisation Id for which you want to
     * delete a restriction.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GenericResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(id: string, targetOrganisationId: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GenericResponse>>;

    /**
     * @summary Deletes a restriction.
     *
     * @param {string} id Your organisation Id.
     *
     * @param {string} targetOrganisationId Organisation Id for which you want to
     * delete a restriction.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GenericResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GenericResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GenericResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(id: string, targetOrganisationId: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.GenericResponse>;
    deleteMethod(id: string, targetOrganisationId: string, callback: ServiceCallback<models.GenericResponse>): void;
    deleteMethod(id: string, targetOrganisationId: string, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GenericResponse>): void;
}

/**
 * @class
 * Organisations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the Client.
 */
export interface Organisations {


    /**
     * @summary Creates a new Organisation. This will assign the logged in user to
     * the organisation.
     *
     * @param {object} body Information of the new Organisation.
     *
     * @param {string} [body.id]
     *
     * @param {boolean} [body.isDeleted]
     *
     * @param {date} [body.createdDate]
     *
     * @param {string} [body.name]
     *
     * @param {string} [body.about]
     *
     * @param {string} [body.websiteUrl]
     *
     * @param {string} [body.address]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Organisation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(body: models.Organisation, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Organisation>>;

    /**
     * @summary Creates a new Organisation. This will assign the logged in user to
     * the organisation.
     *
     * @param {object} body Information of the new Organisation.
     *
     * @param {string} [body.id]
     *
     * @param {boolean} [body.isDeleted]
     *
     * @param {date} [body.createdDate]
     *
     * @param {string} [body.name]
     *
     * @param {string} [body.about]
     *
     * @param {string} [body.websiteUrl]
     *
     * @param {string} [body.address]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Organisation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Organisation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Organisation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(body: models.Organisation, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Organisation>;
    create(body: models.Organisation, callback: ServiceCallback<models.Organisation>): void;
    create(body: models.Organisation, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Organisation>): void;


    /**
     * @summary Updates an organisation.
     *
     * @param {object} body Organisation Information. All fields are updated.
     *
     * @param {string} [body.id]
     *
     * @param {boolean} [body.isDeleted]
     *
     * @param {date} [body.createdDate]
     *
     * @param {string} [body.name]
     *
     * @param {string} [body.about]
     *
     * @param {string} [body.websiteUrl]
     *
     * @param {string} [body.address]
     *
     * @param {string} id Organisation Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(body: models.Organisation, id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * @summary Updates an organisation.
     *
     * @param {object} body Organisation Information. All fields are updated.
     *
     * @param {string} [body.id]
     *
     * @param {boolean} [body.isDeleted]
     *
     * @param {date} [body.createdDate]
     *
     * @param {string} [body.name]
     *
     * @param {string} [body.about]
     *
     * @param {string} [body.websiteUrl]
     *
     * @param {string} [body.address]
     *
     * @param {string} id Organisation Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(body: models.Organisation, id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    update(body: models.Organisation, id: string, callback: ServiceCallback<string>): void;
    update(body: models.Organisation, id: string, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * @summary Gets an organisation's details.
     *
     * @param {string} id Organisation Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Organisation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    readWithHttpOperationResponse(id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Organisation>>;

    /**
     * @summary Gets an organisation's details.
     *
     * @param {string} id Organisation Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Organisation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Organisation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Organisation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    read(id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Organisation>;
    read(id: string, callback: ServiceCallback<models.Organisation>): void;
    read(id: string, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Organisation>): void;


    /**
     * @summary Deletes an organisation.
     *
     * @param {string} id Organisation Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * @summary Deletes an organisation.
     *
     * @param {string} id Organisation Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    deleteMethod(id: string, callback: ServiceCallback<string>): void;
    deleteMethod(id: string, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * Search
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the Client.
 */
export interface Search {


    /**
     * @summary Searches for Amphorae.
     *
     * @param {object} body Search parameters.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    searchAmphoraeWithHttpOperationResponse(body: any, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BasicAmphora[]>>;

    /**
     * @summary Searches for Amphorae.
     *
     * @param {object} body Search parameters.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    searchAmphorae(body: any, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.BasicAmphora[]>;
    searchAmphorae(body: any, callback: ServiceCallback<models.BasicAmphora[]>): void;
    searchAmphorae(body: any, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BasicAmphora[]>): void;


    /**
     * @summary Searches for Amphorae by loction.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.lat] Latitude.
     *
     * @param {number} [options.lon] Longitude.
     *
     * @param {number} [options.dist] Distance from Latitude and Longitude in which
     * to search.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    searchAmphoraeByLocationWithHttpOperationResponse(options?: { lat? : number, lon? : number, dist? : number, xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BasicAmphora[]>>;

    /**
     * @summary Searches for Amphorae by loction.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.lat] Latitude.
     *
     * @param {number} [options.lon] Longitude.
     *
     * @param {number} [options.dist] Distance from Latitude and Longitude in which
     * to search.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    searchAmphoraeByLocation(options?: { lat? : number, lon? : number, dist? : number, xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.BasicAmphora[]>;
    searchAmphoraeByLocation(callback: ServiceCallback<models.BasicAmphora[]>): void;
    searchAmphoraeByLocation(options: { lat? : number, lon? : number, dist? : number, xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BasicAmphora[]>): void;


    /**
     * @summary Searches for Amphorae in an Organisation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.orgId] Organisation Id.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    searchAmphoraeByOrganisationWithHttpOperationResponse(options?: { orgId? : string, xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BasicAmphora[]>>;

    /**
     * @summary Searches for Amphorae in an Organisation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.orgId] Organisation Id.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    searchAmphoraeByOrganisation(options?: { orgId? : string, xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.BasicAmphora[]>;
    searchAmphoraeByOrganisation(callback: ServiceCallback<models.BasicAmphora[]>): void;
    searchAmphoraeByOrganisation(options: { orgId? : string, xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BasicAmphora[]>): void;


    /**
     * @summary Searches for Amphorae by creator.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.userName] User Name of the creator.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    searchAmphoraeByCreatorWithHttpOperationResponse(options?: { userName? : string, xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BasicAmphora[]>>;

    /**
     * @summary Searches for Amphorae by creator.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.userName] User Name of the creator.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    searchAmphoraeByCreator(options?: { userName? : string, xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.BasicAmphora[]>;
    searchAmphoraeByCreator(callback: ServiceCallback<models.BasicAmphora[]>): void;
    searchAmphoraeByCreator(options: { userName? : string, xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BasicAmphora[]>): void;
}

/**
 * @class
 * Users
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the Client.
 */
export interface Users {


    /**
     * @summary Get's logged in users information.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AmphoraUser>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    readSelfWithHttpOperationResponse(options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AmphoraUser>>;

    /**
     * @summary Get's logged in users information.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AmphoraUser} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AmphoraUser} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AmphoraUser} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    readSelf(options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.AmphoraUser>;
    readSelf(callback: ServiceCallback<models.AmphoraUser>): void;
    readSelf(options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AmphoraUser>): void;


    /**
     * @summary Creates a new User. Returns the password.
     *
     * @param {object} body User parameters.
     *
     * @param {string} [body.id]
     *
     * @param {string} [body.email]
     *
     * @param {string} [body.about]
     *
     * @param {string} [body.fullName]
     *
     * @param {string} [body.organisationId]
     *
     * @param {string} [body.userName]
     *
     * @param {date} [body.lastModified]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(body: models.AmphoraUser, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * @summary Creates a new User. Returns the password.
     *
     * @param {object} body User parameters.
     *
     * @param {string} [body.id]
     *
     * @param {string} [body.email]
     *
     * @param {string} [body.about]
     *
     * @param {string} [body.fullName]
     *
     * @param {string} [body.organisationId]
     *
     * @param {string} [body.userName]
     *
     * @param {date} [body.lastModified]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(body: models.AmphoraUser, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    create(body: models.AmphoraUser, callback: ServiceCallback<string>): void;
    create(body: models.AmphoraUser, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * Version
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the Client.
 */
export interface Version {


    /**
     * @summary Get's the current server version.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getCurrentVersionWithHttpOperationResponse(options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * @summary Get's the current server version.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getCurrentVersion(options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    getCurrentVersion(callback: ServiceCallback<string>): void;
    getCurrentVersion(options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * AccountOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the Client.
 */
export interface AccountOperations {


    /**
     * @summary Get's an Organisation's account information.
     *
     * @param {string} id Organisation Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Account>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    readWithHttpOperationResponse(id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Account>>;

    /**
     * @summary Get's an Organisation's account information.
     *
     * @param {string} id Organisation Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Account} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Account} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Account} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    read(id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Account>;
    read(id: string, callback: ServiceCallback<models.Account>): void;
    read(id: string, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Account>): void;
}

/**
 * @class
 * TermsAndConditionsOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the Client.
 */
export interface TermsAndConditionsOperations {


    /**
     * @summary Adds new Terms and Conditions to your Organisations T/C Library.
     *
     * @param {object} body The new Terms and Conditions.
     *
     * @param {string} body.id
     *
     * @param {string} body.name
     *
     * @param {string} body.contents
     *
     * @param {string} id The Id of the Organisation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(body: models.TermsAndConditions, id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Adds new Terms and Conditions to your Organisations T/C Library.
     *
     * @param {object} body The new Terms and Conditions.
     *
     * @param {string} body.id
     *
     * @param {string} body.name
     *
     * @param {string} body.contents
     *
     * @param {string} id The Id of the Organisation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(body: models.TermsAndConditions, id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    create(body: models.TermsAndConditions, id: string, callback: ServiceCallback<any>): void;
    create(body: models.TermsAndConditions, id: string, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Get's a list of an Organisation's Terms and Conditions.
     *
     * @param {string} id The Id of the Organisation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    readWithHttpOperationResponse(id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TermsAndConditions[]>>;

    /**
     * @summary Get's a list of an Organisation's Terms and Conditions.
     *
     * @param {string} id The Id of the Organisation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    read(id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.TermsAndConditions[]>;
    read(id: string, callback: ServiceCallback<models.TermsAndConditions[]>): void;
    read(id: string, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TermsAndConditions[]>): void;
}

/**
 * @class
 * Amphorae
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the Client.
 */
export interface Amphorae {


    /**
     * @summary Creates a new empty Amphora in the user's organisation.
     *
     * @param {object} body Information for the new Amphora.
     *
     * @param {string} [body.id]
     *
     * @param {boolean} [body.isDeleted]
     *
     * @param {date} [body.createdDate]
     *
     * @param {string} body.name
     *
     * @param {number} body.price
     *
     * @param {string} [body.labels]
     *
     * @param {string} body.description
     *
     * @param {number} [body.lat] Latitude
     *
     * @param {number} [body.lon] Longitude
     *
     * @param {string} [body.termsAndConditionsId]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DetailedAmphora>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(body: models.CreateAmphora, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DetailedAmphora>>;

    /**
     * @summary Creates a new empty Amphora in the user's organisation.
     *
     * @param {object} body Information for the new Amphora.
     *
     * @param {string} [body.id]
     *
     * @param {boolean} [body.isDeleted]
     *
     * @param {date} [body.createdDate]
     *
     * @param {string} body.name
     *
     * @param {number} body.price
     *
     * @param {string} [body.labels]
     *
     * @param {string} body.description
     *
     * @param {number} [body.lat] Latitude
     *
     * @param {number} [body.lon] Longitude
     *
     * @param {string} [body.termsAndConditionsId]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DetailedAmphora} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DetailedAmphora} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DetailedAmphora} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(body: models.CreateAmphora, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DetailedAmphora>;
    create(body: models.CreateAmphora, callback: ServiceCallback<models.DetailedAmphora>): void;
    create(body: models.CreateAmphora, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DetailedAmphora>): void;


    /**
     * @summary Get's details of an Amphora by Id.
     *
     * @param {string} id Amphora Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DetailedAmphora>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    readWithHttpOperationResponse(id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DetailedAmphora>>;

    /**
     * @summary Get's details of an Amphora by Id.
     *
     * @param {string} id Amphora Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DetailedAmphora} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DetailedAmphora} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DetailedAmphora} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    read(id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DetailedAmphora>;
    read(id: string, callback: ServiceCallback<models.DetailedAmphora>): void;
    read(id: string, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DetailedAmphora>): void;


    /**
     * @summary Updates the details of an Amphora by Id.
     *
     * @param {object} body Information to update. Nulls are NOT ignored.
     *
     * @param {string} [body.id]
     *
     * @param {boolean} [body.isDeleted]
     *
     * @param {date} [body.createdDate]
     *
     * @param {string} body.name
     *
     * @param {number} body.price
     *
     * @param {string} [body.labels]
     *
     * @param {string} body.description
     *
     * @param {number} [body.lat] Latitude
     *
     * @param {number} [body.lon] Longitude
     *
     * @param {string} [body.termsAndConditionsId]
     *
     * @param {object} [body.fileAttributes]
     *
     * @param {string} [body.organisationId]
     *
     * @param {number} [body.purchaseCount] Purchase Count
     *
     * @param {string} id Amphora Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DetailedAmphora>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(body: models.DetailedAmphora, id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DetailedAmphora>>;

    /**
     * @summary Updates the details of an Amphora by Id.
     *
     * @param {object} body Information to update. Nulls are NOT ignored.
     *
     * @param {string} [body.id]
     *
     * @param {boolean} [body.isDeleted]
     *
     * @param {date} [body.createdDate]
     *
     * @param {string} body.name
     *
     * @param {number} body.price
     *
     * @param {string} [body.labels]
     *
     * @param {string} body.description
     *
     * @param {number} [body.lat] Latitude
     *
     * @param {number} [body.lon] Longitude
     *
     * @param {string} [body.termsAndConditionsId]
     *
     * @param {object} [body.fileAttributes]
     *
     * @param {string} [body.organisationId]
     *
     * @param {number} [body.purchaseCount] Purchase Count
     *
     * @param {string} id Amphora Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DetailedAmphora} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DetailedAmphora} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DetailedAmphora} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(body: models.DetailedAmphora, id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DetailedAmphora>;
    update(body: models.DetailedAmphora, id: string, callback: ServiceCallback<models.DetailedAmphora>): void;
    update(body: models.DetailedAmphora, id: string, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DetailedAmphora>): void;


    /**
     * @summary Deletes an Amphora.
     *
     * @param {string} id Amphora Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * @summary Deletes an Amphora.
     *
     * @param {string} id Amphora Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    deleteMethod(id: string, callback: ServiceCallback<string>): void;
    deleteMethod(id: string, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * AmphoraeFiles
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the Client.
 */
export interface AmphoraeFiles {


    /**
     * @summary Get's a list of an Amphora's files.
     *
     * @param {string} id Amphora Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listFilesWithHttpOperationResponse(id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string[]>>;

    /**
     * @summary Get's a list of an Amphora's files.
     *
     * @param {string} id Amphora Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listFiles(id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<string[]>;
    listFiles(id: string, callback: ServiceCallback<string[]>): void;
    listFiles(id: string, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string[]>): void;


    /**
     * @summary Get's the contents of a file. Returns application/octet-stream.
     *
     * @param {string} id Amphora Id.
     *
     * @param {string} file The name of the file.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    downloadFileWithHttpOperationResponse(id: string, file: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * @summary Get's the contents of a file. Returns application/octet-stream.
     *
     * @param {string} id Amphora Id.
     *
     * @param {string} file The name of the file.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    downloadFile(id: string, file: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    downloadFile(id: string, file: string, callback: ServiceCallback<string>): void;
    downloadFile(id: string, file: string, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * @summary Creates a file. Returns a blob URL to upload to.
     *
     * @param {string} id Amphora Id.
     *
     * @param {string} file The name of the file.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UploadResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createFileRequestWithHttpOperationResponse(id: string, file: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UploadResponse>>;

    /**
     * @summary Creates a file. Returns a blob URL to upload to.
     *
     * @param {string} id Amphora Id.
     *
     * @param {string} file The name of the file.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UploadResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UploadResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UploadResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createFileRequest(id: string, file: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.UploadResponse>;
    createFileRequest(id: string, file: string, callback: ServiceCallback<models.UploadResponse>): void;
    createFileRequest(id: string, file: string, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UploadResponse>): void;


    /**
     * @param {object} body
     *
     * @param {string} id
     *
     * @param {string} file
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    writeFileMetadataWithHttpOperationResponse(body: { [propertyName: string]: string }, id: string, file: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<{ [propertyName: string]: string }>>;

    /**
     * @param {object} body
     *
     * @param {string} id
     *
     * @param {string} file
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    writeFileMetadata(body: { [propertyName: string]: string }, id: string, file: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<{ [propertyName: string]: string }>;
    writeFileMetadata(body: { [propertyName: string]: string }, id: string, file: string, callback: ServiceCallback<{ [propertyName: string]: string }>): void;
    writeFileMetadata(body: { [propertyName: string]: string }, id: string, file: string, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<{ [propertyName: string]: string }>): void;
}

/**
 * @class
 * AmphoraeSignals
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the Client.
 */
export interface AmphoraeSignals {


    /**
     * @summary Get's the signals associated with an Amphora.
     *
     * @param {string} id Amphora Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSignalsWithHttpOperationResponse(id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Signal[]>>;

    /**
     * @summary Get's the signals associated with an Amphora.
     *
     * @param {string} id Amphora Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSignals(id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Signal[]>;
    getSignals(id: string, callback: ServiceCallback<models.Signal[]>): void;
    getSignals(id: string, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Signal[]>): void;


    /**
     * @summary Associates a signal with an Amphora. Signal is created if not
     * existing.
     *
     * @param {object} body Signal Details.
     *
     * @param {string} [body.id]
     *
     * @param {string} [body.property]
     *
     * @param {string} [body.valueType]
     *
     * @param {object} [body.attributes]
     *
     * @param {string} id Amphora Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Signal>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createSignalWithHttpOperationResponse(body: models.Signal, id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Signal>>;

    /**
     * @summary Associates a signal with an Amphora. Signal is created if not
     * existing.
     *
     * @param {object} body Signal Details.
     *
     * @param {string} [body.id]
     *
     * @param {string} [body.property]
     *
     * @param {string} [body.valueType]
     *
     * @param {object} [body.attributes]
     *
     * @param {string} id Amphora Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Signal} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Signal} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Signal} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createSignal(body: models.Signal, id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Signal>;
    createSignal(body: models.Signal, id: string, callback: ServiceCallback<models.Signal>): void;
    createSignal(body: models.Signal, id: string, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Signal>): void;


    /**
     * @summary Associates a signal with an Amphora. Signal is created if not
     * existing.
     *
     * @param {object} body Signal properties to update.
     *
     * @param {object} [body.meta]
     *
     * @param {string} id Amphora Id.
     *
     * @param {string} signalId Signal Details.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Signal>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateSignalMethodWithHttpOperationResponse(body: models.UpdateSignal, id: string, signalId: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Signal>>;

    /**
     * @summary Associates a signal with an Amphora. Signal is created if not
     * existing.
     *
     * @param {object} body Signal properties to update.
     *
     * @param {object} [body.meta]
     *
     * @param {string} id Amphora Id.
     *
     * @param {string} signalId Signal Details.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Signal} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Signal} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Signal} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateSignalMethod(body: models.UpdateSignal, id: string, signalId: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Signal>;
    updateSignalMethod(body: models.UpdateSignal, id: string, signalId: string, callback: ServiceCallback<models.Signal>): void;
    updateSignalMethod(body: models.UpdateSignal, id: string, signalId: string, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Signal>): void;


    /**
     * @param {object} body
     *
     * @param {string} id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProblemDetails>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    uploadSignalWithHttpOperationResponse(body: { [propertyName: string]: any }, id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProblemDetails>>;

    /**
     * @param {object} body
     *
     * @param {string} id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProblemDetails} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProblemDetails} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProblemDetails} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    uploadSignal(body: { [propertyName: string]: any }, id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ProblemDetails>;
    uploadSignal(body: { [propertyName: string]: any }, id: string, callback: ServiceCallback<models.ProblemDetails>): void;
    uploadSignal(body: { [propertyName: string]: any }, id: string, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProblemDetails>): void;


    /**
     * @param {object} body
     *
     * @param {string} id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProblemDetails>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    uploadSignal2WithHttpOperationResponse(body: { [propertyName: string]: any }, id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProblemDetails>>;

    /**
     * @param {object} body
     *
     * @param {string} id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProblemDetails} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProblemDetails} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProblemDetails} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    uploadSignal2(body: { [propertyName: string]: any }, id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ProblemDetails>;
    uploadSignal2(body: { [propertyName: string]: any }, id: string, callback: ServiceCallback<models.ProblemDetails>): void;
    uploadSignal2(body: { [propertyName: string]: any }, id: string, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProblemDetails>): void;


    /**
     * @param {array} body
     *
     * @param {string} id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProblemDetails>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    uploadSignalBatchWithHttpOperationResponse(body: { [propertyName: string]: any }[], id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProblemDetails>>;

    /**
     * @param {array} body
     *
     * @param {string} id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProblemDetails} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProblemDetails} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProblemDetails} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    uploadSignalBatch(body: { [propertyName: string]: any }[], id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ProblemDetails>;
    uploadSignalBatch(body: { [propertyName: string]: any }[], id: string, callback: ServiceCallback<models.ProblemDetails>): void;
    uploadSignalBatch(body: { [propertyName: string]: any }[], id: string, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProblemDetails>): void;


    /**
     * @param {array} body
     *
     * @param {string} id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProblemDetails>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    uploadSignalBatch2WithHttpOperationResponse(body: { [propertyName: string]: any }[], id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProblemDetails>>;

    /**
     * @param {array} body
     *
     * @param {string} id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProblemDetails} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProblemDetails} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProblemDetails} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    uploadSignalBatch2(body: { [propertyName: string]: any }[], id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ProblemDetails>;
    uploadSignalBatch2(body: { [propertyName: string]: any }[], id: string, callback: ServiceCallback<models.ProblemDetails>): void;
    uploadSignalBatch2(body: { [propertyName: string]: any }[], id: string, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProblemDetails>): void;
}

/**
 * @class
 * Purchases
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the Client.
 */
export interface Purchases {


    /**
     * @summary Purchases an Amphora as the logged in user.
     *
     * @param {string} id Amphora Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    purchaseWithHttpOperationResponse(id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * @summary Purchases an Amphora as the logged in user.
     *
     * @param {string} id Amphora Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    purchase(id: string, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    purchase(id: string, callback: ServiceCallback<string>): void;
    purchase(id: string, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * TimeSeries
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the Client.
 */
export interface TimeSeries {


    /**
     * @summary Updates the details of an Amphora by Id.
     *
     * @param {object} body Time Series query. See
     * https://github.com/microsoft/tsiclient/blob/master/docs/Server.md#functions
     * .
     *
     * @param {object} [body.getEvents]
     *
     * @param {object} [body.getSeries]
     *
     * @param {object} [body.aggregateSeries]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    queryTimeSeriesWithHttpOperationResponse(body: models.QueryRequest, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Updates the details of an Amphora by Id.
     *
     * @param {object} body Time Series query. See
     * https://github.com/microsoft/tsiclient/blob/master/docs/Server.md#functions
     * .
     *
     * @param {object} [body.getEvents]
     *
     * @param {object} [body.getSeries]
     *
     * @param {object} [body.aggregateSeries]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.xAmphoradataVersion] API Version Number
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    queryTimeSeries(body: models.QueryRequest, options?: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    queryTimeSeries(body: models.QueryRequest, callback: ServiceCallback<any>): void;
    queryTimeSeries(body: models.QueryRequest, options: { xAmphoradataVersion? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
}
