/**
 * Amphora Data
 *              Connect information in real time with Amphora Data.                          Learn more at https://docs.amphoradata.com
 *
 * The version of the OpenAPI document: 0.10.18
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface AccessLevelQuery
 */
export interface AccessLevelQuery {
    /**
     * Gets or sets The id of the Amphora you are checking.
     * @type {string}
     * @memberof AccessLevelQuery
     */
    amphoraId?: string | null;
    /**
     * Gets or sets the access level that will be checked. Ranges from 0 (none) to 256 (Administer).
     * @type {number}
     * @memberof AccessLevelQuery
     */
    accessLevel?: number;
}
/**
 *
 * @export
 * @interface AccessLevelResponse
 */
export interface AccessLevelResponse {
    /**
     * Gets or sets The id of the Amphora you are checking.
     * @type {string}
     * @memberof AccessLevelResponse
     */
    amphoraId?: string | null;
    /**
     * Gets or sets the access level that will be checked. Ranges from 0 (none) to 256 (Administer).
     * @type {number}
     * @memberof AccessLevelResponse
     */
    accessLevel?: number;
    /**
     * Gets or sets a value indicating whether is authorized at that level.
     * @type {boolean}
     * @memberof AccessLevelResponse
     */
    isAuthorized?: boolean;
}
/**
 *
 * @export
 * @interface AccessLevelResponseAllOf
 */
export interface AccessLevelResponseAllOf {
    /**
     * Gets or sets a value indicating whether is authorized at that level.
     * @type {boolean}
     * @memberof AccessLevelResponseAllOf
     */
    isAuthorized?: boolean;
}
/**
 *
 * @export
 * @interface AccessRuleDtoBase
 */
export interface AccessRuleDtoBase {
    /**
     *
     * @type {string}
     * @memberof AccessRuleDtoBase
     */
    id?: string | null;
    /**
     *
     * @type {string}
     * @memberof AccessRuleDtoBase
     */
    allowOrDeny?: string | null;
    /**
     *
     * @type {number}
     * @memberof AccessRuleDtoBase
     */
    priority?: number;
}
/**
 *
 * @export
 * @interface Account
 */
export interface Account {
    /**
     *
     * @type {number}
     * @memberof Account
     */
    balance?: number;
}
/**
 *
 * @export
 * @interface Activity
 */
export interface Activity {
    /**
     *
     * @type {string}
     * @memberof Activity
     */
    id?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof Activity
     */
    isDeleted?: boolean | null;
    /**
     *
     * @type {Date}
     * @memberof Activity
     */
    createdDate?: Date | null;
    /**
     *
     * @type {string}
     * @memberof Activity
     */
    name?: string | null;
    /**
     *
     * @type {Array<Run>}
     * @memberof Activity
     */
    runs?: Array<Run> | null;
}
/**
 *
 * @export
 * @interface ActivityAllOf
 */
export interface ActivityAllOf {
    /**
     *
     * @type {string}
     * @memberof ActivityAllOf
     */
    name?: string | null;
    /**
     *
     * @type {Array<Run>}
     * @memberof ActivityAllOf
     */
    runs?: Array<Run> | null;
}
/**
 *
 * @export
 * @interface Address
 */
export interface Address {
    /**
     *
     * @type {string}
     * @memberof Address
     */
    streetNumber?: string | null;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    streetName?: string | null;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    municipalitySubdivision?: string | null;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    municipality?: string | null;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    countrySecondarySubdivision?: string | null;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    countrySubdivision?: string | null;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    postalCode?: string | null;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    countryCode?: string | null;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    country?: string | null;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    countryCodeIso3?: string | null;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    freeformAddress?: string | null;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    localName?: string | null;
}
/**
 *
 * @export
 * @interface AggregateSeries
 */
export interface AggregateSeries {
    /**
     *
     * @type {Array<object>}
     * @memberof AggregateSeries
     */
    timeSeriesId?: Array<object> | null;
    /**
     *
     * @type {DateTimeRange}
     * @memberof AggregateSeries
     */
    searchSpan?: DateTimeRange | null;
    /**
     *
     * @type {Tsx}
     * @memberof AggregateSeries
     */
    filter?: Tsx | null;
    /**
     *
     * @type {string}
     * @memberof AggregateSeries
     */
    interval?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof AggregateSeries
     */
    projectedVariables?: Array<string> | null;
    /**
     *
     * @type {{ [key: string]: Variable; }}
     * @memberof AggregateSeries
     */
    inlineVariables?: {
        [key: string]: Variable;
    } | null;
}
/**
 *
 * @export
 * @interface AggregateVariable
 */
export interface AggregateVariable {
    /**
     *
     * @type {Tsx}
     * @memberof AggregateVariable
     */
    filter?: Tsx | null;
    /**
     *
     * @type {string}
     * @memberof AggregateVariable
     */
    kind: string;
    /**
     *
     * @type {Tsx}
     * @memberof AggregateVariable
     */
    aggregation?: Tsx | null;
}
/**
 *
 * @export
 * @interface AllAccessRule
 */
export interface AllAccessRule extends AccessRuleDtoBase {
}
/**
 *
 * @export
 * @interface AmphoraReference
 */
export interface AmphoraReference {
    /**
     *
     * @type {string}
     * @memberof AmphoraReference
     */
    amphoraId?: string | null;
    /**
     *
     * @type {number}
     * @memberof AmphoraReference
     */
    filesConsumed?: number | null;
    /**
     *
     * @type {number}
     * @memberof AmphoraReference
     */
    filesProduced?: number | null;
    /**
     *
     * @type {number}
     * @memberof AmphoraReference
     */
    signalsConsumed?: number | null;
    /**
     *
     * @type {number}
     * @memberof AmphoraReference
     */
    signalsProduced?: number | null;
}
/**
 *
 * @export
 * @interface AmphoraUser
 */
export interface AmphoraUser {
    /**
     *
     * @type {string}
     * @memberof AmphoraUser
     */
    phoneNumber?: string | null;
    /**
     *
     * @type {string}
     * @memberof AmphoraUser
     */
    about?: string | null;
    /**
     *
     * @type {string}
     * @memberof AmphoraUser
     */
    fullName?: string | null;
    /**
     *
     * @type {string}
     * @memberof AmphoraUser
     */
    userName: string;
    /**
     *
     * @type {string}
     * @memberof AmphoraUser
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof AmphoraUser
     */
    email?: string | null;
    /**
     *
     * @type {string}
     * @memberof AmphoraUser
     */
    organisationId?: string | null;
    /**
     *
     * @type {Date}
     * @memberof AmphoraUser
     */
    lastModified?: Date | null;
}
/**
 *
 * @export
 * @interface AmphoraUserAllOf
 */
export interface AmphoraUserAllOf {
    /**
     *
     * @type {string}
     * @memberof AmphoraUserAllOf
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof AmphoraUserAllOf
     */
    email?: string | null;
    /**
     *
     * @type {string}
     * @memberof AmphoraUserAllOf
     */
    organisationId?: string | null;
    /**
     *
     * @type {Date}
     * @memberof AmphoraUserAllOf
     */
    lastModified?: Date | null;
}
/**
 *
 * @export
 * @interface AppLocation
 */
export interface AppLocation {
    /**
     * Gets or sets the expected origin from a XMLHttpRequest Must not end in \'/\'.
     * @type {string}
     * @memberof AppLocation
     */
    origin?: string | null;
    /**
     * Gets or sets allowed redirects after login, relative to Origin. Must begin with a \'/\'.
     * @type {Array<string>}
     * @memberof AppLocation
     */
    allowedRedirectPaths?: Array<string> | null;
    /**
     * Gets or sets the allowed redirect after logout. Must be an absolute url.
     * @type {Array<string>}
     * @memberof AppLocation
     */
    postLogoutRedirects?: Array<string> | null;
    /**
     *
     * @type {string}
     * @memberof AppLocation
     */
    id?: string | null;
}
/**
 *
 * @export
 * @interface AppLocationAllOf
 */
export interface AppLocationAllOf {
    /**
     *
     * @type {string}
     * @memberof AppLocationAllOf
     */
    id?: string | null;
}
/**
 *
 * @export
 * @interface AppLocationBase
 */
export interface AppLocationBase {
    /**
     * Gets or sets the expected origin from a XMLHttpRequest Must not end in \'/\'.
     * @type {string}
     * @memberof AppLocationBase
     */
    origin?: string | null;
    /**
     * Gets or sets allowed redirects after login, relative to Origin. Must begin with a \'/\'.
     * @type {Array<string>}
     * @memberof AppLocationBase
     */
    allowedRedirectPaths?: Array<string> | null;
    /**
     * Gets or sets the allowed redirect after logout. Must be an absolute url.
     * @type {Array<string>}
     * @memberof AppLocationBase
     */
    postLogoutRedirects?: Array<string> | null;
}
/**
 *
 * @export
 * @interface Application
 */
export interface Application {
    /**
     * Gets or sets the name of your application. Will be shown on the consent page.
     * @type {string}
     * @memberof Application
     */
    name?: string | null;
    /**
     * Gets or sets a url for front channel HTTP logouts.
     * @type {string}
     * @memberof Application
     */
    logoutUrl?: string | null;
    /**
     * Gets or sets the allowed scopes for the app. openid is not required, and will be automatically included. Options include: [\'amphora\', \'amphora.purchase\', \'profile\', \'email\', \'web_api\'].
     * @type {Array<string>}
     * @memberof Application
     */
    allowedScopes?: Array<string> | null;
    /**
     *
     * @type {string}
     * @memberof Application
     */
    id?: string | null;
    /**
     * Gets or sets a collection of locations your application will run.
     * @type {Array<AppLocation>}
     * @memberof Application
     */
    locations?: Array<AppLocation> | null;
}
/**
 *
 * @export
 * @interface ApplicationAllOf
 */
export interface ApplicationAllOf {
    /**
     *
     * @type {string}
     * @memberof ApplicationAllOf
     */
    id?: string | null;
    /**
     * Gets or sets a collection of locations your application will run.
     * @type {Array<AppLocation>}
     * @memberof ApplicationAllOf
     */
    locations?: Array<AppLocation> | null;
}
/**
 *
 * @export
 * @interface ApplicationBase
 */
export interface ApplicationBase {
    /**
     * Gets or sets the name of your application. Will be shown on the consent page.
     * @type {string}
     * @memberof ApplicationBase
     */
    name?: string | null;
    /**
     * Gets or sets a url for front channel HTTP logouts.
     * @type {string}
     * @memberof ApplicationBase
     */
    logoutUrl?: string | null;
    /**
     * Gets or sets the allowed scopes for the app. openid is not required, and will be automatically included. Options include: [\'amphora\', \'amphora.purchase\', \'profile\', \'email\', \'web_api\'].
     * @type {Array<string>}
     * @memberof ApplicationBase
     */
    allowedScopes?: Array<string> | null;
}
/**
 *
 * @export
 * @interface BaseAmphoraUser
 */
export interface BaseAmphoraUser {
    /**
     *
     * @type {string}
     * @memberof BaseAmphoraUser
     */
    phoneNumber?: string | null;
    /**
     *
     * @type {string}
     * @memberof BaseAmphoraUser
     */
    about?: string | null;
    /**
     *
     * @type {string}
     * @memberof BaseAmphoraUser
     */
    fullName?: string | null;
    /**
     *
     * @type {string}
     * @memberof BaseAmphoraUser
     */
    userName: string;
}
/**
 *
 * @export
 * @interface BasicAmphora
 */
export interface BasicAmphora {
    /**
     *
     * @type {string}
     * @memberof BasicAmphora
     */
    id?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof BasicAmphora
     */
    isDeleted?: boolean | null;
    /**
     *
     * @type {Date}
     * @memberof BasicAmphora
     */
    createdDate?: Date | null;
    /**
     * Gets or sets the owner\'s organisation Id. Will be set by the server upon creation.
     * @type {string}
     * @memberof BasicAmphora
     */
    organisationId?: string | null;
    /**
     *
     * @type {string}
     * @memberof BasicAmphora
     */
    name: string;
    /**
     *
     * @type {number}
     * @memberof BasicAmphora
     */
    price: number;
    /**
     *
     * @type {string}
     * @memberof BasicAmphora
     */
    labels?: string | null;
}
/**
 * The basic metadata of an Amphora.
 * @export
 * @interface BasicAmphoraAllOf
 */
export interface BasicAmphoraAllOf {
    /**
     * Gets or sets the owner\'s organisation Id. Will be set by the server upon creation.
     * @type {string}
     * @memberof BasicAmphoraAllOf
     */
    organisationId?: string | null;
    /**
     *
     * @type {string}
     * @memberof BasicAmphoraAllOf
     */
    name: string;
    /**
     *
     * @type {number}
     * @memberof BasicAmphoraAllOf
     */
    price: number;
    /**
     *
     * @type {string}
     * @memberof BasicAmphoraAllOf
     */
    labels?: string | null;
}
/**
 *
 * @export
 * @interface CollectionResponseOfApplication
 */
export interface CollectionResponseOfApplication {
    /**
     *
     * @type {string}
     * @memberof CollectionResponseOfApplication
     */
    message?: string | null;
    /**
     *
     * @type {number}
     * @memberof CollectionResponseOfApplication
     */
    count?: number | null;
    /**
     *
     * @type {Array<Application>}
     * @memberof CollectionResponseOfApplication
     */
    items?: Array<Application> | null;
}
/**
 *
 * @export
 * @interface CollectionResponseOfApplicationAllOf
 */
export interface CollectionResponseOfApplicationAllOf {
    /**
     *
     * @type {number}
     * @memberof CollectionResponseOfApplicationAllOf
     */
    count?: number | null;
    /**
     *
     * @type {Array<Application>}
     * @memberof CollectionResponseOfApplicationAllOf
     */
    items?: Array<Application> | null;
}
/**
 *
 * @export
 * @interface CollectionResponseOfInvitation
 */
export interface CollectionResponseOfInvitation {
    /**
     *
     * @type {string}
     * @memberof CollectionResponseOfInvitation
     */
    message?: string | null;
    /**
     *
     * @type {number}
     * @memberof CollectionResponseOfInvitation
     */
    count?: number | null;
    /**
     *
     * @type {Array<Invitation>}
     * @memberof CollectionResponseOfInvitation
     */
    items?: Array<Invitation> | null;
}
/**
 *
 * @export
 * @interface CollectionResponseOfInvitationAllOf
 */
export interface CollectionResponseOfInvitationAllOf {
    /**
     *
     * @type {number}
     * @memberof CollectionResponseOfInvitationAllOf
     */
    count?: number | null;
    /**
     *
     * @type {Array<Invitation>}
     * @memberof CollectionResponseOfInvitationAllOf
     */
    items?: Array<Invitation> | null;
}
/**
 *
 * @export
 * @interface CollectionResponseOfInvoice
 */
export interface CollectionResponseOfInvoice {
    /**
     *
     * @type {string}
     * @memberof CollectionResponseOfInvoice
     */
    message?: string | null;
    /**
     *
     * @type {number}
     * @memberof CollectionResponseOfInvoice
     */
    count?: number | null;
    /**
     *
     * @type {Array<Invoice>}
     * @memberof CollectionResponseOfInvoice
     */
    items?: Array<Invoice> | null;
}
/**
 *
 * @export
 * @interface CollectionResponseOfInvoiceAllOf
 */
export interface CollectionResponseOfInvoiceAllOf {
    /**
     *
     * @type {number}
     * @memberof CollectionResponseOfInvoiceAllOf
     */
    count?: number | null;
    /**
     *
     * @type {Array<Invoice>}
     * @memberof CollectionResponseOfInvoiceAllOf
     */
    items?: Array<Invoice> | null;
}
/**
 *
 * @export
 * @interface CollectionResponseOfMembership
 */
export interface CollectionResponseOfMembership {
    /**
     *
     * @type {string}
     * @memberof CollectionResponseOfMembership
     */
    message?: string | null;
    /**
     *
     * @type {number}
     * @memberof CollectionResponseOfMembership
     */
    count?: number | null;
    /**
     *
     * @type {Array<Membership>}
     * @memberof CollectionResponseOfMembership
     */
    items?: Array<Membership> | null;
}
/**
 *
 * @export
 * @interface CollectionResponseOfMembershipAllOf
 */
export interface CollectionResponseOfMembershipAllOf {
    /**
     *
     * @type {number}
     * @memberof CollectionResponseOfMembershipAllOf
     */
    count?: number | null;
    /**
     *
     * @type {Array<Membership>}
     * @memberof CollectionResponseOfMembershipAllOf
     */
    items?: Array<Membership> | null;
}
/**
 *
 * @export
 * @interface CollectionResponseOfTransaction
 */
export interface CollectionResponseOfTransaction {
    /**
     *
     * @type {string}
     * @memberof CollectionResponseOfTransaction
     */
    message?: string | null;
    /**
     *
     * @type {number}
     * @memberof CollectionResponseOfTransaction
     */
    count?: number | null;
    /**
     *
     * @type {Array<Transaction>}
     * @memberof CollectionResponseOfTransaction
     */
    items?: Array<Transaction> | null;
}
/**
 *
 * @export
 * @interface CollectionResponseOfTransactionAllOf
 */
export interface CollectionResponseOfTransactionAllOf {
    /**
     *
     * @type {number}
     * @memberof CollectionResponseOfTransactionAllOf
     */
    count?: number | null;
    /**
     *
     * @type {Array<Transaction>}
     * @memberof CollectionResponseOfTransactionAllOf
     */
    items?: Array<Transaction> | null;
}
/**
 *
 * @export
 * @interface CreateActivity
 */
export interface CreateActivity {
    /**
     *
     * @type {string}
     * @memberof CreateActivity
     */
    name?: string | null;
}
/**
 *
 * @export
 * @interface CreateAmphora
 */
export interface CreateAmphora {
    /**
     *
     * @type {string}
     * @memberof CreateAmphora
     */
    id?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof CreateAmphora
     */
    isDeleted?: boolean | null;
    /**
     *
     * @type {Date}
     * @memberof CreateAmphora
     */
    createdDate?: Date | null;
    /**
     * Gets or sets the owner\'s organisation Id. Will be set by the server upon creation.
     * @type {string}
     * @memberof CreateAmphora
     */
    organisationId?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateAmphora
     */
    name: string;
    /**
     *
     * @type {number}
     * @memberof CreateAmphora
     */
    price: number;
    /**
     *
     * @type {string}
     * @memberof CreateAmphora
     */
    labels?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateAmphora
     */
    description: string;
    /**
     *
     * @type {number}
     * @memberof CreateAmphora
     */
    lat?: number | null;
    /**
     *
     * @type {number}
     * @memberof CreateAmphora
     */
    lon?: number | null;
    /**
     *
     * @type {string}
     * @memberof CreateAmphora
     */
    termsOfUseId?: string | null;
}
/**
 *
 * @export
 * @interface CreateAmphoraUser
 */
export interface CreateAmphoraUser {
    /**
     *
     * @type {string}
     * @memberof CreateAmphoraUser
     */
    phoneNumber?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateAmphoraUser
     */
    about?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateAmphoraUser
     */
    fullName?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateAmphoraUser
     */
    userName: string;
    /**
     *
     * @type {string}
     * @memberof CreateAmphoraUser
     */
    password: string;
    /**
     *
     * @type {string}
     * @memberof CreateAmphoraUser
     */
    confirmPassword?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateAmphoraUser
     */
    email: string;
}
/**
 *
 * @export
 * @interface CreateAmphoraUserAllOf
 */
export interface CreateAmphoraUserAllOf {
    /**
     *
     * @type {string}
     * @memberof CreateAmphoraUserAllOf
     */
    password: string;
    /**
     *
     * @type {string}
     * @memberof CreateAmphoraUserAllOf
     */
    confirmPassword?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateAmphoraUserAllOf
     */
    email: string;
}
/**
 *
 * @export
 * @interface CreateAppLocation
 */
export interface CreateAppLocation extends AppLocationBase {
}
/**
 *
 * @export
 * @interface CreateApplication
 */
export interface CreateApplication {
    /**
     * Gets or sets the name of your application. Will be shown on the consent page.
     * @type {string}
     * @memberof CreateApplication
     */
    name?: string | null;
    /**
     * Gets or sets a url for front channel HTTP logouts.
     * @type {string}
     * @memberof CreateApplication
     */
    logoutUrl?: string | null;
    /**
     * Gets or sets the allowed scopes for the app. openid is not required, and will be automatically included. Options include: [\'amphora\', \'amphora.purchase\', \'profile\', \'email\', \'web_api\'].
     * @type {Array<string>}
     * @memberof CreateApplication
     */
    allowedScopes?: Array<string> | null;
    /**
     * Gets or sets a collection of locations your application will run.
     * @type {Array<CreateAppLocation>}
     * @memberof CreateApplication
     */
    locations?: Array<CreateAppLocation> | null;
}
/**
 *
 * @export
 * @interface CreateApplicationAllOf
 */
export interface CreateApplicationAllOf {
    /**
     * Gets or sets a collection of locations your application will run.
     * @type {Array<CreateAppLocation>}
     * @memberof CreateApplicationAllOf
     */
    locations?: Array<CreateAppLocation> | null;
}
/**
 *
 * @export
 * @interface CreateInvoice
 */
export interface CreateInvoice {
    /**
     *
     * @type {Date}
     * @memberof CreateInvoice
     */
    month?: Date;
    /**
     *
     * @type {string}
     * @memberof CreateInvoice
     */
    organisationId?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof CreateInvoice
     */
    preview?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof CreateInvoice
     */
    regenerate?: boolean | null;
}
/**
 *
 * @export
 * @interface CreateSignal
 */
export interface CreateSignal {
    /**
     *
     * @type {string}
     * @memberof CreateSignal
     */
    property?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateSignal
     */
    valueType?: string | null;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof CreateSignal
     */
    attributes?: {
        [key: string]: string;
    } | null;
}
/**
 *
 * @export
 * @interface CreateTermsOfUse
 */
export interface CreateTermsOfUse {
    /**
     *
     * @type {string}
     * @memberof CreateTermsOfUse
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof CreateTermsOfUse
     */
    contents: string;
}
/**
 *
 * @export
 * @interface DateTimeRange
 */
export interface DateTimeRange {
    /**
     *
     * @type {Date}
     * @memberof DateTimeRange
     */
    from?: Date;
    /**
     *
     * @type {Date}
     * @memberof DateTimeRange
     */
    to?: Date;
}
/**
 *
 * @export
 * @interface DetailedAmphora
 */
export interface DetailedAmphora {
    /**
     *
     * @type {string}
     * @memberof DetailedAmphora
     */
    id?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof DetailedAmphora
     */
    isDeleted?: boolean | null;
    /**
     *
     * @type {Date}
     * @memberof DetailedAmphora
     */
    createdDate?: Date | null;
    /**
     * Gets or sets the owner\'s organisation Id. Will be set by the server upon creation.
     * @type {string}
     * @memberof DetailedAmphora
     */
    organisationId?: string | null;
    /**
     *
     * @type {string}
     * @memberof DetailedAmphora
     */
    name: string;
    /**
     *
     * @type {number}
     * @memberof DetailedAmphora
     */
    price: number;
    /**
     *
     * @type {string}
     * @memberof DetailedAmphora
     */
    labels?: string | null;
    /**
     *
     * @type {string}
     * @memberof DetailedAmphora
     */
    description: string;
    /**
     *
     * @type {number}
     * @memberof DetailedAmphora
     */
    lat?: number | null;
    /**
     *
     * @type {number}
     * @memberof DetailedAmphora
     */
    lon?: number | null;
    /**
     *
     * @type {string}
     * @memberof DetailedAmphora
     */
    termsOfUseId?: string | null;
    /**
     *
     * @type {number}
     * @memberof DetailedAmphora
     */
    purchaseCount?: number | null;
    /**
     *
     * @type {number}
     * @memberof DetailedAmphora
     */
    signalCount?: number | null;
}
/**
 *
 * @export
 * @interface DetailedAmphoraAllOf
 */
export interface DetailedAmphoraAllOf {
    /**
     *
     * @type {number}
     * @memberof DetailedAmphoraAllOf
     */
    purchaseCount?: number | null;
    /**
     *
     * @type {number}
     * @memberof DetailedAmphoraAllOf
     */
    signalCount?: number | null;
}
/**
 *
 * @export
 * @interface EditAmphora
 */
export interface EditAmphora {
    /**
     *
     * @type {string}
     * @memberof EditAmphora
     */
    id?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof EditAmphora
     */
    isDeleted?: boolean | null;
    /**
     *
     * @type {Date}
     * @memberof EditAmphora
     */
    createdDate?: Date | null;
    /**
     * Gets or sets the owner\'s organisation Id. Will be set by the server upon creation.
     * @type {string}
     * @memberof EditAmphora
     */
    organisationId?: string | null;
    /**
     *
     * @type {string}
     * @memberof EditAmphora
     */
    name: string;
    /**
     *
     * @type {number}
     * @memberof EditAmphora
     */
    price: number;
    /**
     *
     * @type {string}
     * @memberof EditAmphora
     */
    labels?: string | null;
    /**
     *
     * @type {string}
     * @memberof EditAmphora
     */
    description: string;
    /**
     *
     * @type {number}
     * @memberof EditAmphora
     */
    lat?: number | null;
    /**
     *
     * @type {number}
     * @memberof EditAmphora
     */
    lon?: number | null;
    /**
     *
     * @type {string}
     * @memberof EditAmphora
     */
    termsOfUseId?: string | null;
}
/**
 *
 * @export
 * @interface EditAmphoraAllOf
 */
export interface EditAmphoraAllOf {
    /**
     *
     * @type {string}
     * @memberof EditAmphoraAllOf
     */
    description: string;
    /**
     *
     * @type {number}
     * @memberof EditAmphoraAllOf
     */
    lat?: number | null;
    /**
     *
     * @type {number}
     * @memberof EditAmphoraAllOf
     */
    lon?: number | null;
    /**
     *
     * @type {string}
     * @memberof EditAmphoraAllOf
     */
    termsOfUseId?: string | null;
}
/**
 *
 * @export
 * @interface Entity
 */
export interface Entity {
    /**
     *
     * @type {string}
     * @memberof Entity
     */
    id?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof Entity
     */
    isDeleted?: boolean | null;
    /**
     *
     * @type {Date}
     * @memberof Entity
     */
    createdDate?: Date | null;
}
/**
 *
 * @export
 * @interface EventProperty
 */
export interface EventProperty {
    /**
     *
     * @type {string}
     * @memberof EventProperty
     */
    name?: string | null;
    /**
     *
     * @type {string}
     * @memberof EventProperty
     */
    type?: string | null;
}
/**
 *
 * @export
 * @interface FileListOptions
 */
export interface FileListOptions {
    /**
     * Gets or sets how many files to return. Defaults to 64.
     * @type {number}
     * @memberof FileListOptions
     */
    take?: number | null;
    /**
     * Gets or sets how many files to skip before returning. Defaults to 0.
     * @type {number}
     * @memberof FileListOptions
     */
    skip?: number | null;
    /**
     * Gets or sets the the orderBy parameter. Options are Alphabetical or LastModified.
     * @type {string}
     * @memberof FileListOptions
     */
    orderBy?: string | null;
    /**
     * Gets or sets a prefix filter for all file names. Is case sensitive.
     * @type {string}
     * @memberof FileListOptions
     */
    prefix?: string | null;
}
/**
 *
 * @export
 * @interface FileListOptionsAllOf
 */
export interface FileListOptionsAllOf {
    /**
     * Gets or sets the the orderBy parameter. Options are Alphabetical or LastModified.
     * @type {string}
     * @memberof FileListOptionsAllOf
     */
    orderBy?: string | null;
    /**
     * Gets or sets a prefix filter for all file names. Is case sensitive.
     * @type {string}
     * @memberof FileListOptionsAllOf
     */
    prefix?: string | null;
}
/**
 *
 * @export
 * @interface FileQueryOptions
 */
export interface FileQueryOptions {
    /**
     * Gets or sets how many files to return. Defaults to 64.
     * @type {number}
     * @memberof FileQueryOptions
     */
    take?: number | null;
    /**
     * Gets or sets how many files to skip before returning. Defaults to 0.
     * @type {number}
     * @memberof FileQueryOptions
     */
    skip?: number | null;
    /**
     * Gets or sets the the orderBy parameter. Options are Alphabetical or LastModified.
     * @type {string}
     * @memberof FileQueryOptions
     */
    orderBy?: string | null;
    /**
     * Gets or sets a prefix filter for all file names. Is case sensitive.
     * @type {string}
     * @memberof FileQueryOptions
     */
    prefix?: string | null;
    /**
     * Gets or sets the attribute filters.
     * @type {{ [key: string]: string; }}
     * @memberof FileQueryOptions
     */
    attributes?: {
        [key: string]: string;
    } | null;
    /**
     * Gets or sets a value indicating whether whether all attributes are required to match. Defaults to false.
     * @type {boolean}
     * @memberof FileQueryOptions
     */
    allAttributes?: boolean;
}
/**
 *
 * @export
 * @interface FileQueryOptionsAllOf
 */
export interface FileQueryOptionsAllOf {
    /**
     * Gets or sets the attribute filters.
     * @type {{ [key: string]: string; }}
     * @memberof FileQueryOptionsAllOf
     */
    attributes?: {
        [key: string]: string;
    } | null;
    /**
     * Gets or sets a value indicating whether whether all attributes are required to match. Defaults to false.
     * @type {boolean}
     * @memberof FileQueryOptionsAllOf
     */
    allAttributes?: boolean;
}
/**
 *
 * @export
 * @interface FuzzySearchResponse
 */
export interface FuzzySearchResponse {
    /**
     *
     * @type {Summary}
     * @memberof FuzzySearchResponse
     */
    summary?: Summary | null;
    /**
     *
     * @type {Array<Result>}
     * @memberof FuzzySearchResponse
     */
    results?: Array<Result> | null;
}
/**
 *
 * @export
 * @interface GetEvents
 */
export interface GetEvents {
    /**
     *
     * @type {Array<object>}
     * @memberof GetEvents
     */
    timeSeriesId?: Array<object> | null;
    /**
     *
     * @type {DateTimeRange}
     * @memberof GetEvents
     */
    searchSpan?: DateTimeRange | null;
    /**
     *
     * @type {Tsx}
     * @memberof GetEvents
     */
    filter?: Tsx | null;
    /**
     *
     * @type {Array<string>}
     * @memberof GetEvents
     */
    projectedProperties?: Array<string> | null;
}
/**
 *
 * @export
 * @interface GetSeries
 */
export interface GetSeries {
    /**
     *
     * @type {Array<object>}
     * @memberof GetSeries
     */
    timeSeriesId?: Array<object> | null;
    /**
     *
     * @type {DateTimeRange}
     * @memberof GetSeries
     */
    searchSpan?: DateTimeRange | null;
    /**
     *
     * @type {Tsx}
     * @memberof GetSeries
     */
    filter?: Tsx | null;
    /**
     *
     * @type {Array<string>}
     * @memberof GetSeries
     */
    projectedVariables?: Array<string> | null;
    /**
     *
     * @type {{ [key: string]: Variable; }}
     * @memberof GetSeries
     */
    inlineVariables?: {
        [key: string]: Variable;
    } | null;
}
/**
 *
 * @export
 * @interface HandleInvitation
 */
export interface HandleInvitation {
    /**
     * Gets or sets the Id of the organisation that issued the invitation.
     * @type {string}
     * @memberof HandleInvitation
     */
    targetOrganisationId: string;
    /**
     * Gets or sets whether the Invitation will be accepted. True == Accept. False == Reject.
     * @type {boolean}
     * @memberof HandleInvitation
     */
    acceptOrReject: boolean;
}
/**
 *
 * @export
 * @interface Invitation
 */
export interface Invitation {
    /**
     *
     * @type {string}
     * @memberof Invitation
     */
    targetEmail: string;
    /**
     *
     * @type {string}
     * @memberof Invitation
     */
    targetOrganisationId?: string | null;
    /**
     *
     * @type {string}
     * @memberof Invitation
     */
    state?: string | null;
}
/**
 *
 * @export
 * @interface Invoice
 */
export interface Invoice {
    /**
     *
     * @type {string}
     * @memberof Invoice
     */
    id?: string | null;
    /**
     *
     * @type {string}
     * @memberof Invoice
     */
    organisationId?: string | null;
    /**
     *
     * @type {string}
     * @memberof Invoice
     */
    name?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof Invoice
     */
    isPaid?: boolean | null;
    /**
     *
     * @type {Date}
     * @memberof Invoice
     */
    dateCreated?: Date | null;
    /**
     *
     * @type {Date}
     * @memberof Invoice
     */
    timestamp?: Date | null;
    /**
     *
     * @type {number}
     * @memberof Invoice
     */
    openingBalance?: number;
    /**
     *
     * @type {number}
     * @memberof Invoice
     */
    invoiceBalance?: number;
    /**
     *
     * @type {Array<Transaction>}
     * @memberof Invoice
     */
    transactions?: Array<Transaction> | null;
}
/**
 *
 * @export
 * @interface ItemResponseOfInvoice
 */
export interface ItemResponseOfInvoice {
    /**
     *
     * @type {string}
     * @memberof ItemResponseOfInvoice
     */
    message?: string | null;
    /**
     *
     * @type {Invoice}
     * @memberof ItemResponseOfInvoice
     */
    item?: Invoice | null;
}
/**
 *
 * @export
 * @interface LoginClaim
 */
export interface LoginClaim {
    /**
     *
     * @type {string}
     * @memberof LoginClaim
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof LoginClaim
     */
    value?: string | null;
}
/**
 *
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     *
     * @type {string}
     * @memberof LoginRequest
     */
    username: string;
    /**
     *
     * @type {string}
     * @memberof LoginRequest
     */
    password: string;
    /**
     *
     * @type {Array<LoginClaim>}
     * @memberof LoginRequest
     */
    claims?: Array<LoginClaim> | null;
}
/**
 *
 * @export
 * @interface Membership
 */
export interface Membership {
    /**
     *
     * @type {string}
     * @memberof Membership
     */
    username?: string | null;
    /**
     *
     * @type {string}
     * @memberof Membership
     */
    userId?: string | null;
}
/**
 *
 * @export
 * @interface NumericVariable
 */
export interface NumericVariable {
    /**
     *
     * @type {Tsx}
     * @memberof NumericVariable
     */
    filter?: Tsx | null;
    /**
     *
     * @type {string}
     * @memberof NumericVariable
     */
    kind: string;
    /**
     *
     * @type {Tsx}
     * @memberof NumericVariable
     */
    value?: Tsx | null;
    /**
     *
     * @type {Tsx}
     * @memberof NumericVariable
     */
    aggregation?: Tsx | null;
}
/**
 *
 * @export
 * @interface Organisation
 */
export interface Organisation {
    /**
     *
     * @type {string}
     * @memberof Organisation
     */
    id?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof Organisation
     */
    isDeleted?: boolean | null;
    /**
     *
     * @type {Date}
     * @memberof Organisation
     */
    createdDate?: Date | null;
    /**
     *
     * @type {string}
     * @memberof Organisation
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof Organisation
     */
    about: string;
    /**
     *
     * @type {string}
     * @memberof Organisation
     */
    websiteUrl: string;
    /**
     *
     * @type {string}
     * @memberof Organisation
     */
    address?: string | null;
}
/**
 *
 * @export
 * @interface OrganisationAccessRule
 */
export interface OrganisationAccessRule {
    /**
     *
     * @type {string}
     * @memberof OrganisationAccessRule
     */
    id?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganisationAccessRule
     */
    allowOrDeny?: string | null;
    /**
     *
     * @type {number}
     * @memberof OrganisationAccessRule
     */
    priority?: number;
    /**
     *
     * @type {string}
     * @memberof OrganisationAccessRule
     */
    organisationId: string;
}
/**
 *
 * @export
 * @interface OrganisationAccessRuleAllOf
 */
export interface OrganisationAccessRuleAllOf {
    /**
     *
     * @type {string}
     * @memberof OrganisationAccessRuleAllOf
     */
    organisationId: string;
}
/**
 *
 * @export
 * @interface OrganisationAllOf
 */
export interface OrganisationAllOf {
    /**
     *
     * @type {string}
     * @memberof OrganisationAllOf
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof OrganisationAllOf
     */
    about: string;
    /**
     *
     * @type {string}
     * @memberof OrganisationAllOf
     */
    websiteUrl: string;
    /**
     *
     * @type {string}
     * @memberof OrganisationAllOf
     */
    address?: string | null;
}
/**
 *
 * @export
 * @interface PagedResponse
 */
export interface PagedResponse {
    /**
     *
     * @type {string}
     * @memberof PagedResponse
     */
    continuationToken?: string | null;
}
/**
 *
 * @export
 * @interface PaginatedResponse
 */
export interface PaginatedResponse {
    /**
     * Gets or sets how many files to return. Defaults to 64.
     * @type {number}
     * @memberof PaginatedResponse
     */
    take?: number | null;
    /**
     * Gets or sets how many files to skip before returning. Defaults to 0.
     * @type {number}
     * @memberof PaginatedResponse
     */
    skip?: number | null;
}
/**
 *
 * @export
 * @interface PermissionsRequest
 */
export interface PermissionsRequest {
    /**
     *
     * @type {Array<AccessLevelQuery>}
     * @memberof PermissionsRequest
     */
    accessQueries?: Array<AccessLevelQuery> | null;
}
/**
 *
 * @export
 * @interface PermissionsResponse
 */
export interface PermissionsResponse {
    /**
     *
     * @type {Array<AccessLevelResponse>}
     * @memberof PermissionsResponse
     */
    accessResponses?: Array<AccessLevelResponse> | null;
}
/**
 *
 * @export
 * @interface PlanInformation
 */
export interface PlanInformation {
    /**
     *
     * @type {PlanTypes}
     * @memberof PlanInformation
     */
    planType?: PlanTypes;
    /**
     *
     * @type {string}
     * @memberof PlanInformation
     */
    friendlyName?: string | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum PlanTypes {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2
}
/**
 *
 * @export
 * @interface Position
 */
export interface Position {
    /**
     *
     * @type {number}
     * @memberof Position
     */
    lat?: number;
    /**
     *
     * @type {number}
     * @memberof Position
     */
    lon?: number;
}
/**
 *
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    /**
     *
     * @type {string}
     * @memberof ProblemDetails
     */
    type?: string | null;
    /**
     *
     * @type {string}
     * @memberof ProblemDetails
     */
    title?: string | null;
    /**
     *
     * @type {number}
     * @memberof ProblemDetails
     */
    status?: number | null;
    /**
     *
     * @type {string}
     * @memberof ProblemDetails
     */
    detail?: string | null;
    /**
     *
     * @type {string}
     * @memberof ProblemDetails
     */
    instance?: string | null;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof ProblemDetails
     */
    extensions?: {
        [key: string]: object;
    } | null;
}
/**
 *
 * @export
 * @interface PropertyValues
 */
export interface PropertyValues {
    /**
     *
     * @type {string}
     * @memberof PropertyValues
     */
    name?: string | null;
    /**
     *
     * @type {string}
     * @memberof PropertyValues
     */
    type?: string | null;
    /**
     *
     * @type {Array<object>}
     * @memberof PropertyValues
     */
    values?: Array<object> | null;
}
/**
 *
 * @export
 * @interface PropertyValuesAllOf
 */
export interface PropertyValuesAllOf {
    /**
     *
     * @type {Array<object>}
     * @memberof PropertyValuesAllOf
     */
    values?: Array<object> | null;
}
/**
 * Quality metrics for an Amphora, between 1 and 4.
 * @export
 * @interface Quality
 */
export interface Quality {
    /**
     *
     * @type {number}
     * @memberof Quality
     */
    accuracy?: number | null;
    /**
     *
     * @type {number}
     * @memberof Quality
     */
    completeness?: number | null;
    /**
     *
     * @type {number}
     * @memberof Quality
     */
    granularity?: number | null;
    /**
     *
     * @type {number}
     * @memberof Quality
     */
    reliability?: number | null;
}
/**
 *
 * @export
 * @interface QueryRequest
 */
export interface QueryRequest {
    /**
     *
     * @type {GetEvents}
     * @memberof QueryRequest
     */
    getEvents?: GetEvents | null;
    /**
     *
     * @type {GetSeries}
     * @memberof QueryRequest
     */
    getSeries?: GetSeries | null;
    /**
     *
     * @type {AggregateSeries}
     * @memberof QueryRequest
     */
    aggregateSeries?: AggregateSeries | null;
}
/**
 *
 * @export
 * @interface QueryResultPage
 */
export interface QueryResultPage {
    /**
     *
     * @type {string}
     * @memberof QueryResultPage
     */
    continuationToken?: string | null;
    /**
     *
     * @type {Array<Date>}
     * @memberof QueryResultPage
     */
    timestamps?: Array<Date> | null;
    /**
     *
     * @type {Array<PropertyValues>}
     * @memberof QueryResultPage
     */
    properties?: Array<PropertyValues> | null;
}
/**
 *
 * @export
 * @interface QueryResultPageAllOf
 */
export interface QueryResultPageAllOf {
    /**
     *
     * @type {Array<Date>}
     * @memberof QueryResultPageAllOf
     */
    timestamps?: Array<Date> | null;
    /**
     *
     * @type {Array<PropertyValues>}
     * @memberof QueryResultPageAllOf
     */
    properties?: Array<PropertyValues> | null;
}
/**
 *
 * @export
 * @interface Response
 */
export interface Response {
    /**
     *
     * @type {string}
     * @memberof Response
     */
    message?: string | null;
}
/**
 *
 * @export
 * @interface Result
 */
export interface Result {
    /**
     *
     * @type {string}
     * @memberof Result
     */
    id?: string | null;
    /**
     *
     * @type {number}
     * @memberof Result
     */
    score?: number;
    /**
     *
     * @type {Address}
     * @memberof Result
     */
    address?: Address | null;
    /**
     *
     * @type {Position}
     * @memberof Result
     */
    position?: Position | null;
    /**
     *
     * @type {string}
     * @memberof Result
     */
    info?: string | null;
}
/**
 *
 * @export
 * @interface Run
 */
export interface Run {
    /**
     *
     * @type {string}
     * @memberof Run
     */
    id?: string | null;
    /**
     *
     * @type {VersionInfo}
     * @memberof Run
     */
    versionInfo?: VersionInfo | null;
    /**
     *
     * @type {string}
     * @memberof Run
     */
    startedBy?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof Run
     */
    success?: boolean | null;
    /**
     *
     * @type {Date}
     * @memberof Run
     */
    startTime?: Date | null;
    /**
     *
     * @type {Date}
     * @memberof Run
     */
    endTime?: Date | null;
    /**
     *
     * @type {Array<AmphoraReference>}
     * @memberof Run
     */
    amphoraReferences?: Array<AmphoraReference> | null;
}
/**
 *
 * @export
 * @interface Signal
 */
export interface Signal {
    /**
     *
     * @type {string}
     * @memberof Signal
     */
    property?: string | null;
    /**
     *
     * @type {string}
     * @memberof Signal
     */
    valueType?: string | null;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof Signal
     */
    attributes?: {
        [key: string]: string;
    } | null;
    /**
     *
     * @type {string}
     * @memberof Signal
     */
    id?: string | null;
}
/**
 *
 * @export
 * @interface Summary
 */
export interface Summary {
    /**
     *
     * @type {string}
     * @memberof Summary
     */
    query?: string | null;
    /**
     *
     * @type {string}
     * @memberof Summary
     */
    queryType?: string | null;
    /**
     *
     * @type {number}
     * @memberof Summary
     */
    numResults?: number;
    /**
     *
     * @type {number}
     * @memberof Summary
     */
    totalResults?: number;
    /**
     *
     * @type {number}
     * @memberof Summary
     */
    fuzzyLevel?: number;
}
/**
 *
 * @export
 * @interface TermsOfUse
 */
export interface TermsOfUse {
    /**
     *
     * @type {string}
     * @memberof TermsOfUse
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof TermsOfUse
     */
    contents: string;
    /**
     *
     * @type {string}
     * @memberof TermsOfUse
     */
    id?: string | null;
}
/**
 *
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    id?: string | null;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    amphoraId?: string | null;
    /**
     *
     * @type {number}
     * @memberof Transaction
     */
    balance?: number;
    /**
     *
     * @type {number}
     * @memberof Transaction
     */
    amount?: number;
    /**
     *
     * @type {Date}
     * @memberof Transaction
     */
    timestamp?: Date | null;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    label?: string | null;
}
/**
 *
 * @export
 * @interface Tsx
 */
export interface Tsx {
    /**
     *
     * @type {string}
     * @memberof Tsx
     */
    tsx?: string | null;
}
/**
 *
 * @export
 * @interface UpdateApplication
 */
export interface UpdateApplication {
    /**
     * Gets or sets the name of your application. Will be shown on the consent page.
     * @type {string}
     * @memberof UpdateApplication
     */
    name?: string | null;
    /**
     * Gets or sets a url for front channel HTTP logouts.
     * @type {string}
     * @memberof UpdateApplication
     */
    logoutUrl?: string | null;
    /**
     * Gets or sets the allowed scopes for the app. openid is not required, and will be automatically included. Options include: [\'amphora\', \'amphora.purchase\', \'profile\', \'email\', \'web_api\'].
     * @type {Array<string>}
     * @memberof UpdateApplication
     */
    allowedScopes?: Array<string> | null;
    /**
     *
     * @type {string}
     * @memberof UpdateApplication
     */
    id?: string | null;
    /**
     * Gets or sets a collection of locations your application will run.
     * @type {Array<CreateAppLocation>}
     * @memberof UpdateApplication
     */
    locations?: Array<CreateAppLocation> | null;
}
/**
 *
 * @export
 * @interface UpdateApplicationAllOf
 */
export interface UpdateApplicationAllOf {
    /**
     *
     * @type {string}
     * @memberof UpdateApplicationAllOf
     */
    id?: string | null;
    /**
     * Gets or sets a collection of locations your application will run.
     * @type {Array<CreateAppLocation>}
     * @memberof UpdateApplicationAllOf
     */
    locations?: Array<CreateAppLocation> | null;
}
/**
 *
 * @export
 * @interface UpdateRun
 */
export interface UpdateRun {
    /**
     * Gets or sets whether the run failed or succeeded. Setting this will end the run.
     * @type {boolean}
     * @memberof UpdateRun
     */
    success?: boolean | null;
}
/**
 *
 * @export
 * @interface UpdateSignal
 */
export interface UpdateSignal {
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof UpdateSignal
     */
    meta?: {
        [key: string]: string;
    } | null;
}
/**
 *
 * @export
 * @interface UploadResponse
 */
export interface UploadResponse {
    /**
     *
     * @type {string}
     * @memberof UploadResponse
     */
    message?: string | null;
    /**
     *
     * @type {string}
     * @memberof UploadResponse
     */
    url?: string | null;
}
/**
 *
 * @export
 * @interface UploadResponseAllOf
 */
export interface UploadResponseAllOf {
    /**
     *
     * @type {string}
     * @memberof UploadResponseAllOf
     */
    url?: string | null;
}
/**
 *
 * @export
 * @interface UserAccessRule
 */
export interface UserAccessRule {
    /**
     *
     * @type {string}
     * @memberof UserAccessRule
     */
    id?: string | null;
    /**
     *
     * @type {string}
     * @memberof UserAccessRule
     */
    allowOrDeny?: string | null;
    /**
     *
     * @type {number}
     * @memberof UserAccessRule
     */
    priority?: number;
    /**
     *
     * @type {string}
     * @memberof UserAccessRule
     */
    username: string;
}
/**
 *
 * @export
 * @interface UserAccessRuleAllOf
 */
export interface UserAccessRuleAllOf {
    /**
     *
     * @type {string}
     * @memberof UserAccessRuleAllOf
     */
    username: string;
}
/**
 *
 * @export
 * @interface Variable
 */
export interface Variable {
    /**
     *
     * @type {Tsx}
     * @memberof Variable
     */
    filter?: Tsx | null;
    /**
     *
     * @type {string}
     * @memberof Variable
     */
    kind: string;
}
/**
 *
 * @export
 * @interface VersionInfo
 */
export interface VersionInfo {
    /**
     *
     * @type {number}
     * @memberof VersionInfo
     */
    major?: number;
    /**
     *
     * @type {number}
     * @memberof VersionInfo
     */
    minor?: number;
    /**
     *
     * @type {number}
     * @memberof VersionInfo
     */
    patch?: number;
}
/**
 * AccountApi - axios parameter creator
 * @export
 */
export declare const AccountApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Gets a list of invitations to the organisation.
     * @param {string} [id] The organisation id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountInvitationsInvitations(id?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead2(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Creates a new invoice. Restricted to global administrators.
     * @param {CreateInvoice} createInvoice The organisation for which to create the invoice.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invoicesCreateInvoice(createInvoice: CreateInvoice, options?: any): RequestArgs;
    /**
     *
     * @summary Downloads an invoice in a specified format.
     * @param {string} id Invoice Id.
     * @param {string} [format] Only csv is supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invoicesDownloadInvoice(id: string, format?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Returns a list of invoices as items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invoicesGetInvoices(options?: any): RequestArgs;
    /**
     *
     * @summary Returns a collection of members of an organisational account.
     * @param {string} [id] Organisation Id. Defaults to your org.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    membershipGetMemberships(id?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Gets an Organisation\'s plan information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planGetPlan(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Gets an Organisation\'s plan information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planGetPlan2(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Set\'s an Organisation\'s plan.
     * @param {string} id Organisation Id.
     * @param {string} [planType] The Plan Type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planSetPlan(id: string, planType?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Set\'s an Organisation\'s plan.
     * @param {string} id Organisation Id.
     * @param {string} [planType] The Plan Type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planSetPlan2(id: string, planType?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Gets the most recent transactions of the account. Defaults to the first 50 debits and 50 credits.
     * @param {string} [id] Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsGetTransactions(id?: string | undefined, options?: any): RequestArgs;
};
/**
 * AccountApi - functional programming interface
 * @export
 */
export declare const AccountApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Gets a list of invitations to the organisation.
     * @param {string} [id] The organisation id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountInvitationsInvitations(id?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CollectionResponseOfInvitation>;
    /**
     *
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Account>;
    /**
     *
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead2(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Account>;
    /**
     *
     * @summary Creates a new invoice. Restricted to global administrators.
     * @param {CreateInvoice} createInvoice The organisation for which to create the invoice.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invoicesCreateInvoice(createInvoice: CreateInvoice, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ItemResponseOfInvoice>;
    /**
     *
     * @summary Downloads an invoice in a specified format.
     * @param {string} id Invoice Id.
     * @param {string} [format] Only csv is supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invoicesDownloadInvoice(id: string, format?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CollectionResponseOfInvoice>;
    /**
     *
     * @summary Returns a list of invoices as items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invoicesGetInvoices(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CollectionResponseOfInvoice>;
    /**
     *
     * @summary Returns a collection of members of an organisational account.
     * @param {string} [id] Organisation Id. Defaults to your org.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    membershipGetMemberships(id?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CollectionResponseOfMembership>;
    /**
     *
     * @summary Gets an Organisation\'s plan information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planGetPlan(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PlanInformation>;
    /**
     *
     * @summary Gets an Organisation\'s plan information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planGetPlan2(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PlanInformation>;
    /**
     *
     * @summary Set\'s an Organisation\'s plan.
     * @param {string} id Organisation Id.
     * @param {string} [planType] The Plan Type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planSetPlan(id: string, planType?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PlanInformation>;
    /**
     *
     * @summary Set\'s an Organisation\'s plan.
     * @param {string} id Organisation Id.
     * @param {string} [planType] The Plan Type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planSetPlan2(id: string, planType?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PlanInformation>;
    /**
     *
     * @summary Gets the most recent transactions of the account. Defaults to the first 50 debits and 50 credits.
     * @param {string} [id] Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsGetTransactions(id?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CollectionResponseOfTransaction>;
};
/**
 * AccountApi - factory interface
 * @export
 */
export declare const AccountApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Gets a list of invitations to the organisation.
     * @param {string} [id] The organisation id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountInvitationsInvitations(id?: string | undefined, options?: any): AxiosPromise<CollectionResponseOfInvitation>;
    /**
     *
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead(id: string, options?: any): AxiosPromise<Account>;
    /**
     *
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead2(id: string, options?: any): AxiosPromise<Account>;
    /**
     *
     * @summary Creates a new invoice. Restricted to global administrators.
     * @param {CreateInvoice} createInvoice The organisation for which to create the invoice.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invoicesCreateInvoice(createInvoice: CreateInvoice, options?: any): AxiosPromise<ItemResponseOfInvoice>;
    /**
     *
     * @summary Downloads an invoice in a specified format.
     * @param {string} id Invoice Id.
     * @param {string} [format] Only csv is supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invoicesDownloadInvoice(id: string, format?: string | undefined, options?: any): AxiosPromise<CollectionResponseOfInvoice>;
    /**
     *
     * @summary Returns a list of invoices as items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invoicesGetInvoices(options?: any): AxiosPromise<CollectionResponseOfInvoice>;
    /**
     *
     * @summary Returns a collection of members of an organisational account.
     * @param {string} [id] Organisation Id. Defaults to your org.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    membershipGetMemberships(id?: string | undefined, options?: any): AxiosPromise<CollectionResponseOfMembership>;
    /**
     *
     * @summary Gets an Organisation\'s plan information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planGetPlan(id: string, options?: any): AxiosPromise<PlanInformation>;
    /**
     *
     * @summary Gets an Organisation\'s plan information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planGetPlan2(id: string, options?: any): AxiosPromise<PlanInformation>;
    /**
     *
     * @summary Set\'s an Organisation\'s plan.
     * @param {string} id Organisation Id.
     * @param {string} [planType] The Plan Type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planSetPlan(id: string, planType?: string | undefined, options?: any): AxiosPromise<PlanInformation>;
    /**
     *
     * @summary Set\'s an Organisation\'s plan.
     * @param {string} id Organisation Id.
     * @param {string} [planType] The Plan Type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planSetPlan2(id: string, planType?: string | undefined, options?: any): AxiosPromise<PlanInformation>;
    /**
     *
     * @summary Gets the most recent transactions of the account. Defaults to the first 50 debits and 50 credits.
     * @param {string} [id] Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsGetTransactions(id?: string | undefined, options?: any): AxiosPromise<CollectionResponseOfTransaction>;
};
/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export declare class AccountApi extends BaseAPI {
    /**
     *
     * @summary Gets a list of invitations to the organisation.
     * @param {string} [id] The organisation id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    accountInvitationsInvitations(id?: string, options?: any): AxiosPromise<CollectionResponseOfInvitation>;
    /**
     *
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    accountRead(id: string, options?: any): AxiosPromise<Account>;
    /**
     *
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    accountRead2(id: string, options?: any): AxiosPromise<Account>;
    /**
     *
     * @summary Creates a new invoice. Restricted to global administrators.
     * @param {CreateInvoice} createInvoice The organisation for which to create the invoice.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    invoicesCreateInvoice(createInvoice: CreateInvoice, options?: any): AxiosPromise<ItemResponseOfInvoice>;
    /**
     *
     * @summary Downloads an invoice in a specified format.
     * @param {string} id Invoice Id.
     * @param {string} [format] Only csv is supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    invoicesDownloadInvoice(id: string, format?: string, options?: any): AxiosPromise<CollectionResponseOfInvoice>;
    /**
     *
     * @summary Returns a list of invoices as items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    invoicesGetInvoices(options?: any): AxiosPromise<CollectionResponseOfInvoice>;
    /**
     *
     * @summary Returns a collection of members of an organisational account.
     * @param {string} [id] Organisation Id. Defaults to your org.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    membershipGetMemberships(id?: string, options?: any): AxiosPromise<CollectionResponseOfMembership>;
    /**
     *
     * @summary Gets an Organisation\'s plan information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    planGetPlan(id: string, options?: any): AxiosPromise<PlanInformation>;
    /**
     *
     * @summary Gets an Organisation\'s plan information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    planGetPlan2(id: string, options?: any): AxiosPromise<PlanInformation>;
    /**
     *
     * @summary Set\'s an Organisation\'s plan.
     * @param {string} id Organisation Id.
     * @param {string} [planType] The Plan Type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    planSetPlan(id: string, planType?: string, options?: any): AxiosPromise<PlanInformation>;
    /**
     *
     * @summary Set\'s an Organisation\'s plan.
     * @param {string} id Organisation Id.
     * @param {string} [planType] The Plan Type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    planSetPlan2(id: string, planType?: string, options?: any): AxiosPromise<PlanInformation>;
    /**
     *
     * @summary Gets the most recent transactions of the account. Defaults to the first 50 debits and 50 credits.
     * @param {string} [id] Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    transactionsGetTransactions(id?: string, options?: any): AxiosPromise<CollectionResponseOfTransaction>;
}
/**
 * ActivitiesApi - axios parameter creator
 * @export
 */
export declare const ActivitiesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Creates a new activity.
     * @param {CreateActivity} createActivity Metadata of the new activity.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesCreateActivity(createActivity: CreateActivity, options?: any): RequestArgs;
    /**
     *
     * @summary Deletes an activity.
     * @param {string} id The activity Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesDeleteActivity(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Gets the metadata of an activity.
     * @param {string} id The activity Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesReadActivity(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary References an Amphora during a run.
     * @param {string} id The activity Id.
     * @param {string} runId The run Id.
     * @param {string} amphoraId The Id of the Amphora to reference.
     * @param {AmphoraReference} amphoraReference Information about the reference.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesReferenceAmphora(id: string, runId: string, amphoraId: string, amphoraReference: AmphoraReference, options?: any): RequestArgs;
    /**
     *
     * @summary Starts a new run of an activity.
     * @param {string} id The activity id in which to start a run.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesStartRun(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Updates and completes a run.
     * @param {string} id The activity Id.
     * @param {string} runId The run Id.
     * @param {UpdateRun} updateRun Information about the update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesUpdateRun(id: string, runId: string, updateRun: UpdateRun, options?: any): RequestArgs;
};
/**
 * ActivitiesApi - functional programming interface
 * @export
 */
export declare const ActivitiesApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Creates a new activity.
     * @param {CreateActivity} createActivity Metadata of the new activity.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesCreateActivity(createActivity: CreateActivity, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Activity>;
    /**
     *
     * @summary Deletes an activity.
     * @param {string} id The activity Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesDeleteActivity(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;
    /**
     *
     * @summary Gets the metadata of an activity.
     * @param {string} id The activity Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesReadActivity(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Activity>;
    /**
     *
     * @summary References an Amphora during a run.
     * @param {string} id The activity Id.
     * @param {string} runId The run Id.
     * @param {string} amphoraId The Id of the Amphora to reference.
     * @param {AmphoraReference} amphoraReference Information about the reference.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesReferenceAmphora(id: string, runId: string, amphoraId: string, amphoraReference: AmphoraReference, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<AmphoraReference>;
    /**
     *
     * @summary Starts a new run of an activity.
     * @param {string} id The activity id in which to start a run.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesStartRun(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Run>;
    /**
     *
     * @summary Updates and completes a run.
     * @param {string} id The activity Id.
     * @param {string} runId The run Id.
     * @param {UpdateRun} updateRun Information about the update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesUpdateRun(id: string, runId: string, updateRun: UpdateRun, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Run>;
};
/**
 * ActivitiesApi - factory interface
 * @export
 */
export declare const ActivitiesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Creates a new activity.
     * @param {CreateActivity} createActivity Metadata of the new activity.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesCreateActivity(createActivity: CreateActivity, options?: any): AxiosPromise<Activity>;
    /**
     *
     * @summary Deletes an activity.
     * @param {string} id The activity Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesDeleteActivity(id: string, options?: any): AxiosPromise<Response>;
    /**
     *
     * @summary Gets the metadata of an activity.
     * @param {string} id The activity Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesReadActivity(id: string, options?: any): AxiosPromise<Activity>;
    /**
     *
     * @summary References an Amphora during a run.
     * @param {string} id The activity Id.
     * @param {string} runId The run Id.
     * @param {string} amphoraId The Id of the Amphora to reference.
     * @param {AmphoraReference} amphoraReference Information about the reference.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesReferenceAmphora(id: string, runId: string, amphoraId: string, amphoraReference: AmphoraReference, options?: any): AxiosPromise<AmphoraReference>;
    /**
     *
     * @summary Starts a new run of an activity.
     * @param {string} id The activity id in which to start a run.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesStartRun(id: string, options?: any): AxiosPromise<Run>;
    /**
     *
     * @summary Updates and completes a run.
     * @param {string} id The activity Id.
     * @param {string} runId The run Id.
     * @param {UpdateRun} updateRun Information about the update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesUpdateRun(id: string, runId: string, updateRun: UpdateRun, options?: any): AxiosPromise<Run>;
};
/**
 * ActivitiesApi - object-oriented interface
 * @export
 * @class ActivitiesApi
 * @extends {BaseAPI}
 */
export declare class ActivitiesApi extends BaseAPI {
    /**
     *
     * @summary Creates a new activity.
     * @param {CreateActivity} createActivity Metadata of the new activity.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    activitiesCreateActivity(createActivity: CreateActivity, options?: any): AxiosPromise<Activity>;
    /**
     *
     * @summary Deletes an activity.
     * @param {string} id The activity Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    activitiesDeleteActivity(id: string, options?: any): AxiosPromise<Response>;
    /**
     *
     * @summary Gets the metadata of an activity.
     * @param {string} id The activity Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    activitiesReadActivity(id: string, options?: any): AxiosPromise<Activity>;
    /**
     *
     * @summary References an Amphora during a run.
     * @param {string} id The activity Id.
     * @param {string} runId The run Id.
     * @param {string} amphoraId The Id of the Amphora to reference.
     * @param {AmphoraReference} amphoraReference Information about the reference.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    activitiesReferenceAmphora(id: string, runId: string, amphoraId: string, amphoraReference: AmphoraReference, options?: any): AxiosPromise<AmphoraReference>;
    /**
     *
     * @summary Starts a new run of an activity.
     * @param {string} id The activity id in which to start a run.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    activitiesStartRun(id: string, options?: any): AxiosPromise<Run>;
    /**
     *
     * @summary Updates and completes a run.
     * @param {string} id The activity Id.
     * @param {string} runId The run Id.
     * @param {UpdateRun} updateRun Information about the update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    activitiesUpdateRun(id: string, runId: string, updateRun: UpdateRun, options?: any): AxiosPromise<Run>;
}
/**
 * AmphoraeApi - axios parameter creator
 * @export
 */
export declare const AmphoraeApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Gets the data quality metrics for this Amphora.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraQualityGet(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Sets the data quality metrics for this Amphora.
     * @param {string} id Amphora Id.
     * @param {Quality} quality The data quality metrics.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraQualitySet(id: string, quality: Quality, options?: any): RequestArgs;
    /**
     *
     * @summary Creates an Access Control Rule for all on this Amphora.
     * @param {string} id Amphora Id.
     * @param {AllAccessRule} allAccessRule The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForAll(id: string, allAccessRule: AllAccessRule, options?: any): RequestArgs;
    /**
     *
     * @summary Creates an Access Control Rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {OrganisationAccessRule} organisationAccessRule The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForOrganisation(id: string, organisationAccessRule: OrganisationAccessRule, options?: any): RequestArgs;
    /**
     *
     * @summary Creates an Access Control rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {UserAccessRule} userAccessRule The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForUser(id: string, userAccessRule: UserAccessRule, options?: any): RequestArgs;
    /**
     *
     * @summary Deletes an Access Control on this Amphora.
     * @param {string} id Amphora Id.
     * @param {string} ruleId The Id of the rule to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsDelete(id: string, ruleId: string, options?: any): RequestArgs;
    /**
     *
     * @summary Gets the \'for all\' rule, if it exists, else an empty 200.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetForAllRule(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Gets the list of access rules applied to organisations.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetOrganisationRules(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Gets the list of access rules applied to users.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetUserRules(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Creates a new empty Amphora in the user\'s organisation.
     * @param {CreateAmphora} createAmphora Information for the new Amphora.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeCreate(createAmphora: CreateAmphora, options?: any): RequestArgs;
    /**
     *
     * @summary Deletes an Amphora.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeDelete(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Creates a file. Returns a blob URL to upload to.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesCreateFileRequest(id: string, file: string, options?: any): RequestArgs;
    /**
     *
     * @summary Gets the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesDeleteFile(id: string, file: string, options?: any): RequestArgs;
    /**
     *
     * @summary Gets the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesDownloadFile(id: string, file: string, options?: any): RequestArgs;
    /**
     *
     * @summary Lists an Amphora\'s files.
     * @param {string} id Amphora Id.
     * @param {string} [orderBy] Gets or sets the the orderBy parameter. Options are Alphabetical or LastModified.
     * @param {string} [prefix] Gets or sets a prefix filter for all file names. Is case sensitive.
     * @param {number} [take] Gets or sets how many files to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many files to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesListFiles(id: string, orderBy?: string | undefined, prefix?: string | undefined, take?: number | undefined, skip?: number | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Queries an Amphora\'s files.
     * @param {string} id Amphora Id.
     * @param {FileQueryOptions} fileQueryOptions Option for querying the files.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesQueryFiles(id: string, fileQueryOptions: FileQueryOptions, options?: any): RequestArgs;
    /**
     *
     * @summary Gets the attributes of a file.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesReadFileAttributes(id: string, file: string, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {string} file
     * @param {{ [key: string]: string; }} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesWriteFileAttributes(id: string, file: string, requestBody: {
        [key: string]: string;
    }, options?: any): RequestArgs;
    /**
     *
     * @summary Gets a list of Amphora for yourself or your org, created or purchased by you (or organisation).
     * @param {string} [scope] \&#39;self\&#39; or \&#39;organisation\&#39;. Defaults to self.
     * @param {string} [accessType] \&#39;created\&#39; or \&#39;purchased\&#39;. Defaults to created.
     * @param {number} [take] Gets or sets how many files to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many files to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeList(scope?: string | undefined, accessType?: string | undefined, take?: number | undefined, skip?: number | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Gets details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeRead(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {CreateSignal} createSignal Signal Details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsCreateSignal(id: string, createSignal: CreateSignal, options?: any): RequestArgs;
    /**
     *
     * @summary Gets the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} property The name or id of the signal property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsGetSignal(id: string, property: string, options?: any): RequestArgs;
    /**
     *
     * @summary Gets the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsGetSignals(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {string} signalId Signal Details.
     * @param {UpdateSignal} updateSignal Signal properties to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUpdateSignal(id: string, signalId: string, updateSignal: UpdateSignal, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignal(id: string, requestBody: {
        [key: string]: object;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignal2(id: string, requestBody: {
        [key: string]: object;
    }, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {Array<{ [key: string]: object; }>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignalBatch(id: string, requestBody: {
        [key: string]: object;
    }[], options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {Array<{ [key: string]: object; }>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignalBatch2(id: string, requestBody: {
        [key: string]: object;
    }[], options?: any): RequestArgs;
    /**
     *
     * @summary Updates the details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {EditAmphora} editAmphora Information to update. Nulls are NOT ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeUpdate(id: string, editAmphora: EditAmphora, options?: any): RequestArgs;
    /**
     *
     * @summary Purchases an Amphora as the logged in user.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchasesPurchase(id: string, options?: any): RequestArgs;
};
/**
 * AmphoraeApi - functional programming interface
 * @export
 */
export declare const AmphoraeApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Gets the data quality metrics for this Amphora.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraQualityGet(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Quality>;
    /**
     *
     * @summary Sets the data quality metrics for this Amphora.
     * @param {string} id Amphora Id.
     * @param {Quality} quality The data quality metrics.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraQualitySet(id: string, quality: Quality, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Quality>;
    /**
     *
     * @summary Creates an Access Control Rule for all on this Amphora.
     * @param {string} id Amphora Id.
     * @param {AllAccessRule} allAccessRule The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForAll(id: string, allAccessRule: AllAccessRule, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<AllAccessRule>;
    /**
     *
     * @summary Creates an Access Control Rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {OrganisationAccessRule} organisationAccessRule The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForOrganisation(id: string, organisationAccessRule: OrganisationAccessRule, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<UserAccessRule>;
    /**
     *
     * @summary Creates an Access Control rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {UserAccessRule} userAccessRule The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForUser(id: string, userAccessRule: UserAccessRule, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<UserAccessRule>;
    /**
     *
     * @summary Deletes an Access Control on this Amphora.
     * @param {string} id Amphora Id.
     * @param {string} ruleId The Id of the rule to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsDelete(id: string, ruleId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;
    /**
     *
     * @summary Gets the \'for all\' rule, if it exists, else an empty 200.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetForAllRule(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<AllAccessRule>;
    /**
     *
     * @summary Gets the list of access rules applied to organisations.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetOrganisationRules(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<OrganisationAccessRule>>;
    /**
     *
     * @summary Gets the list of access rules applied to users.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetUserRules(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<UserAccessRule>>;
    /**
     *
     * @summary Creates a new empty Amphora in the user\'s organisation.
     * @param {CreateAmphora} createAmphora Information for the new Amphora.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeCreate(createAmphora: CreateAmphora, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DetailedAmphora>;
    /**
     *
     * @summary Deletes an Amphora.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeDelete(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
    /**
     *
     * @summary Creates a file. Returns a blob URL to upload to.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesCreateFileRequest(id: string, file: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<UploadResponse>;
    /**
     *
     * @summary Gets the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesDeleteFile(id: string, file: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;
    /**
     *
     * @summary Gets the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesDownloadFile(id: string, file: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>;
    /**
     *
     * @summary Lists an Amphora\'s files.
     * @param {string} id Amphora Id.
     * @param {string} [orderBy] Gets or sets the the orderBy parameter. Options are Alphabetical or LastModified.
     * @param {string} [prefix] Gets or sets a prefix filter for all file names. Is case sensitive.
     * @param {number} [take] Gets or sets how many files to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many files to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesListFiles(id: string, orderBy?: string | undefined, prefix?: string | undefined, take?: number | undefined, skip?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<string>>;
    /**
     *
     * @summary Queries an Amphora\'s files.
     * @param {string} id Amphora Id.
     * @param {FileQueryOptions} fileQueryOptions Option for querying the files.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesQueryFiles(id: string, fileQueryOptions: FileQueryOptions, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<string>>;
    /**
     *
     * @summary Gets the attributes of a file.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesReadFileAttributes(id: string, file: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<{
        [key: string]: string;
    }>;
    /**
     *
     * @param {string} id
     * @param {string} file
     * @param {{ [key: string]: string; }} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesWriteFileAttributes(id: string, file: string, requestBody: {
        [key: string]: string;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<{
        [key: string]: string;
    }>;
    /**
     *
     * @summary Gets a list of Amphora for yourself or your org, created or purchased by you (or organisation).
     * @param {string} [scope] \&#39;self\&#39; or \&#39;organisation\&#39;. Defaults to self.
     * @param {string} [accessType] \&#39;created\&#39; or \&#39;purchased\&#39;. Defaults to created.
     * @param {number} [take] Gets or sets how many files to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many files to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeList(scope?: string | undefined, accessType?: string | undefined, take?: number | undefined, skip?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<DetailedAmphora>>;
    /**
     *
     * @summary Gets details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeRead(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DetailedAmphora>;
    /**
     *
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {CreateSignal} createSignal Signal Details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsCreateSignal(id: string, createSignal: CreateSignal, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Signal>;
    /**
     *
     * @summary Gets the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} property The name or id of the signal property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsGetSignal(id: string, property: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Signal>;
    /**
     *
     * @summary Gets the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsGetSignals(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Signal>>;
    /**
     *
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {string} signalId Signal Details.
     * @param {UpdateSignal} updateSignal Signal properties to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUpdateSignal(id: string, signalId: string, updateSignal: UpdateSignal, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Signal>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignal(id: string, requestBody: {
        [key: string]: object;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<{
        [key: string]: object;
    }>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignal2(id: string, requestBody: {
        [key: string]: object;
    }, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<{
        [key: string]: object;
    }>;
    /**
     *
     * @param {string} id
     * @param {Array<{ [key: string]: object; }>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignalBatch(id: string, requestBody: {
        [key: string]: object;
    }[], options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<{
        [key: string]: object;
    }>;
    /**
     *
     * @param {string} id
     * @param {Array<{ [key: string]: object; }>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignalBatch2(id: string, requestBody: {
        [key: string]: object;
    }[], options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<{
        [key: string]: object;
    }>;
    /**
     *
     * @summary Updates the details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {EditAmphora} editAmphora Information to update. Nulls are NOT ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeUpdate(id: string, editAmphora: EditAmphora, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DetailedAmphora>;
    /**
     *
     * @summary Purchases an Amphora as the logged in user.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchasesPurchase(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Response>;
};
/**
 * AmphoraeApi - factory interface
 * @export
 */
export declare const AmphoraeApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Gets the data quality metrics for this Amphora.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraQualityGet(id: string, options?: any): AxiosPromise<Quality>;
    /**
     *
     * @summary Sets the data quality metrics for this Amphora.
     * @param {string} id Amphora Id.
     * @param {Quality} quality The data quality metrics.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraQualitySet(id: string, quality: Quality, options?: any): AxiosPromise<Quality>;
    /**
     *
     * @summary Creates an Access Control Rule for all on this Amphora.
     * @param {string} id Amphora Id.
     * @param {AllAccessRule} allAccessRule The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForAll(id: string, allAccessRule: AllAccessRule, options?: any): AxiosPromise<AllAccessRule>;
    /**
     *
     * @summary Creates an Access Control Rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {OrganisationAccessRule} organisationAccessRule The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForOrganisation(id: string, organisationAccessRule: OrganisationAccessRule, options?: any): AxiosPromise<UserAccessRule>;
    /**
     *
     * @summary Creates an Access Control rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {UserAccessRule} userAccessRule The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForUser(id: string, userAccessRule: UserAccessRule, options?: any): AxiosPromise<UserAccessRule>;
    /**
     *
     * @summary Deletes an Access Control on this Amphora.
     * @param {string} id Amphora Id.
     * @param {string} ruleId The Id of the rule to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsDelete(id: string, ruleId: string, options?: any): AxiosPromise<Response>;
    /**
     *
     * @summary Gets the \'for all\' rule, if it exists, else an empty 200.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetForAllRule(id: string, options?: any): AxiosPromise<AllAccessRule>;
    /**
     *
     * @summary Gets the list of access rules applied to organisations.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetOrganisationRules(id: string, options?: any): AxiosPromise<OrganisationAccessRule[]>;
    /**
     *
     * @summary Gets the list of access rules applied to users.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetUserRules(id: string, options?: any): AxiosPromise<UserAccessRule[]>;
    /**
     *
     * @summary Creates a new empty Amphora in the user\'s organisation.
     * @param {CreateAmphora} createAmphora Information for the new Amphora.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeCreate(createAmphora: CreateAmphora, options?: any): AxiosPromise<DetailedAmphora>;
    /**
     *
     * @summary Deletes an Amphora.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeDelete(id: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Creates a file. Returns a blob URL to upload to.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesCreateFileRequest(id: string, file: string, options?: any): AxiosPromise<UploadResponse>;
    /**
     *
     * @summary Gets the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesDeleteFile(id: string, file: string, options?: any): AxiosPromise<Response>;
    /**
     *
     * @summary Gets the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesDownloadFile(id: string, file: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Lists an Amphora\'s files.
     * @param {string} id Amphora Id.
     * @param {string} [orderBy] Gets or sets the the orderBy parameter. Options are Alphabetical or LastModified.
     * @param {string} [prefix] Gets or sets a prefix filter for all file names. Is case sensitive.
     * @param {number} [take] Gets or sets how many files to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many files to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesListFiles(id: string, orderBy?: string | undefined, prefix?: string | undefined, take?: number | undefined, skip?: number | undefined, options?: any): AxiosPromise<string[]>;
    /**
     *
     * @summary Queries an Amphora\'s files.
     * @param {string} id Amphora Id.
     * @param {FileQueryOptions} fileQueryOptions Option for querying the files.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesQueryFiles(id: string, fileQueryOptions: FileQueryOptions, options?: any): AxiosPromise<string[]>;
    /**
     *
     * @summary Gets the attributes of a file.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesReadFileAttributes(id: string, file: string, options?: any): AxiosPromise<{
        [key: string]: string;
    }>;
    /**
     *
     * @param {string} id
     * @param {string} file
     * @param {{ [key: string]: string; }} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesWriteFileAttributes(id: string, file: string, requestBody: {
        [key: string]: string;
    }, options?: any): AxiosPromise<{
        [key: string]: string;
    }>;
    /**
     *
     * @summary Gets a list of Amphora for yourself or your org, created or purchased by you (or organisation).
     * @param {string} [scope] \&#39;self\&#39; or \&#39;organisation\&#39;. Defaults to self.
     * @param {string} [accessType] \&#39;created\&#39; or \&#39;purchased\&#39;. Defaults to created.
     * @param {number} [take] Gets or sets how many files to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many files to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeList(scope?: string | undefined, accessType?: string | undefined, take?: number | undefined, skip?: number | undefined, options?: any): AxiosPromise<DetailedAmphora[]>;
    /**
     *
     * @summary Gets details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeRead(id: string, options?: any): AxiosPromise<DetailedAmphora>;
    /**
     *
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {CreateSignal} createSignal Signal Details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsCreateSignal(id: string, createSignal: CreateSignal, options?: any): AxiosPromise<Signal>;
    /**
     *
     * @summary Gets the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} property The name or id of the signal property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsGetSignal(id: string, property: string, options?: any): AxiosPromise<Signal>;
    /**
     *
     * @summary Gets the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsGetSignals(id: string, options?: any): AxiosPromise<Signal[]>;
    /**
     *
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {string} signalId Signal Details.
     * @param {UpdateSignal} updateSignal Signal properties to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUpdateSignal(id: string, signalId: string, updateSignal: UpdateSignal, options?: any): AxiosPromise<Signal>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignal(id: string, requestBody: {
        [key: string]: object;
    }, options?: any): AxiosPromise<{
        [key: string]: object;
    }>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignal2(id: string, requestBody: {
        [key: string]: object;
    }, options?: any): AxiosPromise<{
        [key: string]: object;
    }>;
    /**
     *
     * @param {string} id
     * @param {Array<{ [key: string]: object; }>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignalBatch(id: string, requestBody: {
        [key: string]: object;
    }[], options?: any): AxiosPromise<{
        [key: string]: object;
    }>;
    /**
     *
     * @param {string} id
     * @param {Array<{ [key: string]: object; }>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignalBatch2(id: string, requestBody: {
        [key: string]: object;
    }[], options?: any): AxiosPromise<{
        [key: string]: object;
    }>;
    /**
     *
     * @summary Updates the details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {EditAmphora} editAmphora Information to update. Nulls are NOT ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeUpdate(id: string, editAmphora: EditAmphora, options?: any): AxiosPromise<DetailedAmphora>;
    /**
     *
     * @summary Purchases an Amphora as the logged in user.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchasesPurchase(id: string, options?: any): AxiosPromise<Response>;
};
/**
 * AmphoraeApi - object-oriented interface
 * @export
 * @class AmphoraeApi
 * @extends {BaseAPI}
 */
export declare class AmphoraeApi extends BaseAPI {
    /**
     *
     * @summary Gets the data quality metrics for this Amphora.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraQualityGet(id: string, options?: any): AxiosPromise<Quality>;
    /**
     *
     * @summary Sets the data quality metrics for this Amphora.
     * @param {string} id Amphora Id.
     * @param {Quality} quality The data quality metrics.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraQualitySet(id: string, quality: Quality, options?: any): AxiosPromise<Quality>;
    /**
     *
     * @summary Creates an Access Control Rule for all on this Amphora.
     * @param {string} id Amphora Id.
     * @param {AllAccessRule} allAccessRule The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeAccessControlsCreateForAll(id: string, allAccessRule: AllAccessRule, options?: any): AxiosPromise<AllAccessRule>;
    /**
     *
     * @summary Creates an Access Control Rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {OrganisationAccessRule} organisationAccessRule The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeAccessControlsCreateForOrganisation(id: string, organisationAccessRule: OrganisationAccessRule, options?: any): AxiosPromise<UserAccessRule>;
    /**
     *
     * @summary Creates an Access Control rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {UserAccessRule} userAccessRule The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeAccessControlsCreateForUser(id: string, userAccessRule: UserAccessRule, options?: any): AxiosPromise<UserAccessRule>;
    /**
     *
     * @summary Deletes an Access Control on this Amphora.
     * @param {string} id Amphora Id.
     * @param {string} ruleId The Id of the rule to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeAccessControlsDelete(id: string, ruleId: string, options?: any): AxiosPromise<Response>;
    /**
     *
     * @summary Gets the \'for all\' rule, if it exists, else an empty 200.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeAccessControlsGetForAllRule(id: string, options?: any): AxiosPromise<AllAccessRule>;
    /**
     *
     * @summary Gets the list of access rules applied to organisations.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeAccessControlsGetOrganisationRules(id: string, options?: any): AxiosPromise<OrganisationAccessRule[]>;
    /**
     *
     * @summary Gets the list of access rules applied to users.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeAccessControlsGetUserRules(id: string, options?: any): AxiosPromise<UserAccessRule[]>;
    /**
     *
     * @summary Creates a new empty Amphora in the user\'s organisation.
     * @param {CreateAmphora} createAmphora Information for the new Amphora.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeCreate(createAmphora: CreateAmphora, options?: any): AxiosPromise<DetailedAmphora>;
    /**
     *
     * @summary Deletes an Amphora.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeDelete(id: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Creates a file. Returns a blob URL to upload to.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeFilesCreateFileRequest(id: string, file: string, options?: any): AxiosPromise<UploadResponse>;
    /**
     *
     * @summary Gets the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeFilesDeleteFile(id: string, file: string, options?: any): AxiosPromise<Response>;
    /**
     *
     * @summary Gets the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeFilesDownloadFile(id: string, file: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Lists an Amphora\'s files.
     * @param {string} id Amphora Id.
     * @param {string} [orderBy] Gets or sets the the orderBy parameter. Options are Alphabetical or LastModified.
     * @param {string} [prefix] Gets or sets a prefix filter for all file names. Is case sensitive.
     * @param {number} [take] Gets or sets how many files to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many files to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeFilesListFiles(id: string, orderBy?: string, prefix?: string, take?: number, skip?: number, options?: any): AxiosPromise<string[]>;
    /**
     *
     * @summary Queries an Amphora\'s files.
     * @param {string} id Amphora Id.
     * @param {FileQueryOptions} fileQueryOptions Option for querying the files.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeFilesQueryFiles(id: string, fileQueryOptions: FileQueryOptions, options?: any): AxiosPromise<string[]>;
    /**
     *
     * @summary Gets the attributes of a file.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeFilesReadFileAttributes(id: string, file: string, options?: any): AxiosPromise<{
        [key: string]: string;
    }>;
    /**
     *
     * @param {string} id
     * @param {string} file
     * @param {{ [key: string]: string; }} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeFilesWriteFileAttributes(id: string, file: string, requestBody: {
        [key: string]: string;
    }, options?: any): AxiosPromise<{
        [key: string]: string;
    }>;
    /**
     *
     * @summary Gets a list of Amphora for yourself or your org, created or purchased by you (or organisation).
     * @param {string} [scope] \&#39;self\&#39; or \&#39;organisation\&#39;. Defaults to self.
     * @param {string} [accessType] \&#39;created\&#39; or \&#39;purchased\&#39;. Defaults to created.
     * @param {number} [take] Gets or sets how many files to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many files to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeList(scope?: string, accessType?: string, take?: number, skip?: number, options?: any): AxiosPromise<DetailedAmphora[]>;
    /**
     *
     * @summary Gets details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeRead(id: string, options?: any): AxiosPromise<DetailedAmphora>;
    /**
     *
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {CreateSignal} createSignal Signal Details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeSignalsCreateSignal(id: string, createSignal: CreateSignal, options?: any): AxiosPromise<Signal>;
    /**
     *
     * @summary Gets the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} property The name or id of the signal property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeSignalsGetSignal(id: string, property: string, options?: any): AxiosPromise<Signal>;
    /**
     *
     * @summary Gets the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeSignalsGetSignals(id: string, options?: any): AxiosPromise<Signal[]>;
    /**
     *
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {string} signalId Signal Details.
     * @param {UpdateSignal} updateSignal Signal properties to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeSignalsUpdateSignal(id: string, signalId: string, updateSignal: UpdateSignal, options?: any): AxiosPromise<Signal>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeSignalsUploadSignal(id: string, requestBody: {
        [key: string]: object;
    }, options?: any): AxiosPromise<{
        [key: string]: object;
    }>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeSignalsUploadSignal2(id: string, requestBody: {
        [key: string]: object;
    }, options?: any): AxiosPromise<{
        [key: string]: object;
    }>;
    /**
     *
     * @param {string} id
     * @param {Array<{ [key: string]: object; }>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeSignalsUploadSignalBatch(id: string, requestBody: Array<{
        [key: string]: object;
    }>, options?: any): AxiosPromise<{
        [key: string]: object;
    }>;
    /**
     *
     * @param {string} id
     * @param {Array<{ [key: string]: object; }>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeSignalsUploadSignalBatch2(id: string, requestBody: Array<{
        [key: string]: object;
    }>, options?: any): AxiosPromise<{
        [key: string]: object;
    }>;
    /**
     *
     * @summary Updates the details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {EditAmphora} editAmphora Information to update. Nulls are NOT ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeUpdate(id: string, editAmphora: EditAmphora, options?: any): AxiosPromise<DetailedAmphora>;
    /**
     *
     * @summary Purchases an Amphora as the logged in user.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    purchasesPurchase(id: string, options?: any): AxiosPromise<Response>;
}
/**
 * ApplicationsApi - axios parameter creator
 * @export
 */
export declare const ApplicationsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Creates a new application. Applications are external websites that Amphora users can sign in to.
     * @param {CreateApplication} createApplication An application to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsCreateApplication(createApplication: CreateApplication, options?: any): RequestArgs;
    /**
     *
     * @summary Deletes an application. Must be done by an Organisation administrator.
     * @param {string} id The application id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsDeleteApplication(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Gets all applications a user has access to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsGetApplications(options?: any): RequestArgs;
    /**
     *
     * @summary Gets an application by Id, if it exists.
     * @param {string} id The id of the application to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsReadApplication(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Updates an application by Id, if it exists.
     * @param {string} id The id of the application to update.
     * @param {UpdateApplication} updateApplication The information to update (old locations will be deleted).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsUpdateApplication(id: string, updateApplication: UpdateApplication, options?: any): RequestArgs;
};
/**
 * ApplicationsApi - functional programming interface
 * @export
 */
export declare const ApplicationsApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Creates a new application. Applications are external websites that Amphora users can sign in to.
     * @param {CreateApplication} createApplication An application to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsCreateApplication(createApplication: CreateApplication, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Application>;
    /**
     *
     * @summary Deletes an application. Must be done by an Organisation administrator.
     * @param {string} id The application id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsDeleteApplication(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Application>;
    /**
     *
     * @summary Gets all applications a user has access to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsGetApplications(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CollectionResponseOfApplication>;
    /**
     *
     * @summary Gets an application by Id, if it exists.
     * @param {string} id The id of the application to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsReadApplication(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Application>;
    /**
     *
     * @summary Updates an application by Id, if it exists.
     * @param {string} id The id of the application to update.
     * @param {UpdateApplication} updateApplication The information to update (old locations will be deleted).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsUpdateApplication(id: string, updateApplication: UpdateApplication, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Application>;
};
/**
 * ApplicationsApi - factory interface
 * @export
 */
export declare const ApplicationsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Creates a new application. Applications are external websites that Amphora users can sign in to.
     * @param {CreateApplication} createApplication An application to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsCreateApplication(createApplication: CreateApplication, options?: any): AxiosPromise<Application>;
    /**
     *
     * @summary Deletes an application. Must be done by an Organisation administrator.
     * @param {string} id The application id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsDeleteApplication(id: string, options?: any): AxiosPromise<Application>;
    /**
     *
     * @summary Gets all applications a user has access to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsGetApplications(options?: any): AxiosPromise<CollectionResponseOfApplication>;
    /**
     *
     * @summary Gets an application by Id, if it exists.
     * @param {string} id The id of the application to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsReadApplication(id: string, options?: any): AxiosPromise<Application>;
    /**
     *
     * @summary Updates an application by Id, if it exists.
     * @param {string} id The id of the application to update.
     * @param {UpdateApplication} updateApplication The information to update (old locations will be deleted).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsUpdateApplication(id: string, updateApplication: UpdateApplication, options?: any): AxiosPromise<Application>;
};
/**
 * ApplicationsApi - object-oriented interface
 * @export
 * @class ApplicationsApi
 * @extends {BaseAPI}
 */
export declare class ApplicationsApi extends BaseAPI {
    /**
     *
     * @summary Creates a new application. Applications are external websites that Amphora users can sign in to.
     * @param {CreateApplication} createApplication An application to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    applicationsCreateApplication(createApplication: CreateApplication, options?: any): AxiosPromise<Application>;
    /**
     *
     * @summary Deletes an application. Must be done by an Organisation administrator.
     * @param {string} id The application id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    applicationsDeleteApplication(id: string, options?: any): AxiosPromise<Application>;
    /**
     *
     * @summary Gets all applications a user has access to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    applicationsGetApplications(options?: any): AxiosPromise<CollectionResponseOfApplication>;
    /**
     *
     * @summary Gets an application by Id, if it exists.
     * @param {string} id The id of the application to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    applicationsReadApplication(id: string, options?: any): AxiosPromise<Application>;
    /**
     *
     * @summary Updates an application by Id, if it exists.
     * @param {string} id The id of the application to update.
     * @param {UpdateApplication} updateApplication The information to update (old locations will be deleted).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    applicationsUpdateApplication(id: string, updateApplication: UpdateApplication, options?: any): AxiosPromise<Application>;
}
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export declare const AuthenticationApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Returns a JWT (JSON Web Token).
     * @param {LoginRequest} loginRequest Token Request Parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticationRequestToken(loginRequest: LoginRequest, options?: any): RequestArgs;
};
/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export declare const AuthenticationApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Returns a JWT (JSON Web Token).
     * @param {LoginRequest} loginRequest Token Request Parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticationRequestToken(loginRequest: LoginRequest, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
};
/**
 * AuthenticationApi - factory interface
 * @export
 */
export declare const AuthenticationApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Returns a JWT (JSON Web Token).
     * @param {LoginRequest} loginRequest Token Request Parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticationRequestToken(loginRequest: LoginRequest, options?: any): AxiosPromise<string>;
};
/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export declare class AuthenticationApi extends BaseAPI {
    /**
     *
     * @summary Returns a JWT (JSON Web Token).
     * @param {LoginRequest} loginRequest Token Request Parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    authenticationRequestToken(loginRequest: LoginRequest, options?: any): AxiosPromise<string>;
}
/**
 * GeoApi - axios parameter creator
 * @export
 */
export declare const GeoApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Executes a fuzzy location search.
     * @param {string} [query] Search Text.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    geoLookupLocation(query?: string | undefined, options?: any): RequestArgs;
};
/**
 * GeoApi - functional programming interface
 * @export
 */
export declare const GeoApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Executes a fuzzy location search.
     * @param {string} [query] Search Text.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    geoLookupLocation(query?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<FuzzySearchResponse>;
};
/**
 * GeoApi - factory interface
 * @export
 */
export declare const GeoApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Executes a fuzzy location search.
     * @param {string} [query] Search Text.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    geoLookupLocation(query?: string | undefined, options?: any): AxiosPromise<FuzzySearchResponse>;
};
/**
 * GeoApi - object-oriented interface
 * @export
 * @class GeoApi
 * @extends {BaseAPI}
 */
export declare class GeoApi extends BaseAPI {
    /**
     *
     * @summary Executes a fuzzy location search.
     * @param {string} [query] Search Text.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeoApi
     */
    geoLookupLocation(query?: string, options?: any): AxiosPromise<FuzzySearchResponse>;
}
/**
 * IdentityApi - axios parameter creator
 * @export
 */
export declare const IdentityApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identityGet(options?: any): RequestArgs;
};
/**
 * IdentityApi - functional programming interface
 * @export
 */
export declare const IdentityApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identityGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>;
};
/**
 * IdentityApi - factory interface
 * @export
 */
export declare const IdentityApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identityGet(options?: any): AxiosPromise<any>;
};
/**
 * IdentityApi - object-oriented interface
 * @export
 * @class IdentityApi
 * @extends {BaseAPI}
 */
export declare class IdentityApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    identityGet(options?: any): AxiosPromise<any>;
}
/**
 * InvitationsApi - axios parameter creator
 * @export
 */
export declare const InvitationsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Accepts or rejects an invitation sent to the user.
     * @param {string} orgId Organisation to accept invitation for.
     * @param {HandleInvitation} handleInvitation Invitation information to accept or reject.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invitationsAcceptInvitation(orgId: string, handleInvitation: HandleInvitation, options?: any): RequestArgs;
    /**
     *
     * @summary Invite a new email address to Amphora Data.
     * @param {Invitation} invitation Invitation details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invitationsInviteNewUser(invitation: Invitation, options?: any): RequestArgs;
    /**
     *
     * @summary Returns all the invitations sent to me.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invitationsReadMyInvitations(options?: any): RequestArgs;
};
/**
 * InvitationsApi - functional programming interface
 * @export
 */
export declare const InvitationsApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Accepts or rejects an invitation sent to the user.
     * @param {string} orgId Organisation to accept invitation for.
     * @param {HandleInvitation} handleInvitation Invitation information to accept or reject.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invitationsAcceptInvitation(orgId: string, handleInvitation: HandleInvitation, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<HandleInvitation>;
    /**
     *
     * @summary Invite a new email address to Amphora Data.
     * @param {Invitation} invitation Invitation details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invitationsInviteNewUser(invitation: Invitation, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Invitation>;
    /**
     *
     * @summary Returns all the invitations sent to me.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invitationsReadMyInvitations(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Invitation>>;
};
/**
 * InvitationsApi - factory interface
 * @export
 */
export declare const InvitationsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Accepts or rejects an invitation sent to the user.
     * @param {string} orgId Organisation to accept invitation for.
     * @param {HandleInvitation} handleInvitation Invitation information to accept or reject.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invitationsAcceptInvitation(orgId: string, handleInvitation: HandleInvitation, options?: any): AxiosPromise<HandleInvitation>;
    /**
     *
     * @summary Invite a new email address to Amphora Data.
     * @param {Invitation} invitation Invitation details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invitationsInviteNewUser(invitation: Invitation, options?: any): AxiosPromise<Invitation>;
    /**
     *
     * @summary Returns all the invitations sent to me.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invitationsReadMyInvitations(options?: any): AxiosPromise<Invitation[]>;
};
/**
 * InvitationsApi - object-oriented interface
 * @export
 * @class InvitationsApi
 * @extends {BaseAPI}
 */
export declare class InvitationsApi extends BaseAPI {
    /**
     *
     * @summary Accepts or rejects an invitation sent to the user.
     * @param {string} orgId Organisation to accept invitation for.
     * @param {HandleInvitation} handleInvitation Invitation information to accept or reject.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */
    invitationsAcceptInvitation(orgId: string, handleInvitation: HandleInvitation, options?: any): AxiosPromise<HandleInvitation>;
    /**
     *
     * @summary Invite a new email address to Amphora Data.
     * @param {Invitation} invitation Invitation details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */
    invitationsInviteNewUser(invitation: Invitation, options?: any): AxiosPromise<Invitation>;
    /**
     *
     * @summary Returns all the invitations sent to me.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */
    invitationsReadMyInvitations(options?: any): AxiosPromise<Invitation[]>;
}
/**
 * OrganisationsApi - axios parameter creator
 * @export
 */
export declare const OrganisationsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead2(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Creates a new Organisation. This will assign the logged in user to the organisation.
     * @param {Organisation} organisation Information of the new Organisation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsCreate(organisation: Organisation, options?: any): RequestArgs;
    /**
     *
     * @summary Deletes an organisation.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsDelete(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Gets an organisation\'s details.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsRead(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Gets an organisation\'s invitations.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsReadInvitations(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Gets a list of an Organisation\'s Terms of Use.
     * @param {string} id The Id of the Organisation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsTermsOfUseRead(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Updates an organisation.
     * @param {string} id Organisation Id.
     * @param {Organisation} organisation Organisation Information. All fields are updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsUpdate(id: string, organisation: Organisation, options?: any): RequestArgs;
    /**
     *
     * @summary Gets an Organisation\'s plan information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planGetPlan(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Gets an Organisation\'s plan information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planGetPlan2(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Set\'s an Organisation\'s plan.
     * @param {string} id Organisation Id.
     * @param {string} [planType] The Plan Type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planSetPlan(id: string, planType?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Set\'s an Organisation\'s plan.
     * @param {string} id Organisation Id.
     * @param {string} [planType] The Plan Type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planSetPlan2(id: string, planType?: string | undefined, options?: any): RequestArgs;
};
/**
 * OrganisationsApi - functional programming interface
 * @export
 */
export declare const OrganisationsApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Account>;
    /**
     *
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead2(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Account>;
    /**
     *
     * @summary Creates a new Organisation. This will assign the logged in user to the organisation.
     * @param {Organisation} organisation Information of the new Organisation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsCreate(organisation: Organisation, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Organisation>;
    /**
     *
     * @summary Deletes an organisation.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsDelete(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
    /**
     *
     * @summary Gets an organisation\'s details.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsRead(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Organisation>;
    /**
     *
     * @summary Gets an organisation\'s invitations.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsReadInvitations(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Invitation>>;
    /**
     *
     * @summary Gets a list of an Organisation\'s Terms of Use.
     * @param {string} id The Id of the Organisation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsTermsOfUseRead(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<TermsOfUse>>;
    /**
     *
     * @summary Updates an organisation.
     * @param {string} id Organisation Id.
     * @param {Organisation} organisation Organisation Information. All fields are updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsUpdate(id: string, organisation: Organisation, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>;
    /**
     *
     * @summary Gets an Organisation\'s plan information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planGetPlan(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PlanInformation>;
    /**
     *
     * @summary Gets an Organisation\'s plan information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planGetPlan2(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PlanInformation>;
    /**
     *
     * @summary Set\'s an Organisation\'s plan.
     * @param {string} id Organisation Id.
     * @param {string} [planType] The Plan Type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planSetPlan(id: string, planType?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PlanInformation>;
    /**
     *
     * @summary Set\'s an Organisation\'s plan.
     * @param {string} id Organisation Id.
     * @param {string} [planType] The Plan Type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planSetPlan2(id: string, planType?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PlanInformation>;
};
/**
 * OrganisationsApi - factory interface
 * @export
 */
export declare const OrganisationsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead(id: string, options?: any): AxiosPromise<Account>;
    /**
     *
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead2(id: string, options?: any): AxiosPromise<Account>;
    /**
     *
     * @summary Creates a new Organisation. This will assign the logged in user to the organisation.
     * @param {Organisation} organisation Information of the new Organisation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsCreate(organisation: Organisation, options?: any): AxiosPromise<Organisation>;
    /**
     *
     * @summary Deletes an organisation.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsDelete(id: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Gets an organisation\'s details.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsRead(id: string, options?: any): AxiosPromise<Organisation>;
    /**
     *
     * @summary Gets an organisation\'s invitations.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsReadInvitations(id: string, options?: any): AxiosPromise<Invitation[]>;
    /**
     *
     * @summary Gets a list of an Organisation\'s Terms of Use.
     * @param {string} id The Id of the Organisation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsTermsOfUseRead(id: string, options?: any): AxiosPromise<TermsOfUse[]>;
    /**
     *
     * @summary Updates an organisation.
     * @param {string} id Organisation Id.
     * @param {Organisation} organisation Organisation Information. All fields are updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsUpdate(id: string, organisation: Organisation, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Gets an Organisation\'s plan information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planGetPlan(id: string, options?: any): AxiosPromise<PlanInformation>;
    /**
     *
     * @summary Gets an Organisation\'s plan information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planGetPlan2(id: string, options?: any): AxiosPromise<PlanInformation>;
    /**
     *
     * @summary Set\'s an Organisation\'s plan.
     * @param {string} id Organisation Id.
     * @param {string} [planType] The Plan Type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planSetPlan(id: string, planType?: string | undefined, options?: any): AxiosPromise<PlanInformation>;
    /**
     *
     * @summary Set\'s an Organisation\'s plan.
     * @param {string} id Organisation Id.
     * @param {string} [planType] The Plan Type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planSetPlan2(id: string, planType?: string | undefined, options?: any): AxiosPromise<PlanInformation>;
};
/**
 * OrganisationsApi - object-oriented interface
 * @export
 * @class OrganisationsApi
 * @extends {BaseAPI}
 */
export declare class OrganisationsApi extends BaseAPI {
    /**
     *
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    accountRead(id: string, options?: any): AxiosPromise<Account>;
    /**
     *
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    accountRead2(id: string, options?: any): AxiosPromise<Account>;
    /**
     *
     * @summary Creates a new Organisation. This will assign the logged in user to the organisation.
     * @param {Organisation} organisation Information of the new Organisation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    organisationsCreate(organisation: Organisation, options?: any): AxiosPromise<Organisation>;
    /**
     *
     * @summary Deletes an organisation.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    organisationsDelete(id: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Gets an organisation\'s details.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    organisationsRead(id: string, options?: any): AxiosPromise<Organisation>;
    /**
     *
     * @summary Gets an organisation\'s invitations.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    organisationsReadInvitations(id: string, options?: any): AxiosPromise<Invitation[]>;
    /**
     *
     * @summary Gets a list of an Organisation\'s Terms of Use.
     * @param {string} id The Id of the Organisation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    organisationsTermsOfUseRead(id: string, options?: any): AxiosPromise<TermsOfUse[]>;
    /**
     *
     * @summary Updates an organisation.
     * @param {string} id Organisation Id.
     * @param {Organisation} organisation Organisation Information. All fields are updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    organisationsUpdate(id: string, organisation: Organisation, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Gets an Organisation\'s plan information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    planGetPlan(id: string, options?: any): AxiosPromise<PlanInformation>;
    /**
     *
     * @summary Gets an Organisation\'s plan information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    planGetPlan2(id: string, options?: any): AxiosPromise<PlanInformation>;
    /**
     *
     * @summary Set\'s an Organisation\'s plan.
     * @param {string} id Organisation Id.
     * @param {string} [planType] The Plan Type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    planSetPlan(id: string, planType?: string, options?: any): AxiosPromise<PlanInformation>;
    /**
     *
     * @summary Set\'s an Organisation\'s plan.
     * @param {string} id Organisation Id.
     * @param {string} [planType] The Plan Type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    planSetPlan2(id: string, planType?: string, options?: any): AxiosPromise<PlanInformation>;
}
/**
 * PermissionApi - axios parameter creator
 * @export
 */
export declare const PermissionApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary The permission level for each object id in the request.
     * @param {PermissionsRequest} permissionsRequest A request object containing the list of ids to check.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permissionGetPermissions(permissionsRequest: PermissionsRequest, options?: any): RequestArgs;
};
/**
 * PermissionApi - functional programming interface
 * @export
 */
export declare const PermissionApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary The permission level for each object id in the request.
     * @param {PermissionsRequest} permissionsRequest A request object containing the list of ids to check.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permissionGetPermissions(permissionsRequest: PermissionsRequest, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PermissionsResponse>;
};
/**
 * PermissionApi - factory interface
 * @export
 */
export declare const PermissionApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary The permission level for each object id in the request.
     * @param {PermissionsRequest} permissionsRequest A request object containing the list of ids to check.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permissionGetPermissions(permissionsRequest: PermissionsRequest, options?: any): AxiosPromise<PermissionsResponse>;
};
/**
 * PermissionApi - object-oriented interface
 * @export
 * @class PermissionApi
 * @extends {BaseAPI}
 */
export declare class PermissionApi extends BaseAPI {
    /**
     *
     * @summary The permission level for each object id in the request.
     * @param {PermissionsRequest} permissionsRequest A request object containing the list of ids to check.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    permissionGetPermissions(permissionsRequest: PermissionsRequest, options?: any): AxiosPromise<PermissionsResponse>;
}
/**
 * SearchApi - axios parameter creator
 * @export
 */
export declare const SearchApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Searches for Amphorae.
     * @param {string} [term] Gets or sets the free text search term.
     * @param {string} [labels] Gets or sets the comma separated labels that must be included in results.
     * @param {string} [orgId] Gets or sets the Organisation ID for the Amphora.
     * @param {number} [lat] Gets or sets the latitude (center of search area).
     * @param {number} [lon] Gets or sets the longitude (center of search area).
     * @param {number} [dist] Gets or sets the distance from center of search area (describing a circle).
     * @param {number} [take] Gets or sets how many files to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many files to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchAmphorae(term?: string | undefined, labels?: string | undefined, orgId?: string | undefined, lat?: number | undefined, lon?: number | undefined, dist?: number | undefined, take?: number | undefined, skip?: number | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Searches for Organisations with fuzzy search.
     * @param {string} [term] Search Term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchOrganisations(term?: string | undefined, options?: any): RequestArgs;
};
/**
 * SearchApi - functional programming interface
 * @export
 */
export declare const SearchApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Searches for Amphorae.
     * @param {string} [term] Gets or sets the free text search term.
     * @param {string} [labels] Gets or sets the comma separated labels that must be included in results.
     * @param {string} [orgId] Gets or sets the Organisation ID for the Amphora.
     * @param {number} [lat] Gets or sets the latitude (center of search area).
     * @param {number} [lon] Gets or sets the longitude (center of search area).
     * @param {number} [dist] Gets or sets the distance from center of search area (describing a circle).
     * @param {number} [take] Gets or sets how many files to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many files to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchAmphorae(term?: string | undefined, labels?: string | undefined, orgId?: string | undefined, lat?: number | undefined, lon?: number | undefined, dist?: number | undefined, take?: number | undefined, skip?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<BasicAmphora>>;
    /**
     *
     * @summary Searches for Organisations with fuzzy search.
     * @param {string} [term] Search Term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchOrganisations(term?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Organisation>>;
};
/**
 * SearchApi - factory interface
 * @export
 */
export declare const SearchApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Searches for Amphorae.
     * @param {string} [term] Gets or sets the free text search term.
     * @param {string} [labels] Gets or sets the comma separated labels that must be included in results.
     * @param {string} [orgId] Gets or sets the Organisation ID for the Amphora.
     * @param {number} [lat] Gets or sets the latitude (center of search area).
     * @param {number} [lon] Gets or sets the longitude (center of search area).
     * @param {number} [dist] Gets or sets the distance from center of search area (describing a circle).
     * @param {number} [take] Gets or sets how many files to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many files to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchAmphorae(term?: string | undefined, labels?: string | undefined, orgId?: string | undefined, lat?: number | undefined, lon?: number | undefined, dist?: number | undefined, take?: number | undefined, skip?: number | undefined, options?: any): AxiosPromise<BasicAmphora[]>;
    /**
     *
     * @summary Searches for Organisations with fuzzy search.
     * @param {string} [term] Search Term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchOrganisations(term?: string | undefined, options?: any): AxiosPromise<Organisation[]>;
};
/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export declare class SearchApi extends BaseAPI {
    /**
     *
     * @summary Searches for Amphorae.
     * @param {string} [term] Gets or sets the free text search term.
     * @param {string} [labels] Gets or sets the comma separated labels that must be included in results.
     * @param {string} [orgId] Gets or sets the Organisation ID for the Amphora.
     * @param {number} [lat] Gets or sets the latitude (center of search area).
     * @param {number} [lon] Gets or sets the longitude (center of search area).
     * @param {number} [dist] Gets or sets the distance from center of search area (describing a circle).
     * @param {number} [take] Gets or sets how many files to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many files to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    searchSearchAmphorae(term?: string, labels?: string, orgId?: string, lat?: number, lon?: number, dist?: number, take?: number, skip?: number, options?: any): AxiosPromise<BasicAmphora[]>;
    /**
     *
     * @summary Searches for Organisations with fuzzy search.
     * @param {string} [term] Search Term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    searchSearchOrganisations(term?: string, options?: any): AxiosPromise<Organisation[]>;
}
/**
 * TermsOfUseApi - axios parameter creator
 * @export
 */
export declare const TermsOfUseApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Accepts a Terms of Use.
     * @param {string} id The Terms of Use id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseAccept(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Creates a Terms of Use object.
     * @param {CreateTermsOfUse} createTermsOfUse The terms of use to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseCreate(createTermsOfUse: CreateTermsOfUse, options?: any): RequestArgs;
    /**
     *
     * @summary Deletes a Terms of Use object.
     * @param {string} id The terms of use id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseDelete(id: string, options?: any): RequestArgs;
    /**
     *
     * @summary Returns all Terms of Use.
     * @param {number} [take] Gets or sets how many files to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many files to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseList(take?: number | undefined, skip?: number | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Returns all Terms of Use.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseRead(id: string, options?: any): RequestArgs;
};
/**
 * TermsOfUseApi - functional programming interface
 * @export
 */
export declare const TermsOfUseApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Accepts a Terms of Use.
     * @param {string} id The Terms of Use id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseAccept(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @summary Creates a Terms of Use object.
     * @param {CreateTermsOfUse} createTermsOfUse The terms of use to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseCreate(createTermsOfUse: CreateTermsOfUse, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TermsOfUse>;
    /**
     *
     * @summary Deletes a Terms of Use object.
     * @param {string} id The terms of use id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseDelete(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @summary Returns all Terms of Use.
     * @param {number} [take] Gets or sets how many files to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many files to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseList(take?: number | undefined, skip?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<TermsOfUse>>;
    /**
     *
     * @summary Returns all Terms of Use.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseRead(id: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TermsOfUse>;
};
/**
 * TermsOfUseApi - factory interface
 * @export
 */
export declare const TermsOfUseApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Accepts a Terms of Use.
     * @param {string} id The Terms of Use id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseAccept(id: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Creates a Terms of Use object.
     * @param {CreateTermsOfUse} createTermsOfUse The terms of use to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseCreate(createTermsOfUse: CreateTermsOfUse, options?: any): AxiosPromise<TermsOfUse>;
    /**
     *
     * @summary Deletes a Terms of Use object.
     * @param {string} id The terms of use id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseDelete(id: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Returns all Terms of Use.
     * @param {number} [take] Gets or sets how many files to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many files to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseList(take?: number | undefined, skip?: number | undefined, options?: any): AxiosPromise<TermsOfUse[]>;
    /**
     *
     * @summary Returns all Terms of Use.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseRead(id: string, options?: any): AxiosPromise<TermsOfUse>;
};
/**
 * TermsOfUseApi - object-oriented interface
 * @export
 * @class TermsOfUseApi
 * @extends {BaseAPI}
 */
export declare class TermsOfUseApi extends BaseAPI {
    /**
     *
     * @summary Accepts a Terms of Use.
     * @param {string} id The Terms of Use id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsOfUseApi
     */
    termsOfUseAccept(id: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Creates a Terms of Use object.
     * @param {CreateTermsOfUse} createTermsOfUse The terms of use to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsOfUseApi
     */
    termsOfUseCreate(createTermsOfUse: CreateTermsOfUse, options?: any): AxiosPromise<TermsOfUse>;
    /**
     *
     * @summary Deletes a Terms of Use object.
     * @param {string} id The terms of use id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsOfUseApi
     */
    termsOfUseDelete(id: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Returns all Terms of Use.
     * @param {number} [take] Gets or sets how many files to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many files to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsOfUseApi
     */
    termsOfUseList(take?: number, skip?: number, options?: any): AxiosPromise<TermsOfUse[]>;
    /**
     *
     * @summary Returns all Terms of Use.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsOfUseApi
     */
    termsOfUseRead(id: string, options?: any): AxiosPromise<TermsOfUse>;
}
/**
 * TimeSeriesApi - axios parameter creator
 * @export
 */
export declare const TimeSeriesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Updates the details of an Amphora by Id.
     * @param {QueryRequest} queryRequest Time Series query. See https://github.com/microsoft/tsiclient/blob/master/docs/Server.md#functions .
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    timeSeriesQueryTimeSeries(queryRequest: QueryRequest, options?: any): RequestArgs;
};
/**
 * TimeSeriesApi - functional programming interface
 * @export
 */
export declare const TimeSeriesApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Updates the details of an Amphora by Id.
     * @param {QueryRequest} queryRequest Time Series query. See https://github.com/microsoft/tsiclient/blob/master/docs/Server.md#functions .
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    timeSeriesQueryTimeSeries(queryRequest: QueryRequest, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<QueryResultPage>;
};
/**
 * TimeSeriesApi - factory interface
 * @export
 */
export declare const TimeSeriesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Updates the details of an Amphora by Id.
     * @param {QueryRequest} queryRequest Time Series query. See https://github.com/microsoft/tsiclient/blob/master/docs/Server.md#functions .
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    timeSeriesQueryTimeSeries(queryRequest: QueryRequest, options?: any): AxiosPromise<QueryResultPage>;
};
/**
 * TimeSeriesApi - object-oriented interface
 * @export
 * @class TimeSeriesApi
 * @extends {BaseAPI}
 */
export declare class TimeSeriesApi extends BaseAPI {
    /**
     *
     * @summary Updates the details of an Amphora by Id.
     * @param {QueryRequest} queryRequest Time Series query. See https://github.com/microsoft/tsiclient/blob/master/docs/Server.md#functions .
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeSeriesApi
     */
    timeSeriesQueryTimeSeries(queryRequest: QueryRequest, options?: any): AxiosPromise<QueryResultPage>;
}
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Creates a new User. Returns the password.
     * @param {CreateAmphoraUser} createAmphoraUser User parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCreate(createAmphoraUser: CreateAmphoraUser, options?: any): RequestArgs;
    /**
     *
     * @summary Gets logged in users information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersReadSelf(options?: any): RequestArgs;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Creates a new User. Returns the password.
     * @param {CreateAmphoraUser} createAmphoraUser User parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCreate(createAmphoraUser: CreateAmphoraUser, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<AmphoraUser>;
    /**
     *
     * @summary Gets logged in users information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersReadSelf(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<AmphoraUser>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Creates a new User. Returns the password.
     * @param {CreateAmphoraUser} createAmphoraUser User parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCreate(createAmphoraUser: CreateAmphoraUser, options?: any): AxiosPromise<AmphoraUser>;
    /**
     *
     * @summary Gets logged in users information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersReadSelf(options?: any): AxiosPromise<AmphoraUser>;
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     *
     * @summary Creates a new User. Returns the password.
     * @param {CreateAmphoraUser} createAmphoraUser User parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersCreate(createAmphoraUser: CreateAmphoraUser, options?: any): AxiosPromise<AmphoraUser>;
    /**
     *
     * @summary Gets logged in users information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersReadSelf(options?: any): AxiosPromise<AmphoraUser>;
}
/**
 * VersionApi - axios parameter creator
 * @export
 */
export declare const VersionApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Gets the current server version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionGetCurrentVersion(options?: any): RequestArgs;
};
/**
 * VersionApi - functional programming interface
 * @export
 */
export declare const VersionApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Gets the current server version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionGetCurrentVersion(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
};
/**
 * VersionApi - factory interface
 * @export
 */
export declare const VersionApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Gets the current server version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionGetCurrentVersion(options?: any): AxiosPromise<string>;
};
/**
 * VersionApi - object-oriented interface
 * @export
 * @class VersionApi
 * @extends {BaseAPI}
 */
export declare class VersionApi extends BaseAPI {
    /**
     *
     * @summary Gets the current server version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionApi
     */
    versionGetCurrentVersion(options?: any): AxiosPromise<string>;
}
