/**
 * Amphora Data Api
 * API for interacting with the Amphora Data platform.
 *
 * The version of the OpenAPI document: 0.9.8
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface AccessRuleDtoBase
 */
export interface AccessRuleDtoBase {
    /**
     *
     * @type {string}
     * @memberof AccessRuleDtoBase
     */
    id?: string | null;
    /**
     *
     * @type {string}
     * @memberof AccessRuleDtoBase
     */
    allowOrDeny?: string | null;
    /**
     *
     * @type {number}
     * @memberof AccessRuleDtoBase
     */
    priority?: number;
}
/**
 *
 * @export
 * @interface Account
 */
export interface Account {
    /**
     *
     * @type {number}
     * @memberof Account
     */
    balance?: number;
}
/**
 *
 * @export
 * @interface Address
 */
export interface Address {
    /**
     *
     * @type {string}
     * @memberof Address
     */
    streetNumber?: string | null;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    streetName?: string | null;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    municipalitySubdivision?: string | null;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    municipality?: string | null;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    countrySecondarySubdivision?: string | null;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    countrySubdivision?: string | null;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    postalCode?: string | null;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    countryCode?: string | null;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    country?: string | null;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    countryCodeIso3?: string | null;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    freeformAddress?: string | null;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    localName?: string | null;
}
/**
 *
 * @export
 * @interface AggregateSeries
 */
export interface AggregateSeries {
    /**
     *
     * @type {Array<object>}
     * @memberof AggregateSeries
     */
    timeSeriesId?: Array<object> | null;
    /**
     *
     * @type {DateTimeRange}
     * @memberof AggregateSeries
     */
    searchSpan?: DateTimeRange | null;
    /**
     *
     * @type {Tsx}
     * @memberof AggregateSeries
     */
    filter?: Tsx | null;
    /**
     *
     * @type {string}
     * @memberof AggregateSeries
     */
    interval?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof AggregateSeries
     */
    projectedVariables?: Array<string> | null;
    /**
     *
     * @type {{ [key: string]: Variable; }}
     * @memberof AggregateSeries
     */
    inlineVariables?: {
        [key: string]: Variable;
    } | null;
}
/**
 *
 * @export
 * @interface AggregateVariable
 */
export interface AggregateVariable {
    /**
     *
     * @type {Tsx}
     * @memberof AggregateVariable
     */
    filter?: Tsx | null;
    /**
     *
     * @type {string}
     * @memberof AggregateVariable
     */
    kind: string;
    /**
     *
     * @type {Tsx}
     * @memberof AggregateVariable
     */
    aggregation?: Tsx | null;
}
/**
 *
 * @export
 * @interface AmphoraUser
 */
export interface AmphoraUser {
    /**
     *
     * @type {string}
     * @memberof AmphoraUser
     */
    phoneNumber?: string | null;
    /**
     *
     * @type {string}
     * @memberof AmphoraUser
     */
    about?: string | null;
    /**
     *
     * @type {string}
     * @memberof AmphoraUser
     */
    fullName: string;
    /**
     *
     * @type {string}
     * @memberof AmphoraUser
     */
    userName: string;
    /**
     *
     * @type {string}
     * @memberof AmphoraUser
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof AmphoraUser
     */
    email?: string | null;
    /**
     *
     * @type {string}
     * @memberof AmphoraUser
     */
    organisationId?: string | null;
    /**
     *
     * @type {Date}
     * @memberof AmphoraUser
     */
    lastModified?: Date | null;
}
/**
 *
 * @export
 * @interface AmphoraUserAllOf
 */
export interface AmphoraUserAllOf {
    /**
     *
     * @type {string}
     * @memberof AmphoraUserAllOf
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof AmphoraUserAllOf
     */
    email?: string | null;
    /**
     *
     * @type {string}
     * @memberof AmphoraUserAllOf
     */
    organisationId?: string | null;
    /**
     *
     * @type {Date}
     * @memberof AmphoraUserAllOf
     */
    lastModified?: Date | null;
}
/**
 *
 * @export
 * @interface AttributeStore
 */
export interface AttributeStore {
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof AttributeStore
     */
    attributes?: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface BaseAmphoraUser
 */
export interface BaseAmphoraUser {
    /**
     *
     * @type {string}
     * @memberof BaseAmphoraUser
     */
    phoneNumber?: string | null;
    /**
     *
     * @type {string}
     * @memberof BaseAmphoraUser
     */
    about?: string | null;
    /**
     *
     * @type {string}
     * @memberof BaseAmphoraUser
     */
    fullName: string;
    /**
     *
     * @type {string}
     * @memberof BaseAmphoraUser
     */
    userName: string;
}
/**
 *
 * @export
 * @interface BasicAmphora
 */
export interface BasicAmphora {
    /**
     *
     * @type {string}
     * @memberof BasicAmphora
     */
    id?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof BasicAmphora
     */
    isDeleted?: boolean | null;
    /**
     *
     * @type {Date}
     * @memberof BasicAmphora
     */
    createdDate?: Date | null;
    /**
     *
     * @type {string}
     * @memberof BasicAmphora
     */
    name: string;
    /**
     *
     * @type {number}
     * @memberof BasicAmphora
     */
    price: number;
    /**
     *
     * @type {string}
     * @memberof BasicAmphora
     */
    labels?: string | null;
}
/**
 *
 * @export
 * @interface BasicAmphoraAllOf
 */
export interface BasicAmphoraAllOf {
    /**
     *
     * @type {string}
     * @memberof BasicAmphoraAllOf
     */
    name: string;
    /**
     *
     * @type {number}
     * @memberof BasicAmphoraAllOf
     */
    price: number;
    /**
     *
     * @type {string}
     * @memberof BasicAmphoraAllOf
     */
    labels?: string | null;
}
/**
 *
 * @export
 * @interface CategorySet
 */
export interface CategorySet {
    /**
     *
     * @type {number}
     * @memberof CategorySet
     */
    id?: number;
}
/**
 *
 * @export
 * @interface Classification
 */
export interface Classification {
    /**
     *
     * @type {string}
     * @memberof Classification
     */
    code?: string | null;
    /**
     *
     * @type {Array<Name>}
     * @memberof Classification
     */
    names?: Array<Name>;
}
/**
 *
 * @export
 * @interface CreateAmphora
 */
export interface CreateAmphora {
    /**
     *
     * @type {string}
     * @memberof CreateAmphora
     */
    id?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof CreateAmphora
     */
    isDeleted?: boolean | null;
    /**
     *
     * @type {Date}
     * @memberof CreateAmphora
     */
    createdDate?: Date | null;
    /**
     *
     * @type {string}
     * @memberof CreateAmphora
     */
    name: string;
    /**
     *
     * @type {number}
     * @memberof CreateAmphora
     */
    price: number;
    /**
     *
     * @type {string}
     * @memberof CreateAmphora
     */
    labels?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateAmphora
     */
    description: string;
    /**
     *
     * @type {number}
     * @memberof CreateAmphora
     */
    lat?: number | null;
    /**
     *
     * @type {number}
     * @memberof CreateAmphora
     */
    lon?: number | null;
    /**
     *
     * @type {string}
     * @memberof CreateAmphora
     */
    termsAndConditionsId?: string | null;
}
/**
 *
 * @export
 * @interface CreateAmphoraAllOf
 */
export interface CreateAmphoraAllOf {
    /**
     *
     * @type {string}
     * @memberof CreateAmphoraAllOf
     */
    description: string;
    /**
     *
     * @type {number}
     * @memberof CreateAmphoraAllOf
     */
    lat?: number | null;
    /**
     *
     * @type {number}
     * @memberof CreateAmphoraAllOf
     */
    lon?: number | null;
    /**
     *
     * @type {string}
     * @memberof CreateAmphoraAllOf
     */
    termsAndConditionsId?: string | null;
}
/**
 *
 * @export
 * @interface CreateAmphoraUser
 */
export interface CreateAmphoraUser {
    /**
     *
     * @type {string}
     * @memberof CreateAmphoraUser
     */
    phoneNumber?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateAmphoraUser
     */
    about?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateAmphoraUser
     */
    fullName: string;
    /**
     *
     * @type {string}
     * @memberof CreateAmphoraUser
     */
    userName: string;
    /**
     *
     * @type {string}
     * @memberof CreateAmphoraUser
     */
    password: string;
    /**
     *
     * @type {string}
     * @memberof CreateAmphoraUser
     */
    confirmPassword?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateAmphoraUser
     */
    email: string;
}
/**
 *
 * @export
 * @interface CreateAmphoraUserAllOf
 */
export interface CreateAmphoraUserAllOf {
    /**
     *
     * @type {string}
     * @memberof CreateAmphoraUserAllOf
     */
    password: string;
    /**
     *
     * @type {string}
     * @memberof CreateAmphoraUserAllOf
     */
    confirmPassword?: string | null;
    /**
     *
     * @type {string}
     * @memberof CreateAmphoraUserAllOf
     */
    email: string;
}
/**
 *
 * @export
 * @interface DateTimeRange
 */
export interface DateTimeRange {
    /**
     *
     * @type {Date}
     * @memberof DateTimeRange
     */
    from?: Date;
    /**
     *
     * @type {Date}
     * @memberof DateTimeRange
     */
    to?: Date;
}
/**
 *
 * @export
 * @interface DetailedAmphora
 */
export interface DetailedAmphora {
    /**
     *
     * @type {string}
     * @memberof DetailedAmphora
     */
    id?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof DetailedAmphora
     */
    isDeleted?: boolean | null;
    /**
     *
     * @type {Date}
     * @memberof DetailedAmphora
     */
    createdDate?: Date | null;
    /**
     *
     * @type {string}
     * @memberof DetailedAmphora
     */
    name: string;
    /**
     *
     * @type {number}
     * @memberof DetailedAmphora
     */
    price: number;
    /**
     *
     * @type {string}
     * @memberof DetailedAmphora
     */
    labels?: string | null;
    /**
     *
     * @type {string}
     * @memberof DetailedAmphora
     */
    description: string;
    /**
     *
     * @type {number}
     * @memberof DetailedAmphora
     */
    lat?: number | null;
    /**
     *
     * @type {number}
     * @memberof DetailedAmphora
     */
    lon?: number | null;
    /**
     *
     * @type {string}
     * @memberof DetailedAmphora
     */
    termsAndConditionsId?: string | null;
    /**
     *
     * @type {{ [key: string]: AttributeStore; }}
     * @memberof DetailedAmphora
     */
    fileAttributes?: {
        [key: string]: AttributeStore;
    } | null;
    /**
     *
     * @type {string}
     * @memberof DetailedAmphora
     */
    organisationId?: string | null;
    /**
     *
     * @type {number}
     * @memberof DetailedAmphora
     */
    purchaseCount?: number | null;
}
/**
 *
 * @export
 * @interface DetailedAmphoraAllOf
 */
export interface DetailedAmphoraAllOf {
    /**
     *
     * @type {string}
     * @memberof DetailedAmphoraAllOf
     */
    organisationId?: string | null;
    /**
     *
     * @type {number}
     * @memberof DetailedAmphoraAllOf
     */
    purchaseCount?: number | null;
}
/**
 *
 * @export
 * @interface EditAmphora
 */
export interface EditAmphora {
    /**
     *
     * @type {string}
     * @memberof EditAmphora
     */
    id?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof EditAmphora
     */
    isDeleted?: boolean | null;
    /**
     *
     * @type {Date}
     * @memberof EditAmphora
     */
    createdDate?: Date | null;
    /**
     *
     * @type {string}
     * @memberof EditAmphora
     */
    name: string;
    /**
     *
     * @type {number}
     * @memberof EditAmphora
     */
    price: number;
    /**
     *
     * @type {string}
     * @memberof EditAmphora
     */
    labels?: string | null;
    /**
     *
     * @type {string}
     * @memberof EditAmphora
     */
    description: string;
    /**
     *
     * @type {number}
     * @memberof EditAmphora
     */
    lat?: number | null;
    /**
     *
     * @type {number}
     * @memberof EditAmphora
     */
    lon?: number | null;
    /**
     *
     * @type {string}
     * @memberof EditAmphora
     */
    termsAndConditionsId?: string | null;
    /**
     *
     * @type {{ [key: string]: AttributeStore; }}
     * @memberof EditAmphora
     */
    fileAttributes?: {
        [key: string]: AttributeStore;
    } | null;
}
/**
 *
 * @export
 * @interface EditAmphoraAllOf
 */
export interface EditAmphoraAllOf {
    /**
     *
     * @type {string}
     * @memberof EditAmphoraAllOf
     */
    description: string;
    /**
     *
     * @type {number}
     * @memberof EditAmphoraAllOf
     */
    lat?: number | null;
    /**
     *
     * @type {number}
     * @memberof EditAmphoraAllOf
     */
    lon?: number | null;
    /**
     *
     * @type {string}
     * @memberof EditAmphoraAllOf
     */
    termsAndConditionsId?: string | null;
    /**
     *
     * @type {{ [key: string]: AttributeStore; }}
     * @memberof EditAmphoraAllOf
     */
    fileAttributes?: {
        [key: string]: AttributeStore;
    } | null;
}
/**
 *
 * @export
 * @interface Entity
 */
export interface Entity {
    /**
     *
     * @type {string}
     * @memberof Entity
     */
    id?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof Entity
     */
    isDeleted?: boolean | null;
    /**
     *
     * @type {Date}
     * @memberof Entity
     */
    createdDate?: Date | null;
}
/**
 *
 * @export
 * @interface EntryPoint
 */
export interface EntryPoint {
    /**
     *
     * @type {string}
     * @memberof EntryPoint
     */
    type?: string | null;
    /**
     *
     * @type {Position}
     * @memberof EntryPoint
     */
    position?: Position | null;
}
/**
 *
 * @export
 * @interface EventProperty
 */
export interface EventProperty {
    /**
     *
     * @type {string}
     * @memberof EventProperty
     */
    name?: string | null;
    /**
     *
     * @type {string}
     * @memberof EventProperty
     */
    type?: string | null;
}
/**
 *
 * @export
 * @interface FuzzySearchResponse
 */
export interface FuzzySearchResponse {
    /**
     *
     * @type {Summary}
     * @memberof FuzzySearchResponse
     */
    summary?: Summary | null;
    /**
     *
     * @type {Array<Result>}
     * @memberof FuzzySearchResponse
     */
    results?: Array<Result>;
}
/**
 *
 * @export
 * @interface GetEvents
 */
export interface GetEvents {
    /**
     *
     * @type {Array<object>}
     * @memberof GetEvents
     */
    timeSeriesId?: Array<object> | null;
    /**
     *
     * @type {DateTimeRange}
     * @memberof GetEvents
     */
    searchSpan?: DateTimeRange | null;
    /**
     *
     * @type {Tsx}
     * @memberof GetEvents
     */
    filter?: Tsx | null;
    /**
     *
     * @type {Array<string>}
     * @memberof GetEvents
     */
    projectedProperties?: Array<string> | null;
}
/**
 *
 * @export
 * @interface GetSeries
 */
export interface GetSeries {
    /**
     *
     * @type {Array<object>}
     * @memberof GetSeries
     */
    timeSeriesId?: Array<object> | null;
    /**
     *
     * @type {DateTimeRange}
     * @memberof GetSeries
     */
    searchSpan?: DateTimeRange | null;
    /**
     *
     * @type {Tsx}
     * @memberof GetSeries
     */
    filter?: Tsx | null;
    /**
     *
     * @type {Array<string>}
     * @memberof GetSeries
     */
    projectedVariables?: Array<string> | null;
    /**
     *
     * @type {{ [key: string]: Variable; }}
     * @memberof GetSeries
     */
    inlineVariables?: {
        [key: string]: Variable;
    } | null;
}
/**
 *
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     *
     * @type {string}
     * @memberof LoginRequest
     */
    username: string;
    /**
     *
     * @type {string}
     * @memberof LoginRequest
     */
    password: string;
}
/**
 *
 * @export
 * @interface Name
 */
export interface Name {
    /**
     *
     * @type {string}
     * @memberof Name
     */
    nameLocale?: string | null;
    /**
     *
     * @type {string}
     * @memberof Name
     */
    nameName?: string | null;
}
/**
 *
 * @export
 * @interface NumericVariable
 */
export interface NumericVariable {
    /**
     *
     * @type {Tsx}
     * @memberof NumericVariable
     */
    filter?: Tsx | null;
    /**
     *
     * @type {string}
     * @memberof NumericVariable
     */
    kind: string;
    /**
     *
     * @type {Tsx}
     * @memberof NumericVariable
     */
    value?: Tsx | null;
    /**
     *
     * @type {Tsx}
     * @memberof NumericVariable
     */
    aggregation?: Tsx | null;
}
/**
 *
 * @export
 * @interface Organisation
 */
export interface Organisation {
    /**
     *
     * @type {string}
     * @memberof Organisation
     */
    id?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof Organisation
     */
    isDeleted?: boolean | null;
    /**
     *
     * @type {Date}
     * @memberof Organisation
     */
    createdDate?: Date | null;
    /**
     *
     * @type {string}
     * @memberof Organisation
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof Organisation
     */
    about: string;
    /**
     *
     * @type {string}
     * @memberof Organisation
     */
    websiteUrl: string;
    /**
     *
     * @type {string}
     * @memberof Organisation
     */
    address?: string | null;
}
/**
 *
 * @export
 * @interface OrganisationAccessRule
 */
export interface OrganisationAccessRule {
    /**
     *
     * @type {string}
     * @memberof OrganisationAccessRule
     */
    id?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganisationAccessRule
     */
    allowOrDeny?: string | null;
    /**
     *
     * @type {number}
     * @memberof OrganisationAccessRule
     */
    priority?: number;
    /**
     *
     * @type {string}
     * @memberof OrganisationAccessRule
     */
    organisationId: string;
}
/**
 *
 * @export
 * @interface OrganisationAccessRuleAllOf
 */
export interface OrganisationAccessRuleAllOf {
    /**
     *
     * @type {string}
     * @memberof OrganisationAccessRuleAllOf
     */
    organisationId: string;
}
/**
 *
 * @export
 * @interface OrganisationAllOf
 */
export interface OrganisationAllOf {
    /**
     *
     * @type {string}
     * @memberof OrganisationAllOf
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof OrganisationAllOf
     */
    about: string;
    /**
     *
     * @type {string}
     * @memberof OrganisationAllOf
     */
    websiteUrl: string;
    /**
     *
     * @type {string}
     * @memberof OrganisationAllOf
     */
    address?: string | null;
}
/**
 *
 * @export
 * @interface PagedResponse
 */
export interface PagedResponse {
    /**
     *
     * @type {string}
     * @memberof PagedResponse
     */
    continuationToken?: string | null;
}
/**
 *
 * @export
 * @interface PlanInformation
 */
export interface PlanInformation {
    /**
     *
     * @type {PlanTypes}
     * @memberof PlanInformation
     */
    planType?: PlanTypes;
    /**
     *
     * @type {string}
     * @memberof PlanInformation
     */
    friendlyName?: string | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum PlanTypes {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2
}
/**
 *
 * @export
 * @interface Poi
 */
export interface Poi {
    /**
     *
     * @type {string}
     * @memberof Poi
     */
    name?: string | null;
    /**
     *
     * @type {string}
     * @memberof Poi
     */
    phone?: string | null;
    /**
     *
     * @type {Array<CategorySet>}
     * @memberof Poi
     */
    categorySet?: Array<CategorySet>;
    /**
     *
     * @type {Array<string>}
     * @memberof Poi
     */
    categories?: Array<string>;
    /**
     *
     * @type {Array<Classification>}
     * @memberof Poi
     */
    classifications?: Array<Classification>;
}
/**
 *
 * @export
 * @interface Position
 */
export interface Position {
    /**
     *
     * @type {number}
     * @memberof Position
     */
    lat?: number;
    /**
     *
     * @type {number}
     * @memberof Position
     */
    lon?: number;
}
/**
 *
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    /**
     *
     * @type {string}
     * @memberof ProblemDetails
     */
    type?: string | null;
    /**
     *
     * @type {string}
     * @memberof ProblemDetails
     */
    title?: string | null;
    /**
     *
     * @type {number}
     * @memberof ProblemDetails
     */
    status?: number | null;
    /**
     *
     * @type {string}
     * @memberof ProblemDetails
     */
    detail?: string | null;
    /**
     *
     * @type {string}
     * @memberof ProblemDetails
     */
    instance?: string | null;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof ProblemDetails
     */
    extensions?: {
        [key: string]: object;
    } | null;
}
/**
 *
 * @export
 * @interface PropertyValues
 */
export interface PropertyValues {
    /**
     *
     * @type {string}
     * @memberof PropertyValues
     */
    name?: string | null;
    /**
     *
     * @type {string}
     * @memberof PropertyValues
     */
    type?: string | null;
    /**
     *
     * @type {Array<object>}
     * @memberof PropertyValues
     */
    values?: Array<object> | null;
}
/**
 *
 * @export
 * @interface PropertyValuesAllOf
 */
export interface PropertyValuesAllOf {
    /**
     *
     * @type {Array<object>}
     * @memberof PropertyValuesAllOf
     */
    values?: Array<object> | null;
}
/**
 *
 * @export
 * @interface QueryRequest
 */
export interface QueryRequest {
    /**
     *
     * @type {GetEvents}
     * @memberof QueryRequest
     */
    getEvents?: GetEvents | null;
    /**
     *
     * @type {GetSeries}
     * @memberof QueryRequest
     */
    getSeries?: GetSeries | null;
    /**
     *
     * @type {AggregateSeries}
     * @memberof QueryRequest
     */
    aggregateSeries?: AggregateSeries | null;
}
/**
 *
 * @export
 * @interface QueryResultPage
 */
export interface QueryResultPage {
    /**
     *
     * @type {string}
     * @memberof QueryResultPage
     */
    continuationToken?: string | null;
    /**
     *
     * @type {Array<Date>}
     * @memberof QueryResultPage
     */
    timestamps?: Array<Date> | null;
    /**
     *
     * @type {Array<PropertyValues>}
     * @memberof QueryResultPage
     */
    properties?: Array<PropertyValues> | null;
}
/**
 *
 * @export
 * @interface QueryResultPageAllOf
 */
export interface QueryResultPageAllOf {
    /**
     *
     * @type {Array<Date>}
     * @memberof QueryResultPageAllOf
     */
    timestamps?: Array<Date> | null;
    /**
     *
     * @type {Array<PropertyValues>}
     * @memberof QueryResultPageAllOf
     */
    properties?: Array<PropertyValues> | null;
}
/**
 *
 * @export
 * @interface Result
 */
export interface Result {
    /**
     *
     * @type {string}
     * @memberof Result
     */
    type?: string | null;
    /**
     *
     * @type {string}
     * @memberof Result
     */
    id?: string | null;
    /**
     *
     * @type {number}
     * @memberof Result
     */
    score?: number;
    /**
     *
     * @type {Address}
     * @memberof Result
     */
    address?: Address | null;
    /**
     *
     * @type {Position}
     * @memberof Result
     */
    position?: Position | null;
    /**
     *
     * @type {Viewport}
     * @memberof Result
     */
    viewport?: Viewport | null;
    /**
     *
     * @type {Array<EntryPoint>}
     * @memberof Result
     */
    entryPoints?: Array<EntryPoint>;
    /**
     *
     * @type {string}
     * @memberof Result
     */
    info?: string | null;
    /**
     *
     * @type {Poi}
     * @memberof Result
     */
    poi?: Poi | null;
}
/**
 *
 * @export
 * @interface Signal
 */
export interface Signal {
    /**
     *
     * @type {string}
     * @memberof Signal
     */
    id?: string | null;
    /**
     *
     * @type {string}
     * @memberof Signal
     */
    property?: string | null;
    /**
     *
     * @type {string}
     * @memberof Signal
     */
    valueType?: string | null;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof Signal
     */
    attributes?: {
        [key: string]: string;
    } | null;
}
/**
 *
 * @export
 * @interface Summary
 */
export interface Summary {
    /**
     *
     * @type {string}
     * @memberof Summary
     */
    query?: string | null;
    /**
     *
     * @type {string}
     * @memberof Summary
     */
    queryType?: string | null;
    /**
     *
     * @type {number}
     * @memberof Summary
     */
    queryTime?: number;
    /**
     *
     * @type {number}
     * @memberof Summary
     */
    numResults?: number;
    /**
     *
     * @type {number}
     * @memberof Summary
     */
    offset?: number;
    /**
     *
     * @type {number}
     * @memberof Summary
     */
    totalResults?: number;
    /**
     *
     * @type {number}
     * @memberof Summary
     */
    fuzzyLevel?: number;
}
/**
 *
 * @export
 * @interface TermsAndConditions
 */
export interface TermsAndConditions {
    /**
     *
     * @type {string}
     * @memberof TermsAndConditions
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof TermsAndConditions
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof TermsAndConditions
     */
    contents: string;
}
/**
 *
 * @export
 * @interface Tsx
 */
export interface Tsx {
    /**
     *
     * @type {string}
     * @memberof Tsx
     */
    tsx?: string | null;
}
/**
 *
 * @export
 * @interface UpdateSignal
 */
export interface UpdateSignal {
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof UpdateSignal
     */
    meta?: {
        [key: string]: string;
    } | null;
}
/**
 *
 * @export
 * @interface UploadResponse
 */
export interface UploadResponse {
    /**
     *
     * @type {string}
     * @memberof UploadResponse
     */
    url?: string | null;
}
/**
 *
 * @export
 * @interface UserAccessRule
 */
export interface UserAccessRule {
    /**
     *
     * @type {string}
     * @memberof UserAccessRule
     */
    id?: string | null;
    /**
     *
     * @type {string}
     * @memberof UserAccessRule
     */
    allowOrDeny?: string | null;
    /**
     *
     * @type {number}
     * @memberof UserAccessRule
     */
    priority?: number;
    /**
     *
     * @type {string}
     * @memberof UserAccessRule
     */
    username: string;
}
/**
 *
 * @export
 * @interface UserAccessRuleAllOf
 */
export interface UserAccessRuleAllOf {
    /**
     *
     * @type {string}
     * @memberof UserAccessRuleAllOf
     */
    username: string;
}
/**
 *
 * @export
 * @interface Variable
 */
export interface Variable {
    /**
     *
     * @type {Tsx}
     * @memberof Variable
     */
    filter?: Tsx | null;
    /**
     *
     * @type {string}
     * @memberof Variable
     */
    kind: string;
}
/**
 *
 * @export
 * @interface Viewport
 */
export interface Viewport {
    /**
     *
     * @type {Position}
     * @memberof Viewport
     */
    topLeftPoint?: Position | null;
    /**
     *
     * @type {Position}
     * @memberof Viewport
     */
    btmRightPoint?: Position | null;
}
/**
 * AmphoraeApi - axios parameter creator
 * @export
 */
export declare const AmphoraeApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Creates an Access Control Rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {OrganisationAccessRule} organisationAccessRule The rule to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForOrganisation(id: string, organisationAccessRule: OrganisationAccessRule, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Creates an Access Control rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {UserAccessRule} userAccessRule The rule to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForUser(id: string, userAccessRule: UserAccessRule, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Deletes an Access Control on this Amphora.
     * @param {string} id Amphora Id.
     * @param {string} ruleId The Id of the rule to delete.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsDelete(id: string, ruleId: string, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Get\'s the list of access rules applied to organisations.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetOrganisationRules(id: string, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Get\'s the list of access rules applied to users.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetUserRules(id: string, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Creates a new empty Amphora in the user\'s organisation.
     * @param {CreateAmphora} createAmphora Information for the new Amphora.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeCreate(createAmphora: CreateAmphora, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Deletes an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeDelete(id: string, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Creates a file. Returns a blob URL to upload to.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesCreateFileRequest(id: string, file: string, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Get\'s the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesDeleteFile(id: string, file: string, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Get\'s the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesDownloadFile(id: string, file: string, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Get\'s a list of an Amphora\'s files.
     * @param {string} id Amphora Id.
     * @param {string} [orderBy] Can be alphabetical or lastModified.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesListFiles(id: string, orderBy?: string | undefined, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {string} file
     * @param {{ [key: string]: string; }} requestBody
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesWriteFileMetadata(id: string, file: string, requestBody: {
        [key: string]: string;
    }, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Gets a list of Amphora for yourself or your org, created or purchased by you (or organisation).
     * @param {string} [scope] \&#39;self\&#39; or \&#39;organisation\&#39;. Defaults to self.
     * @param {string} [accessType] \&#39;created\&#39; or \&#39;purchased\&#39;. Defaults to created.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeList(scope?: string | undefined, accessType?: string | undefined, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Gets details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeRead(id: string, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {Signal} signal Signal Details.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsCreateSignal(id: string, signal: Signal, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Get\'s the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} property The name or id of the signal property.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsGetSignal(id: string, property: string, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Get\'s the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsGetSignals(id: string, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {string} signalId Signal Details.
     * @param {UpdateSignal} updateSignal Signal properties to update.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUpdateSignal(id: string, signalId: string, updateSignal: UpdateSignal, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} requestBody
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignal(id: string, requestBody: {
        [key: string]: object;
    }, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} requestBody
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignal2(id: string, requestBody: {
        [key: string]: object;
    }, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {Array<{ [key: string]: object; }>} requestBody
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignalBatch(id: string, requestBody: {
        [key: string]: object;
    }[], xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @param {string} id
     * @param {Array<{ [key: string]: object; }>} requestBody
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignalBatch2(id: string, requestBody: {
        [key: string]: object;
    }[], xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Updates the details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {DetailedAmphora} detailedAmphora Information to update. Nulls are NOT ignored.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeUpdate(id: string, detailedAmphora: DetailedAmphora, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Purchases an Amphora as the logged in user.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchasesPurchase(id: string, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
};
/**
 * AmphoraeApi - functional programming interface
 * @export
 */
export declare const AmphoraeApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Creates an Access Control Rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {OrganisationAccessRule} organisationAccessRule The rule to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForOrganisation(id: string, organisationAccessRule: OrganisationAccessRule, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<UserAccessRule>;
    /**
     *
     * @summary Creates an Access Control rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {UserAccessRule} userAccessRule The rule to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForUser(id: string, userAccessRule: UserAccessRule, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<UserAccessRule>;
    /**
     *
     * @summary Deletes an Access Control on this Amphora.
     * @param {string} id Amphora Id.
     * @param {string} ruleId The Id of the rule to delete.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsDelete(id: string, ruleId: string, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>;
    /**
     *
     * @summary Get\'s the list of access rules applied to organisations.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetOrganisationRules(id: string, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<OrganisationAccessRule[]>;
    /**
     *
     * @summary Get\'s the list of access rules applied to users.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetUserRules(id: string, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<UserAccessRule[]>;
    /**
     *
     * @summary Creates a new empty Amphora in the user\'s organisation.
     * @param {CreateAmphora} createAmphora Information for the new Amphora.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeCreate(createAmphora: CreateAmphora, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DetailedAmphora>;
    /**
     *
     * @summary Deletes an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeDelete(id: string, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
    /**
     *
     * @summary Creates a file. Returns a blob URL to upload to.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesCreateFileRequest(id: string, file: string, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<UploadResponse>;
    /**
     *
     * @summary Get\'s the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesDeleteFile(id: string, file: string, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>;
    /**
     *
     * @summary Get\'s the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesDownloadFile(id: string, file: string, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>;
    /**
     *
     * @summary Get\'s a list of an Amphora\'s files.
     * @param {string} id Amphora Id.
     * @param {string} [orderBy] Can be alphabetical or lastModified.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesListFiles(id: string, orderBy?: string | undefined, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string[]>;
    /**
     *
     * @param {string} id
     * @param {string} file
     * @param {{ [key: string]: string; }} requestBody
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesWriteFileMetadata(id: string, file: string, requestBody: {
        [key: string]: string;
    }, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<{
        [key: string]: string;
    }>;
    /**
     *
     * @summary Gets a list of Amphora for yourself or your org, created or purchased by you (or organisation).
     * @param {string} [scope] \&#39;self\&#39; or \&#39;organisation\&#39;. Defaults to self.
     * @param {string} [accessType] \&#39;created\&#39; or \&#39;purchased\&#39;. Defaults to created.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeList(scope?: string | undefined, accessType?: string | undefined, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DetailedAmphora[]>;
    /**
     *
     * @summary Gets details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeRead(id: string, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DetailedAmphora>;
    /**
     *
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {Signal} signal Signal Details.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsCreateSignal(id: string, signal: Signal, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Signal>;
    /**
     *
     * @summary Get\'s the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} property The name or id of the signal property.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsGetSignal(id: string, property: string, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Signal>;
    /**
     *
     * @summary Get\'s the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsGetSignals(id: string, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Signal[]>;
    /**
     *
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {string} signalId Signal Details.
     * @param {UpdateSignal} updateSignal Signal properties to update.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUpdateSignal(id: string, signalId: string, updateSignal: UpdateSignal, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Signal>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} requestBody
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignal(id: string, requestBody: {
        [key: string]: object;
    }, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} requestBody
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignal2(id: string, requestBody: {
        [key: string]: object;
    }, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {Array<{ [key: string]: object; }>} requestBody
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignalBatch(id: string, requestBody: {
        [key: string]: object;
    }[], xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {Array<{ [key: string]: object; }>} requestBody
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignalBatch2(id: string, requestBody: {
        [key: string]: object;
    }[], xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
    /**
     *
     * @summary Updates the details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {DetailedAmphora} detailedAmphora Information to update. Nulls are NOT ignored.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeUpdate(id: string, detailedAmphora: DetailedAmphora, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DetailedAmphora>;
    /**
     *
     * @summary Purchases an Amphora as the logged in user.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchasesPurchase(id: string, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
};
/**
 * AmphoraeApi - factory interface
 * @export
 */
export declare const AmphoraeApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Creates an Access Control Rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {OrganisationAccessRule} organisationAccessRule The rule to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForOrganisation(id: string, organisationAccessRule: OrganisationAccessRule, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<UserAccessRule>;
    /**
     *
     * @summary Creates an Access Control rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {UserAccessRule} userAccessRule The rule to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForUser(id: string, userAccessRule: UserAccessRule, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<UserAccessRule>;
    /**
     *
     * @summary Deletes an Access Control on this Amphora.
     * @param {string} id Amphora Id.
     * @param {string} ruleId The Id of the rule to delete.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsDelete(id: string, ruleId: string, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Get\'s the list of access rules applied to organisations.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetOrganisationRules(id: string, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<OrganisationAccessRule[]>;
    /**
     *
     * @summary Get\'s the list of access rules applied to users.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetUserRules(id: string, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<UserAccessRule[]>;
    /**
     *
     * @summary Creates a new empty Amphora in the user\'s organisation.
     * @param {CreateAmphora} createAmphora Information for the new Amphora.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeCreate(createAmphora: CreateAmphora, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<DetailedAmphora>;
    /**
     *
     * @summary Deletes an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeDelete(id: string, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Creates a file. Returns a blob URL to upload to.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesCreateFileRequest(id: string, file: string, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<UploadResponse>;
    /**
     *
     * @summary Get\'s the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesDeleteFile(id: string, file: string, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Get\'s the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesDownloadFile(id: string, file: string, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Get\'s a list of an Amphora\'s files.
     * @param {string} id Amphora Id.
     * @param {string} [orderBy] Can be alphabetical or lastModified.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesListFiles(id: string, orderBy?: string | undefined, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<string[]>;
    /**
     *
     * @param {string} id
     * @param {string} file
     * @param {{ [key: string]: string; }} requestBody
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesWriteFileMetadata(id: string, file: string, requestBody: {
        [key: string]: string;
    }, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<{
        [key: string]: string;
    }>;
    /**
     *
     * @summary Gets a list of Amphora for yourself or your org, created or purchased by you (or organisation).
     * @param {string} [scope] \&#39;self\&#39; or \&#39;organisation\&#39;. Defaults to self.
     * @param {string} [accessType] \&#39;created\&#39; or \&#39;purchased\&#39;. Defaults to created.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeList(scope?: string | undefined, accessType?: string | undefined, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<DetailedAmphora[]>;
    /**
     *
     * @summary Gets details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeRead(id: string, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<DetailedAmphora>;
    /**
     *
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {Signal} signal Signal Details.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsCreateSignal(id: string, signal: Signal, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<Signal>;
    /**
     *
     * @summary Get\'s the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} property The name or id of the signal property.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsGetSignal(id: string, property: string, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<Signal>;
    /**
     *
     * @summary Get\'s the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsGetSignals(id: string, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<Signal[]>;
    /**
     *
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {string} signalId Signal Details.
     * @param {UpdateSignal} updateSignal Signal properties to update.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUpdateSignal(id: string, signalId: string, updateSignal: UpdateSignal, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<Signal>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} requestBody
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignal(id: string, requestBody: {
        [key: string]: object;
    }, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} requestBody
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignal2(id: string, requestBody: {
        [key: string]: object;
    }, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {Array<{ [key: string]: object; }>} requestBody
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignalBatch(id: string, requestBody: {
        [key: string]: object;
    }[], xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {Array<{ [key: string]: object; }>} requestBody
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignalBatch2(id: string, requestBody: {
        [key: string]: object;
    }[], xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Updates the details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {DetailedAmphora} detailedAmphora Information to update. Nulls are NOT ignored.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeUpdate(id: string, detailedAmphora: DetailedAmphora, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<DetailedAmphora>;
    /**
     *
     * @summary Purchases an Amphora as the logged in user.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchasesPurchase(id: string, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<string>;
};
/**
 * AmphoraeApi - object-oriented interface
 * @export
 * @class AmphoraeApi
 * @extends {BaseAPI}
 */
export declare class AmphoraeApi extends BaseAPI {
    /**
     *
     * @summary Creates an Access Control Rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {OrganisationAccessRule} organisationAccessRule The rule to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeAccessControlsCreateForOrganisation(id: string, organisationAccessRule: OrganisationAccessRule, xAmphoradataVersion?: string, options?: any): AxiosPromise<UserAccessRule>;
    /**
     *
     * @summary Creates an Access Control rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {UserAccessRule} userAccessRule The rule to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeAccessControlsCreateForUser(id: string, userAccessRule: UserAccessRule, xAmphoradataVersion?: string, options?: any): AxiosPromise<UserAccessRule>;
    /**
     *
     * @summary Deletes an Access Control on this Amphora.
     * @param {string} id Amphora Id.
     * @param {string} ruleId The Id of the rule to delete.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeAccessControlsDelete(id: string, ruleId: string, xAmphoradataVersion?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Get\'s the list of access rules applied to organisations.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeAccessControlsGetOrganisationRules(id: string, xAmphoradataVersion?: string, options?: any): AxiosPromise<OrganisationAccessRule[]>;
    /**
     *
     * @summary Get\'s the list of access rules applied to users.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeAccessControlsGetUserRules(id: string, xAmphoradataVersion?: string, options?: any): AxiosPromise<UserAccessRule[]>;
    /**
     *
     * @summary Creates a new empty Amphora in the user\'s organisation.
     * @param {CreateAmphora} createAmphora Information for the new Amphora.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeCreate(createAmphora: CreateAmphora, xAmphoradataVersion?: string, options?: any): AxiosPromise<DetailedAmphora>;
    /**
     *
     * @summary Deletes an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeDelete(id: string, xAmphoradataVersion?: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Creates a file. Returns a blob URL to upload to.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeFilesCreateFileRequest(id: string, file: string, xAmphoradataVersion?: string, options?: any): AxiosPromise<UploadResponse>;
    /**
     *
     * @summary Get\'s the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeFilesDeleteFile(id: string, file: string, xAmphoradataVersion?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Get\'s the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeFilesDownloadFile(id: string, file: string, xAmphoradataVersion?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Get\'s a list of an Amphora\'s files.
     * @param {string} id Amphora Id.
     * @param {string} [orderBy] Can be alphabetical or lastModified.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeFilesListFiles(id: string, orderBy?: string, xAmphoradataVersion?: string, options?: any): AxiosPromise<string[]>;
    /**
     *
     * @param {string} id
     * @param {string} file
     * @param {{ [key: string]: string; }} requestBody
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeFilesWriteFileMetadata(id: string, file: string, requestBody: {
        [key: string]: string;
    }, xAmphoradataVersion?: string, options?: any): AxiosPromise<{
        [key: string]: string;
    }>;
    /**
     *
     * @summary Gets a list of Amphora for yourself or your org, created or purchased by you (or organisation).
     * @param {string} [scope] \&#39;self\&#39; or \&#39;organisation\&#39;. Defaults to self.
     * @param {string} [accessType] \&#39;created\&#39; or \&#39;purchased\&#39;. Defaults to created.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeList(scope?: string, accessType?: string, xAmphoradataVersion?: string, options?: any): AxiosPromise<DetailedAmphora[]>;
    /**
     *
     * @summary Gets details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeRead(id: string, xAmphoradataVersion?: string, options?: any): AxiosPromise<DetailedAmphora>;
    /**
     *
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {Signal} signal Signal Details.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeSignalsCreateSignal(id: string, signal: Signal, xAmphoradataVersion?: string, options?: any): AxiosPromise<Signal>;
    /**
     *
     * @summary Get\'s the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} property The name or id of the signal property.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeSignalsGetSignal(id: string, property: string, xAmphoradataVersion?: string, options?: any): AxiosPromise<Signal>;
    /**
     *
     * @summary Get\'s the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeSignalsGetSignals(id: string, xAmphoradataVersion?: string, options?: any): AxiosPromise<Signal[]>;
    /**
     *
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {string} signalId Signal Details.
     * @param {UpdateSignal} updateSignal Signal properties to update.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeSignalsUpdateSignal(id: string, signalId: string, updateSignal: UpdateSignal, xAmphoradataVersion?: string, options?: any): AxiosPromise<Signal>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} requestBody
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeSignalsUploadSignal(id: string, requestBody: {
        [key: string]: object;
    }, xAmphoradataVersion?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} requestBody
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeSignalsUploadSignal2(id: string, requestBody: {
        [key: string]: object;
    }, xAmphoradataVersion?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {Array<{ [key: string]: object; }>} requestBody
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeSignalsUploadSignalBatch(id: string, requestBody: Array<{
        [key: string]: object;
    }>, xAmphoradataVersion?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {string} id
     * @param {Array<{ [key: string]: object; }>} requestBody
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeSignalsUploadSignalBatch2(id: string, requestBody: Array<{
        [key: string]: object;
    }>, xAmphoradataVersion?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Updates the details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {DetailedAmphora} detailedAmphora Information to update. Nulls are NOT ignored.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    amphoraeUpdate(id: string, detailedAmphora: DetailedAmphora, xAmphoradataVersion?: string, options?: any): AxiosPromise<DetailedAmphora>;
    /**
     *
     * @summary Purchases an Amphora as the logged in user.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    purchasesPurchase(id: string, xAmphoradataVersion?: string, options?: any): AxiosPromise<string>;
}
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export declare const AuthenticationApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Returns a JWT (JSON Web Token).
     * @param {LoginRequest} loginRequest Token Request Parameters.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticationRequestToken(loginRequest: LoginRequest, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
};
/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export declare const AuthenticationApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Returns a JWT (JSON Web Token).
     * @param {LoginRequest} loginRequest Token Request Parameters.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticationRequestToken(loginRequest: LoginRequest, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
};
/**
 * AuthenticationApi - factory interface
 * @export
 */
export declare const AuthenticationApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Returns a JWT (JSON Web Token).
     * @param {LoginRequest} loginRequest Token Request Parameters.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticationRequestToken(loginRequest: LoginRequest, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<string>;
};
/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export declare class AuthenticationApi extends BaseAPI {
    /**
     *
     * @summary Returns a JWT (JSON Web Token).
     * @param {LoginRequest} loginRequest Token Request Parameters.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    authenticationRequestToken(loginRequest: LoginRequest, xAmphoradataVersion?: string, options?: any): AxiosPromise<string>;
}
/**
 * IdentityApi - axios parameter creator
 * @export
 */
export declare const IdentityApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identityGet(xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
};
/**
 * IdentityApi - functional programming interface
 * @export
 */
export declare const IdentityApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identityGet(xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>;
};
/**
 * IdentityApi - factory interface
 * @export
 */
export declare const IdentityApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identityGet(xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<any>;
};
/**
 * IdentityApi - object-oriented interface
 * @export
 * @class IdentityApi
 * @extends {BaseAPI}
 */
export declare class IdentityApi extends BaseAPI {
    /**
     *
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    identityGet(xAmphoradataVersion?: string, options?: any): AxiosPromise<any>;
}
/**
 * MarketApi - axios parameter creator
 * @export
 */
export declare const MarketApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Finds Amphora using a fuzzy search.
     * @param {string} [query] A string as a search term.
     * @param {number} [top] How many results to return.
     * @param {number} [skip] How many pages (in multiples of top) to skip.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketFind(query?: string | undefined, top?: number | undefined, skip?: number | undefined, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Executes a fuzzy location search.
     * @param {string} [query] Search Text.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketLookupLocation(query?: string | undefined, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
};
/**
 * MarketApi - functional programming interface
 * @export
 */
export declare const MarketApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Finds Amphora using a fuzzy search.
     * @param {string} [query] A string as a search term.
     * @param {number} [top] How many results to return.
     * @param {number} [skip] How many pages (in multiples of top) to skip.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketFind(query?: string | undefined, top?: number | undefined, skip?: number | undefined, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<BasicAmphora[]>;
    /**
     *
     * @summary Executes a fuzzy location search.
     * @param {string} [query] Search Text.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketLookupLocation(query?: string | undefined, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<FuzzySearchResponse>;
};
/**
 * MarketApi - factory interface
 * @export
 */
export declare const MarketApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Finds Amphora using a fuzzy search.
     * @param {string} [query] A string as a search term.
     * @param {number} [top] How many results to return.
     * @param {number} [skip] How many pages (in multiples of top) to skip.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketFind(query?: string | undefined, top?: number | undefined, skip?: number | undefined, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<BasicAmphora[]>;
    /**
     *
     * @summary Executes a fuzzy location search.
     * @param {string} [query] Search Text.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketLookupLocation(query?: string | undefined, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<FuzzySearchResponse>;
};
/**
 * MarketApi - object-oriented interface
 * @export
 * @class MarketApi
 * @extends {BaseAPI}
 */
export declare class MarketApi extends BaseAPI {
    /**
     *
     * @summary Finds Amphora using a fuzzy search.
     * @param {string} [query] A string as a search term.
     * @param {number} [top] How many results to return.
     * @param {number} [skip] How many pages (in multiples of top) to skip.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketApi
     */
    marketFind(query?: string, top?: number, skip?: number, xAmphoradataVersion?: string, options?: any): AxiosPromise<BasicAmphora[]>;
    /**
     *
     * @summary Executes a fuzzy location search.
     * @param {string} [query] Search Text.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketApi
     */
    marketLookupLocation(query?: string, xAmphoradataVersion?: string, options?: any): AxiosPromise<FuzzySearchResponse>;
}
/**
 * OrganisationsApi - axios parameter creator
 * @export
 */
export declare const OrganisationsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Get\'s an Organisation\'s plan information.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountGetPlan(id: string, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Get\'s an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead(id: string, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Creates a new Organisation. This will assign the logged in user to the organisation.
     * @param {Organisation} organisation Information of the new Organisation.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsCreate(organisation: Organisation, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Deletes an organisation.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsDelete(id: string, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Gets an organisation\'s details.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsRead(id: string, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Updates an organisation.
     * @param {string} id Organisation Id.
     * @param {Organisation} organisation Organisation Information. All fields are updated.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsUpdate(id: string, organisation: Organisation, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Adds new Terms and Conditions to your Organisations T/C Library.
     * @param {string} id The Id of the Organisation.
     * @param {TermsAndConditions} termsAndConditions The new Terms and Conditions.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsAndConditionsCreate(id: string, termsAndConditions: TermsAndConditions, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Get\'s a list of an Organisation\'s Terms and Conditions.
     * @param {string} id The Id of the Organisation.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsAndConditionsRead(id: string, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
};
/**
 * OrganisationsApi - functional programming interface
 * @export
 */
export declare const OrganisationsApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Get\'s an Organisation\'s plan information.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountGetPlan(id: string, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PlanInformation>;
    /**
     *
     * @summary Get\'s an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead(id: string, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Account>;
    /**
     *
     * @summary Creates a new Organisation. This will assign the logged in user to the organisation.
     * @param {Organisation} organisation Information of the new Organisation.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsCreate(organisation: Organisation, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Organisation>;
    /**
     *
     * @summary Deletes an organisation.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsDelete(id: string, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
    /**
     *
     * @summary Gets an organisation\'s details.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsRead(id: string, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Organisation>;
    /**
     *
     * @summary Updates an organisation.
     * @param {string} id Organisation Id.
     * @param {Organisation} organisation Organisation Information. All fields are updated.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsUpdate(id: string, organisation: Organisation, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>;
    /**
     *
     * @summary Adds new Terms and Conditions to your Organisations T/C Library.
     * @param {string} id The Id of the Organisation.
     * @param {TermsAndConditions} termsAndConditions The new Terms and Conditions.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsAndConditionsCreate(id: string, termsAndConditions: TermsAndConditions, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TermsAndConditions>;
    /**
     *
     * @summary Get\'s a list of an Organisation\'s Terms and Conditions.
     * @param {string} id The Id of the Organisation.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsAndConditionsRead(id: string, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TermsAndConditions[]>;
};
/**
 * OrganisationsApi - factory interface
 * @export
 */
export declare const OrganisationsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Get\'s an Organisation\'s plan information.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountGetPlan(id: string, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<PlanInformation>;
    /**
     *
     * @summary Get\'s an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead(id: string, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<Account>;
    /**
     *
     * @summary Creates a new Organisation. This will assign the logged in user to the organisation.
     * @param {Organisation} organisation Information of the new Organisation.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsCreate(organisation: Organisation, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<Organisation>;
    /**
     *
     * @summary Deletes an organisation.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsDelete(id: string, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Gets an organisation\'s details.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsRead(id: string, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<Organisation>;
    /**
     *
     * @summary Updates an organisation.
     * @param {string} id Organisation Id.
     * @param {Organisation} organisation Organisation Information. All fields are updated.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsUpdate(id: string, organisation: Organisation, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Adds new Terms and Conditions to your Organisations T/C Library.
     * @param {string} id The Id of the Organisation.
     * @param {TermsAndConditions} termsAndConditions The new Terms and Conditions.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsAndConditionsCreate(id: string, termsAndConditions: TermsAndConditions, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<TermsAndConditions>;
    /**
     *
     * @summary Get\'s a list of an Organisation\'s Terms and Conditions.
     * @param {string} id The Id of the Organisation.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsAndConditionsRead(id: string, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<TermsAndConditions[]>;
};
/**
 * OrganisationsApi - object-oriented interface
 * @export
 * @class OrganisationsApi
 * @extends {BaseAPI}
 */
export declare class OrganisationsApi extends BaseAPI {
    /**
     *
     * @summary Get\'s an Organisation\'s plan information.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    accountGetPlan(id: string, xAmphoradataVersion?: string, options?: any): AxiosPromise<PlanInformation>;
    /**
     *
     * @summary Get\'s an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    accountRead(id: string, xAmphoradataVersion?: string, options?: any): AxiosPromise<Account>;
    /**
     *
     * @summary Creates a new Organisation. This will assign the logged in user to the organisation.
     * @param {Organisation} organisation Information of the new Organisation.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    organisationsCreate(organisation: Organisation, xAmphoradataVersion?: string, options?: any): AxiosPromise<Organisation>;
    /**
     *
     * @summary Deletes an organisation.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    organisationsDelete(id: string, xAmphoradataVersion?: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Gets an organisation\'s details.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    organisationsRead(id: string, xAmphoradataVersion?: string, options?: any): AxiosPromise<Organisation>;
    /**
     *
     * @summary Updates an organisation.
     * @param {string} id Organisation Id.
     * @param {Organisation} organisation Organisation Information. All fields are updated.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    organisationsUpdate(id: string, organisation: Organisation, xAmphoradataVersion?: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Adds new Terms and Conditions to your Organisations T/C Library.
     * @param {string} id The Id of the Organisation.
     * @param {TermsAndConditions} termsAndConditions The new Terms and Conditions.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    termsAndConditionsCreate(id: string, termsAndConditions: TermsAndConditions, xAmphoradataVersion?: string, options?: any): AxiosPromise<TermsAndConditions>;
    /**
     *
     * @summary Get\'s a list of an Organisation\'s Terms and Conditions.
     * @param {string} id The Id of the Organisation.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    termsAndConditionsRead(id: string, xAmphoradataVersion?: string, options?: any): AxiosPromise<TermsAndConditions[]>;
}
/**
 * SearchApi - axios parameter creator
 * @export
 */
export declare const SearchApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Searches for Amphorae by loction.
     * @param {number} [lat] Latitude.
     * @param {number} [lon] Longitude.
     * @param {number} [dist] Distance from Latitude and Longitude in which to search.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchAmphoraeByLocation(lat?: number | undefined, lon?: number | undefined, dist?: number | undefined, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Searches for Amphorae in an Organisation.
     * @param {string} [orgId] Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchAmphoraeByOrganisation(orgId?: string | undefined, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Searches for Organisations with fuzzy search.
     * @param {string} [term] Search Term.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchOrganisations(term?: string | undefined, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
};
/**
 * SearchApi - functional programming interface
 * @export
 */
export declare const SearchApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Searches for Amphorae by loction.
     * @param {number} [lat] Latitude.
     * @param {number} [lon] Longitude.
     * @param {number} [dist] Distance from Latitude and Longitude in which to search.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchAmphoraeByLocation(lat?: number | undefined, lon?: number | undefined, dist?: number | undefined, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<BasicAmphora[]>;
    /**
     *
     * @summary Searches for Amphorae in an Organisation.
     * @param {string} [orgId] Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchAmphoraeByOrganisation(orgId?: string | undefined, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<BasicAmphora[]>;
    /**
     *
     * @summary Searches for Organisations with fuzzy search.
     * @param {string} [term] Search Term.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchOrganisations(term?: string | undefined, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Organisation[]>;
};
/**
 * SearchApi - factory interface
 * @export
 */
export declare const SearchApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Searches for Amphorae by loction.
     * @param {number} [lat] Latitude.
     * @param {number} [lon] Longitude.
     * @param {number} [dist] Distance from Latitude and Longitude in which to search.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchAmphoraeByLocation(lat?: number | undefined, lon?: number | undefined, dist?: number | undefined, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<BasicAmphora[]>;
    /**
     *
     * @summary Searches for Amphorae in an Organisation.
     * @param {string} [orgId] Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchAmphoraeByOrganisation(orgId?: string | undefined, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<BasicAmphora[]>;
    /**
     *
     * @summary Searches for Organisations with fuzzy search.
     * @param {string} [term] Search Term.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchOrganisations(term?: string | undefined, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<Organisation[]>;
};
/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export declare class SearchApi extends BaseAPI {
    /**
     *
     * @summary Searches for Amphorae by loction.
     * @param {number} [lat] Latitude.
     * @param {number} [lon] Longitude.
     * @param {number} [dist] Distance from Latitude and Longitude in which to search.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    searchSearchAmphoraeByLocation(lat?: number, lon?: number, dist?: number, xAmphoradataVersion?: string, options?: any): AxiosPromise<BasicAmphora[]>;
    /**
     *
     * @summary Searches for Amphorae in an Organisation.
     * @param {string} [orgId] Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    searchSearchAmphoraeByOrganisation(orgId?: string, xAmphoradataVersion?: string, options?: any): AxiosPromise<BasicAmphora[]>;
    /**
     *
     * @summary Searches for Organisations with fuzzy search.
     * @param {string} [term] Search Term.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    searchSearchOrganisations(term?: string, xAmphoradataVersion?: string, options?: any): AxiosPromise<Organisation[]>;
}
/**
 * TimeSeriesApi - axios parameter creator
 * @export
 */
export declare const TimeSeriesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Updates the details of an Amphora by Id.
     * @param {QueryRequest} queryRequest Time Series query. See https://github.com/microsoft/tsiclient/blob/master/docs/Server.md#functions .
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    timeSeriesQueryTimeSeries(queryRequest: QueryRequest, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
};
/**
 * TimeSeriesApi - functional programming interface
 * @export
 */
export declare const TimeSeriesApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Updates the details of an Amphora by Id.
     * @param {QueryRequest} queryRequest Time Series query. See https://github.com/microsoft/tsiclient/blob/master/docs/Server.md#functions .
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    timeSeriesQueryTimeSeries(queryRequest: QueryRequest, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<QueryResultPage>;
};
/**
 * TimeSeriesApi - factory interface
 * @export
 */
export declare const TimeSeriesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Updates the details of an Amphora by Id.
     * @param {QueryRequest} queryRequest Time Series query. See https://github.com/microsoft/tsiclient/blob/master/docs/Server.md#functions .
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    timeSeriesQueryTimeSeries(queryRequest: QueryRequest, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<QueryResultPage>;
};
/**
 * TimeSeriesApi - object-oriented interface
 * @export
 * @class TimeSeriesApi
 * @extends {BaseAPI}
 */
export declare class TimeSeriesApi extends BaseAPI {
    /**
     *
     * @summary Updates the details of an Amphora by Id.
     * @param {QueryRequest} queryRequest Time Series query. See https://github.com/microsoft/tsiclient/blob/master/docs/Server.md#functions .
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeSeriesApi
     */
    timeSeriesQueryTimeSeries(queryRequest: QueryRequest, xAmphoradataVersion?: string, options?: any): AxiosPromise<QueryResultPage>;
}
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Creates a new User. Returns the password.
     * @param {CreateAmphoraUser} createAmphoraUser User parameters.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCreate(createAmphoraUser: CreateAmphoraUser, xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Get\'s logged in users information.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersReadSelf(xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Creates a new User. Returns the password.
     * @param {CreateAmphoraUser} createAmphoraUser User parameters.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCreate(createAmphoraUser: CreateAmphoraUser, xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<AmphoraUser>;
    /**
     *
     * @summary Get\'s logged in users information.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersReadSelf(xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<AmphoraUser>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Creates a new User. Returns the password.
     * @param {CreateAmphoraUser} createAmphoraUser User parameters.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCreate(createAmphoraUser: CreateAmphoraUser, xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<AmphoraUser>;
    /**
     *
     * @summary Get\'s logged in users information.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersReadSelf(xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<AmphoraUser>;
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     *
     * @summary Creates a new User. Returns the password.
     * @param {CreateAmphoraUser} createAmphoraUser User parameters.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersCreate(createAmphoraUser: CreateAmphoraUser, xAmphoradataVersion?: string, options?: any): AxiosPromise<AmphoraUser>;
    /**
     *
     * @summary Get\'s logged in users information.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersReadSelf(xAmphoradataVersion?: string, options?: any): AxiosPromise<AmphoraUser>;
}
/**
 * VersionApi - axios parameter creator
 * @export
 */
export declare const VersionApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Get\'s the current server version.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionGetCurrentVersion(xAmphoradataVersion?: string | undefined, options?: any): RequestArgs;
};
/**
 * VersionApi - functional programming interface
 * @export
 */
export declare const VersionApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Get\'s the current server version.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionGetCurrentVersion(xAmphoradataVersion?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
};
/**
 * VersionApi - factory interface
 * @export
 */
export declare const VersionApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Get\'s the current server version.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionGetCurrentVersion(xAmphoradataVersion?: string | undefined, options?: any): AxiosPromise<string>;
};
/**
 * VersionApi - object-oriented interface
 * @export
 * @class VersionApi
 * @extends {BaseAPI}
 */
export declare class VersionApi extends BaseAPI {
    /**
     *
     * @summary Get\'s the current server version.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionApi
     */
    versionGetCurrentVersion(xAmphoradataVersion?: string, options?: any): AxiosPromise<string>;
}
