"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VersionApi = exports.VersionApiFactory = exports.VersionApiFp = exports.VersionApiAxiosParamCreator = exports.UsersApi = exports.UsersApiFactory = exports.UsersApiFp = exports.UsersApiAxiosParamCreator = exports.TimeSeriesApi = exports.TimeSeriesApiFactory = exports.TimeSeriesApiFp = exports.TimeSeriesApiAxiosParamCreator = exports.TermsOfUseApi = exports.TermsOfUseApiFactory = exports.TermsOfUseApiFp = exports.TermsOfUseApiAxiosParamCreator = exports.SearchApi = exports.SearchApiFactory = exports.SearchApiFp = exports.SearchApiAxiosParamCreator = exports.PermissionApi = exports.PermissionApiFactory = exports.PermissionApiFp = exports.PermissionApiAxiosParamCreator = exports.OrganisationsApi = exports.OrganisationsApiFactory = exports.OrganisationsApiFp = exports.OrganisationsApiAxiosParamCreator = exports.InvitationsApi = exports.InvitationsApiFactory = exports.InvitationsApiFp = exports.InvitationsApiAxiosParamCreator = exports.IdentityApi = exports.IdentityApiFactory = exports.IdentityApiFp = exports.IdentityApiAxiosParamCreator = exports.GeoApi = exports.GeoApiFactory = exports.GeoApiFp = exports.GeoApiAxiosParamCreator = exports.FeedsApi = exports.FeedsApiFactory = exports.FeedsApiFp = exports.FeedsApiAxiosParamCreator = exports.AuthenticationApi = exports.AuthenticationApiFactory = exports.AuthenticationApiFp = exports.AuthenticationApiAxiosParamCreator = exports.ApplicationsApi = exports.ApplicationsApiFactory = exports.ApplicationsApiFp = exports.ApplicationsApiAxiosParamCreator = exports.AmphoraeApi = exports.AmphoraeApiFactory = exports.AmphoraeApiFp = exports.AmphoraeApiAxiosParamCreator = exports.ActivitiesApi = exports.ActivitiesApiFactory = exports.ActivitiesApiFp = exports.ActivitiesApiAxiosParamCreator = exports.AccountApi = exports.AccountApiFactory = exports.AccountApiFp = exports.AccountApiAxiosParamCreator = exports.PostSubjectType = exports.PostEventType = exports.PlanTypes = void 0;

var globalImportUrl = _interopRequireWildcard(require("url"));

var _axios = _interopRequireDefault(require("axios"));

var _base = require("./base");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * 
 * @export
 * @enum {string}
 */
var PlanTypes;
/**
 * 
 * @export
 * @interface Position
 */

exports.PlanTypes = PlanTypes;

(function (PlanTypes) {
  PlanTypes[PlanTypes["NUMBER_0"] = 0] = "NUMBER_0";
  PlanTypes[PlanTypes["NUMBER_1"] = 1] = "NUMBER_1";
  PlanTypes[PlanTypes["NUMBER_2"] = 2] = "NUMBER_2";
  PlanTypes[PlanTypes["NUMBER_3"] = 3] = "NUMBER_3";
  PlanTypes[PlanTypes["NUMBER_4"] = 4] = "NUMBER_4";
})(PlanTypes || (exports.PlanTypes = PlanTypes = {}));

/**
 * 
 * @export
 * @enum {string}
 */
var PostEventType;
/**
 * 
 * @export
 * @enum {string}
 */

exports.PostEventType = PostEventType;

(function (PostEventType) {
  PostEventType["Created"] = "Created";
  PostEventType["Purchased"] = "Purchased";
  PostEventType["Sold"] = "Sold";
})(PostEventType || (exports.PostEventType = PostEventType = {}));

var PostSubjectType;
/**
 * 
 * @export
 * @interface ProblemDetails
 */

exports.PostSubjectType = PostSubjectType;

(function (PostSubjectType) {
  PostSubjectType["Amphora"] = "Amphora";
})(PostSubjectType || (exports.PostSubjectType = PostSubjectType = {}));

/**
 * AccountApi - axios parameter creator
 * @export
 */
var AccountApiAxiosParamCreator = function AccountApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary Gets a list of invitations to the organisation.
     * @param {string} [id] The organisation id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountInvitationsInvitations: function accountInvitationsInvitations(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var localVarPath = "/api/Account/Invitations";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (id !== undefined) {
        localVarQueryParameter['id'] = id;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead: function accountRead(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling accountRead.');
      }

      var localVarPath = "/api/Organisations/{id}/Account".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead2: function accountRead2(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling accountRead2.');
      }

      var localVarPath = "/api/Account".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Creates a new invoice. Restricted to global administrators.
     * @param {CreateInvoice} createInvoice The organisation for which to create the invoice.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invoicesCreateInvoice: function invoicesCreateInvoice(createInvoice) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'createInvoice' is not null or undefined
      if (createInvoice === null || createInvoice === undefined) {
        throw new _base.RequiredError('createInvoice', 'Required parameter createInvoice was null or undefined when calling invoicesCreateInvoice.');
      }

      var localVarPath = "/api/account/invoices";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof createInvoice !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(createInvoice !== undefined ? createInvoice : {}) : createInvoice || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Downloads an invoice in a specified format.
     * @param {string} id Invoice Id.
     * @param {string} [format] Only csv is supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invoicesDownloadInvoice: function invoicesDownloadInvoice(id, format) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling invoicesDownloadInvoice.');
      }

      var localVarPath = "/api/account/invoices/{id}/download".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (format !== undefined) {
        localVarQueryParameter['format'] = format;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Returns a list of invoices as items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invoicesGetInvoices: function invoicesGetInvoices() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var localVarPath = "/api/account/invoices";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Returns a collection of members of an organisational account.
     * @param {string} [id] Organisation Id. Defaults to your org.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    membershipGetMemberships: function membershipGetMemberships(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var localVarPath = "/api/account/memberships";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (id !== undefined) {
        localVarQueryParameter['id'] = id;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets an Organisation\'s plan information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planGetPlan: function planGetPlan() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var localVarPath = "/api/Account/Plan";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Set\'s an Organisation\'s plan.
     * @param {string} [planType] The Plan Type. Should be PAYG or Glaze.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planSetPlan: function planSetPlan(planType) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var localVarPath = "/api/Account/Plan";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (planType !== undefined) {
        localVarQueryParameter['planType'] = planType;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets the most recent transactions of the account. Defaults to the first 50 debits and 50 credits.
     * @param {string} [id] Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsGetTransactions: function transactionsGetTransactions(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var localVarPath = "/api/Account/Transactions";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (id !== undefined) {
        localVarQueryParameter['id'] = id;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * AccountApi - functional programming interface
 * @export
 */


exports.AccountApiAxiosParamCreator = AccountApiAxiosParamCreator;

var AccountApiFp = function AccountApiFp(configuration) {
  return {
    /**
     * 
     * @summary Gets a list of invitations to the organisation.
     * @param {string} [id] The organisation id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountInvitationsInvitations: function accountInvitationsInvitations(id, options) {
      var localVarAxiosArgs = AccountApiAxiosParamCreator(configuration).accountInvitationsInvitations(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead: function accountRead(id, options) {
      var localVarAxiosArgs = AccountApiAxiosParamCreator(configuration).accountRead(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead2: function accountRead2(id, options) {
      var localVarAxiosArgs = AccountApiAxiosParamCreator(configuration).accountRead2(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Creates a new invoice. Restricted to global administrators.
     * @param {CreateInvoice} createInvoice The organisation for which to create the invoice.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invoicesCreateInvoice: function invoicesCreateInvoice(createInvoice, options) {
      var localVarAxiosArgs = AccountApiAxiosParamCreator(configuration).invoicesCreateInvoice(createInvoice, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Downloads an invoice in a specified format.
     * @param {string} id Invoice Id.
     * @param {string} [format] Only csv is supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invoicesDownloadInvoice: function invoicesDownloadInvoice(id, format, options) {
      var localVarAxiosArgs = AccountApiAxiosParamCreator(configuration).invoicesDownloadInvoice(id, format, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Returns a list of invoices as items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invoicesGetInvoices: function invoicesGetInvoices(options) {
      var localVarAxiosArgs = AccountApiAxiosParamCreator(configuration).invoicesGetInvoices(options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Returns a collection of members of an organisational account.
     * @param {string} [id] Organisation Id. Defaults to your org.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    membershipGetMemberships: function membershipGetMemberships(id, options) {
      var localVarAxiosArgs = AccountApiAxiosParamCreator(configuration).membershipGetMemberships(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets an Organisation\'s plan information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planGetPlan: function planGetPlan(options) {
      var localVarAxiosArgs = AccountApiAxiosParamCreator(configuration).planGetPlan(options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Set\'s an Organisation\'s plan.
     * @param {string} [planType] The Plan Type. Should be PAYG or Glaze.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planSetPlan: function planSetPlan(planType, options) {
      var localVarAxiosArgs = AccountApiAxiosParamCreator(configuration).planSetPlan(planType, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets the most recent transactions of the account. Defaults to the first 50 debits and 50 credits.
     * @param {string} [id] Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsGetTransactions: function transactionsGetTransactions(id, options) {
      var localVarAxiosArgs = AccountApiAxiosParamCreator(configuration).transactionsGetTransactions(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * AccountApi - factory interface
 * @export
 */


exports.AccountApiFp = AccountApiFp;

var AccountApiFactory = function AccountApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary Gets a list of invitations to the organisation.
     * @param {string} [id] The organisation id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountInvitationsInvitations: function accountInvitationsInvitations(id, options) {
      return AccountApiFp(configuration).accountInvitationsInvitations(id, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead: function accountRead(id, options) {
      return AccountApiFp(configuration).accountRead(id, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead2: function accountRead2(id, options) {
      return AccountApiFp(configuration).accountRead2(id, options)(axios, basePath);
    },

    /**
     * 
     * @summary Creates a new invoice. Restricted to global administrators.
     * @param {CreateInvoice} createInvoice The organisation for which to create the invoice.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invoicesCreateInvoice: function invoicesCreateInvoice(createInvoice, options) {
      return AccountApiFp(configuration).invoicesCreateInvoice(createInvoice, options)(axios, basePath);
    },

    /**
     * 
     * @summary Downloads an invoice in a specified format.
     * @param {string} id Invoice Id.
     * @param {string} [format] Only csv is supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invoicesDownloadInvoice: function invoicesDownloadInvoice(id, format, options) {
      return AccountApiFp(configuration).invoicesDownloadInvoice(id, format, options)(axios, basePath);
    },

    /**
     * 
     * @summary Returns a list of invoices as items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invoicesGetInvoices: function invoicesGetInvoices(options) {
      return AccountApiFp(configuration).invoicesGetInvoices(options)(axios, basePath);
    },

    /**
     * 
     * @summary Returns a collection of members of an organisational account.
     * @param {string} [id] Organisation Id. Defaults to your org.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    membershipGetMemberships: function membershipGetMemberships(id, options) {
      return AccountApiFp(configuration).membershipGetMemberships(id, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets an Organisation\'s plan information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planGetPlan: function planGetPlan(options) {
      return AccountApiFp(configuration).planGetPlan(options)(axios, basePath);
    },

    /**
     * 
     * @summary Set\'s an Organisation\'s plan.
     * @param {string} [planType] The Plan Type. Should be PAYG or Glaze.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planSetPlan: function planSetPlan(planType, options) {
      return AccountApiFp(configuration).planSetPlan(planType, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets the most recent transactions of the account. Defaults to the first 50 debits and 50 credits.
     * @param {string} [id] Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transactionsGetTransactions: function transactionsGetTransactions(id, options) {
      return AccountApiFp(configuration).transactionsGetTransactions(id, options)(axios, basePath);
    }
  };
};
/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */


exports.AccountApiFactory = AccountApiFactory;

var AccountApi = /*#__PURE__*/function (_BaseAPI) {
  _inherits(AccountApi, _BaseAPI);

  var _super = _createSuper(AccountApi);

  function AccountApi() {
    _classCallCheck(this, AccountApi);

    return _super.apply(this, arguments);
  }

  _createClass(AccountApi, [{
    key: "accountInvitationsInvitations",

    /**
     * 
     * @summary Gets a list of invitations to the organisation.
     * @param {string} [id] The organisation id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    value: function accountInvitationsInvitations(id, options) {
      return AccountApiFp(this.configuration).accountInvitationsInvitations(id, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */

  }, {
    key: "accountRead",
    value: function accountRead(id, options) {
      return AccountApiFp(this.configuration).accountRead(id, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */

  }, {
    key: "accountRead2",
    value: function accountRead2(id, options) {
      return AccountApiFp(this.configuration).accountRead2(id, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Creates a new invoice. Restricted to global administrators.
     * @param {CreateInvoice} createInvoice The organisation for which to create the invoice.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */

  }, {
    key: "invoicesCreateInvoice",
    value: function invoicesCreateInvoice(createInvoice, options) {
      return AccountApiFp(this.configuration).invoicesCreateInvoice(createInvoice, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Downloads an invoice in a specified format.
     * @param {string} id Invoice Id.
     * @param {string} [format] Only csv is supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */

  }, {
    key: "invoicesDownloadInvoice",
    value: function invoicesDownloadInvoice(id, format, options) {
      return AccountApiFp(this.configuration).invoicesDownloadInvoice(id, format, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Returns a list of invoices as items.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */

  }, {
    key: "invoicesGetInvoices",
    value: function invoicesGetInvoices(options) {
      return AccountApiFp(this.configuration).invoicesGetInvoices(options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Returns a collection of members of an organisational account.
     * @param {string} [id] Organisation Id. Defaults to your org.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */

  }, {
    key: "membershipGetMemberships",
    value: function membershipGetMemberships(id, options) {
      return AccountApiFp(this.configuration).membershipGetMemberships(id, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets an Organisation\'s plan information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */

  }, {
    key: "planGetPlan",
    value: function planGetPlan(options) {
      return AccountApiFp(this.configuration).planGetPlan(options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Set\'s an Organisation\'s plan.
     * @param {string} [planType] The Plan Type. Should be PAYG or Glaze.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */

  }, {
    key: "planSetPlan",
    value: function planSetPlan(planType, options) {
      return AccountApiFp(this.configuration).planSetPlan(planType, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets the most recent transactions of the account. Defaults to the first 50 debits and 50 credits.
     * @param {string} [id] Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */

  }, {
    key: "transactionsGetTransactions",
    value: function transactionsGetTransactions(id, options) {
      return AccountApiFp(this.configuration).transactionsGetTransactions(id, options)(this.axios, this.basePath);
    }
  }]);

  return AccountApi;
}(_base.BaseAPI);
/**
 * ActivitiesApi - axios parameter creator
 * @export
 */


exports.AccountApi = AccountApi;

var ActivitiesApiAxiosParamCreator = function ActivitiesApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary Creates a new activity.
     * @param {CreateActivity} createActivity Metadata of the new activity.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesCreateActivity: function activitiesCreateActivity(createActivity) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'createActivity' is not null or undefined
      if (createActivity === null || createActivity === undefined) {
        throw new _base.RequiredError('createActivity', 'Required parameter createActivity was null or undefined when calling activitiesCreateActivity.');
      }

      var localVarPath = "/api/activities";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof createActivity !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(createActivity !== undefined ? createActivity : {}) : createActivity || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Deletes an activity.
     * @param {string} id The activity Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesDeleteActivity: function activitiesDeleteActivity(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling activitiesDeleteActivity.');
      }

      var localVarPath = "/api/activities/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'DELETE'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets the metadata of an activity.
     * @param {string} id The activity Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesReadActivity: function activitiesReadActivity(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling activitiesReadActivity.');
      }

      var localVarPath = "/api/activities/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary References an Amphora during a run.
     * @param {string} id The activity Id.
     * @param {string} runId The run Id.
     * @param {string} amphoraId The Id of the Amphora to reference.
     * @param {AmphoraReference} amphoraReference Information about the reference.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesReferenceAmphora: function activitiesReferenceAmphora(id, runId, amphoraId, amphoraReference) {
      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling activitiesReferenceAmphora.');
      } // verify required parameter 'runId' is not null or undefined


      if (runId === null || runId === undefined) {
        throw new _base.RequiredError('runId', 'Required parameter runId was null or undefined when calling activitiesReferenceAmphora.');
      } // verify required parameter 'amphoraId' is not null or undefined


      if (amphoraId === null || amphoraId === undefined) {
        throw new _base.RequiredError('amphoraId', 'Required parameter amphoraId was null or undefined when calling activitiesReferenceAmphora.');
      } // verify required parameter 'amphoraReference' is not null or undefined


      if (amphoraReference === null || amphoraReference === undefined) {
        throw new _base.RequiredError('amphoraReference', 'Required parameter amphoraReference was null or undefined when calling activitiesReferenceAmphora.');
      }

      var localVarPath = "/api/activities/{id}/Runs/{runId}/amphorae/{amphoraId}".replace("{".concat("id", "}"), encodeURIComponent(String(id))).replace("{".concat("runId", "}"), encodeURIComponent(String(runId))).replace("{".concat("amphoraId", "}"), encodeURIComponent(String(amphoraId)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'PUT'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof amphoraReference !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(amphoraReference !== undefined ? amphoraReference : {}) : amphoraReference || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Starts a new run of an activity.
     * @param {string} id The activity id in which to start a run.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesStartRun: function activitiesStartRun(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling activitiesStartRun.');
      }

      var localVarPath = "/api/activities/{id}/Runs".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Updates and completes a run.
     * @param {string} id The activity Id.
     * @param {string} runId The run Id.
     * @param {UpdateRun} updateRun Information about the update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesUpdateRun: function activitiesUpdateRun(id, runId, updateRun) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling activitiesUpdateRun.');
      } // verify required parameter 'runId' is not null or undefined


      if (runId === null || runId === undefined) {
        throw new _base.RequiredError('runId', 'Required parameter runId was null or undefined when calling activitiesUpdateRun.');
      } // verify required parameter 'updateRun' is not null or undefined


      if (updateRun === null || updateRun === undefined) {
        throw new _base.RequiredError('updateRun', 'Required parameter updateRun was null or undefined when calling activitiesUpdateRun.');
      }

      var localVarPath = "/api/activities/{id}/Runs/{runId}".replace("{".concat("id", "}"), encodeURIComponent(String(id))).replace("{".concat("runId", "}"), encodeURIComponent(String(runId)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof updateRun !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(updateRun !== undefined ? updateRun : {}) : updateRun || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * ActivitiesApi - functional programming interface
 * @export
 */


exports.ActivitiesApiAxiosParamCreator = ActivitiesApiAxiosParamCreator;

var ActivitiesApiFp = function ActivitiesApiFp(configuration) {
  return {
    /**
     * 
     * @summary Creates a new activity.
     * @param {CreateActivity} createActivity Metadata of the new activity.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesCreateActivity: function activitiesCreateActivity(createActivity, options) {
      var localVarAxiosArgs = ActivitiesApiAxiosParamCreator(configuration).activitiesCreateActivity(createActivity, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Deletes an activity.
     * @param {string} id The activity Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesDeleteActivity: function activitiesDeleteActivity(id, options) {
      var localVarAxiosArgs = ActivitiesApiAxiosParamCreator(configuration).activitiesDeleteActivity(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets the metadata of an activity.
     * @param {string} id The activity Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesReadActivity: function activitiesReadActivity(id, options) {
      var localVarAxiosArgs = ActivitiesApiAxiosParamCreator(configuration).activitiesReadActivity(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary References an Amphora during a run.
     * @param {string} id The activity Id.
     * @param {string} runId The run Id.
     * @param {string} amphoraId The Id of the Amphora to reference.
     * @param {AmphoraReference} amphoraReference Information about the reference.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesReferenceAmphora: function activitiesReferenceAmphora(id, runId, amphoraId, amphoraReference, options) {
      var localVarAxiosArgs = ActivitiesApiAxiosParamCreator(configuration).activitiesReferenceAmphora(id, runId, amphoraId, amphoraReference, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Starts a new run of an activity.
     * @param {string} id The activity id in which to start a run.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesStartRun: function activitiesStartRun(id, options) {
      var localVarAxiosArgs = ActivitiesApiAxiosParamCreator(configuration).activitiesStartRun(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Updates and completes a run.
     * @param {string} id The activity Id.
     * @param {string} runId The run Id.
     * @param {UpdateRun} updateRun Information about the update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesUpdateRun: function activitiesUpdateRun(id, runId, updateRun, options) {
      var localVarAxiosArgs = ActivitiesApiAxiosParamCreator(configuration).activitiesUpdateRun(id, runId, updateRun, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * ActivitiesApi - factory interface
 * @export
 */


exports.ActivitiesApiFp = ActivitiesApiFp;

var ActivitiesApiFactory = function ActivitiesApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary Creates a new activity.
     * @param {CreateActivity} createActivity Metadata of the new activity.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesCreateActivity: function activitiesCreateActivity(createActivity, options) {
      return ActivitiesApiFp(configuration).activitiesCreateActivity(createActivity, options)(axios, basePath);
    },

    /**
     * 
     * @summary Deletes an activity.
     * @param {string} id The activity Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesDeleteActivity: function activitiesDeleteActivity(id, options) {
      return ActivitiesApiFp(configuration).activitiesDeleteActivity(id, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets the metadata of an activity.
     * @param {string} id The activity Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesReadActivity: function activitiesReadActivity(id, options) {
      return ActivitiesApiFp(configuration).activitiesReadActivity(id, options)(axios, basePath);
    },

    /**
     * 
     * @summary References an Amphora during a run.
     * @param {string} id The activity Id.
     * @param {string} runId The run Id.
     * @param {string} amphoraId The Id of the Amphora to reference.
     * @param {AmphoraReference} amphoraReference Information about the reference.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesReferenceAmphora: function activitiesReferenceAmphora(id, runId, amphoraId, amphoraReference, options) {
      return ActivitiesApiFp(configuration).activitiesReferenceAmphora(id, runId, amphoraId, amphoraReference, options)(axios, basePath);
    },

    /**
     * 
     * @summary Starts a new run of an activity.
     * @param {string} id The activity id in which to start a run.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesStartRun: function activitiesStartRun(id, options) {
      return ActivitiesApiFp(configuration).activitiesStartRun(id, options)(axios, basePath);
    },

    /**
     * 
     * @summary Updates and completes a run.
     * @param {string} id The activity Id.
     * @param {string} runId The run Id.
     * @param {UpdateRun} updateRun Information about the update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesUpdateRun: function activitiesUpdateRun(id, runId, updateRun, options) {
      return ActivitiesApiFp(configuration).activitiesUpdateRun(id, runId, updateRun, options)(axios, basePath);
    }
  };
};
/**
 * ActivitiesApi - object-oriented interface
 * @export
 * @class ActivitiesApi
 * @extends {BaseAPI}
 */


exports.ActivitiesApiFactory = ActivitiesApiFactory;

var ActivitiesApi = /*#__PURE__*/function (_BaseAPI2) {
  _inherits(ActivitiesApi, _BaseAPI2);

  var _super2 = _createSuper(ActivitiesApi);

  function ActivitiesApi() {
    _classCallCheck(this, ActivitiesApi);

    return _super2.apply(this, arguments);
  }

  _createClass(ActivitiesApi, [{
    key: "activitiesCreateActivity",

    /**
     * 
     * @summary Creates a new activity.
     * @param {CreateActivity} createActivity Metadata of the new activity.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    value: function activitiesCreateActivity(createActivity, options) {
      return ActivitiesApiFp(this.configuration).activitiesCreateActivity(createActivity, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Deletes an activity.
     * @param {string} id The activity Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */

  }, {
    key: "activitiesDeleteActivity",
    value: function activitiesDeleteActivity(id, options) {
      return ActivitiesApiFp(this.configuration).activitiesDeleteActivity(id, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets the metadata of an activity.
     * @param {string} id The activity Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */

  }, {
    key: "activitiesReadActivity",
    value: function activitiesReadActivity(id, options) {
      return ActivitiesApiFp(this.configuration).activitiesReadActivity(id, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary References an Amphora during a run.
     * @param {string} id The activity Id.
     * @param {string} runId The run Id.
     * @param {string} amphoraId The Id of the Amphora to reference.
     * @param {AmphoraReference} amphoraReference Information about the reference.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */

  }, {
    key: "activitiesReferenceAmphora",
    value: function activitiesReferenceAmphora(id, runId, amphoraId, amphoraReference, options) {
      return ActivitiesApiFp(this.configuration).activitiesReferenceAmphora(id, runId, amphoraId, amphoraReference, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Starts a new run of an activity.
     * @param {string} id The activity id in which to start a run.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */

  }, {
    key: "activitiesStartRun",
    value: function activitiesStartRun(id, options) {
      return ActivitiesApiFp(this.configuration).activitiesStartRun(id, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Updates and completes a run.
     * @param {string} id The activity Id.
     * @param {string} runId The run Id.
     * @param {UpdateRun} updateRun Information about the update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */

  }, {
    key: "activitiesUpdateRun",
    value: function activitiesUpdateRun(id, runId, updateRun, options) {
      return ActivitiesApiFp(this.configuration).activitiesUpdateRun(id, runId, updateRun, options)(this.axios, this.basePath);
    }
  }]);

  return ActivitiesApi;
}(_base.BaseAPI);
/**
 * AmphoraeApi - axios parameter creator
 * @export
 */


exports.ActivitiesApi = ActivitiesApi;

var AmphoraeApiAxiosParamCreator = function AmphoraeApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary Gets the data quality metrics for this Amphora.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraQualityGet: function amphoraQualityGet(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraQualityGet.');
      }

      var localVarPath = "/api/amphorae/{id}/quality".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Sets the data quality metrics for this Amphora.
     * @param {string} id Amphora Id.
     * @param {Quality} quality The data quality metrics.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraQualitySet: function amphoraQualitySet(id, quality) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraQualitySet.');
      } // verify required parameter 'quality' is not null or undefined


      if (quality === null || quality === undefined) {
        throw new _base.RequiredError('quality', 'Required parameter quality was null or undefined when calling amphoraQualitySet.');
      }

      var localVarPath = "/api/amphorae/{id}/quality".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof quality !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(quality !== undefined ? quality : {}) : quality || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Creates an Access Control Rule for all on this Amphora.
     * @param {string} id Amphora Id.
     * @param {AllAccessRule} allAccessRule The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForAll: function amphoraeAccessControlsCreateForAll(id, allAccessRule) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeAccessControlsCreateForAll.');
      } // verify required parameter 'allAccessRule' is not null or undefined


      if (allAccessRule === null || allAccessRule === undefined) {
        throw new _base.RequiredError('allAccessRule', 'Required parameter allAccessRule was null or undefined when calling amphoraeAccessControlsCreateForAll.');
      }

      var localVarPath = "/api/amphorae/{id}/AccessControls/ForAll".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof allAccessRule !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(allAccessRule !== undefined ? allAccessRule : {}) : allAccessRule || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Creates an Access Control Rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {OrganisationAccessRule} organisationAccessRule The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForOrganisation: function amphoraeAccessControlsCreateForOrganisation(id, organisationAccessRule) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeAccessControlsCreateForOrganisation.');
      } // verify required parameter 'organisationAccessRule' is not null or undefined


      if (organisationAccessRule === null || organisationAccessRule === undefined) {
        throw new _base.RequiredError('organisationAccessRule', 'Required parameter organisationAccessRule was null or undefined when calling amphoraeAccessControlsCreateForOrganisation.');
      }

      var localVarPath = "/api/amphorae/{id}/AccessControls/ForOrganisation".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof organisationAccessRule !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(organisationAccessRule !== undefined ? organisationAccessRule : {}) : organisationAccessRule || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Creates an Access Control rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {UserAccessRule} userAccessRule The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForUser: function amphoraeAccessControlsCreateForUser(id, userAccessRule) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeAccessControlsCreateForUser.');
      } // verify required parameter 'userAccessRule' is not null or undefined


      if (userAccessRule === null || userAccessRule === undefined) {
        throw new _base.RequiredError('userAccessRule', 'Required parameter userAccessRule was null or undefined when calling amphoraeAccessControlsCreateForUser.');
      }

      var localVarPath = "/api/amphorae/{id}/AccessControls/ForUser".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof userAccessRule !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(userAccessRule !== undefined ? userAccessRule : {}) : userAccessRule || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Deletes an Access Control on this Amphora.
     * @param {string} id Amphora Id.
     * @param {string} ruleId The Id of the rule to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsDelete: function amphoraeAccessControlsDelete(id, ruleId) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeAccessControlsDelete.');
      } // verify required parameter 'ruleId' is not null or undefined


      if (ruleId === null || ruleId === undefined) {
        throw new _base.RequiredError('ruleId', 'Required parameter ruleId was null or undefined when calling amphoraeAccessControlsDelete.');
      }

      var localVarPath = "/api/amphorae/{id}/AccessControls/{ruleId}".replace("{".concat("id", "}"), encodeURIComponent(String(id))).replace("{".concat("ruleId", "}"), encodeURIComponent(String(ruleId)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'DELETE'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets the \'for all\' rule, if it exists, else an empty 200.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetForAllRule: function amphoraeAccessControlsGetForAllRule(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeAccessControlsGetForAllRule.');
      }

      var localVarPath = "/api/amphorae/{id}/AccessControls/ForAll".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets the list of access rules applied to organisations.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetOrganisationRules: function amphoraeAccessControlsGetOrganisationRules(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeAccessControlsGetOrganisationRules.');
      }

      var localVarPath = "/api/amphorae/{id}/AccessControls/ForOrganisation".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets the list of access rules applied to users.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetUserRules: function amphoraeAccessControlsGetUserRules(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeAccessControlsGetUserRules.');
      }

      var localVarPath = "/api/amphorae/{id}/AccessControls/ForUser".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Creates a new empty Amphora in the user\'s organisation.
     * @param {CreateAmphora} createAmphora Information for the new Amphora.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeCreate: function amphoraeCreate(createAmphora) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'createAmphora' is not null or undefined
      if (createAmphora === null || createAmphora === undefined) {
        throw new _base.RequiredError('createAmphora', 'Required parameter createAmphora was null or undefined when calling amphoraeCreate.');
      }

      var localVarPath = "/api/amphorae";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof createAmphora !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(createAmphora !== undefined ? createAmphora : {}) : createAmphora || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Deletes an Amphora.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeDelete: function amphoraeDelete(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeDelete.');
      }

      var localVarPath = "/api/amphorae/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'DELETE'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Creates a file. Returns a blob URL to upload to.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesCreateFileRequest: function amphoraeFilesCreateFileRequest(id, file) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeFilesCreateFileRequest.');
      } // verify required parameter 'file' is not null or undefined


      if (file === null || file === undefined) {
        throw new _base.RequiredError('file', 'Required parameter file was null or undefined when calling amphoraeFilesCreateFileRequest.');
      }

      var localVarPath = "/api/amphorae/{id}/files/{file}".replace("{".concat("id", "}"), encodeURIComponent(String(id))).replace("{".concat("file", "}"), encodeURIComponent(String(file)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesDeleteFile: function amphoraeFilesDeleteFile(id, file) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeFilesDeleteFile.');
      } // verify required parameter 'file' is not null or undefined


      if (file === null || file === undefined) {
        throw new _base.RequiredError('file', 'Required parameter file was null or undefined when calling amphoraeFilesDeleteFile.');
      }

      var localVarPath = "/api/amphorae/{id}/files/{file}".replace("{".concat("id", "}"), encodeURIComponent(String(id))).replace("{".concat("file", "}"), encodeURIComponent(String(file)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'DELETE'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesDownloadFile: function amphoraeFilesDownloadFile(id, file) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeFilesDownloadFile.');
      } // verify required parameter 'file' is not null or undefined


      if (file === null || file === undefined) {
        throw new _base.RequiredError('file', 'Required parameter file was null or undefined when calling amphoraeFilesDownloadFile.');
      }

      var localVarPath = "/api/amphorae/{id}/files/{file}".replace("{".concat("id", "}"), encodeURIComponent(String(id))).replace("{".concat("file", "}"), encodeURIComponent(String(file)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Lists an Amphora\'s files.
     * @param {string} id Amphora Id.
     * @param {string} [orderBy] Gets or sets the the orderBy parameter. Options are Alphabetical or LastModified.
     * @param {string} [prefix] Gets or sets a prefix filter for all file names. Is case sensitive.
     * @param {number} [take] Gets or sets how many items to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many items to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesListFiles: function amphoraeFilesListFiles(id, orderBy, prefix, take, skip) {
      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeFilesListFiles.');
      }

      var localVarPath = "/api/amphorae/{id}/files".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter['OrderBy'] = orderBy;
      }

      if (prefix !== undefined) {
        localVarQueryParameter['Prefix'] = prefix;
      }

      if (take !== undefined) {
        localVarQueryParameter['Take'] = take;
      }

      if (skip !== undefined) {
        localVarQueryParameter['Skip'] = skip;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Queries an Amphora\'s files.
     * @param {string} id Amphora Id.
     * @param {FileQueryOptions} fileQueryOptions Option for querying the files.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesQueryFiles: function amphoraeFilesQueryFiles(id, fileQueryOptions) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeFilesQueryFiles.');
      } // verify required parameter 'fileQueryOptions' is not null or undefined


      if (fileQueryOptions === null || fileQueryOptions === undefined) {
        throw new _base.RequiredError('fileQueryOptions', 'Required parameter fileQueryOptions was null or undefined when calling amphoraeFilesQueryFiles.');
      }

      var localVarPath = "/api/amphorae/{id}/files".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof fileQueryOptions !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(fileQueryOptions !== undefined ? fileQueryOptions : {}) : fileQueryOptions || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets the attributes of a file.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesReadFileAttributes: function amphoraeFilesReadFileAttributes(id, file) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeFilesReadFileAttributes.');
      } // verify required parameter 'file' is not null or undefined


      if (file === null || file === undefined) {
        throw new _base.RequiredError('file', 'Required parameter file was null or undefined when calling amphoraeFilesReadFileAttributes.');
      }

      var localVarPath = "/api/amphorae/{id}/files/{file}/attributes".replace("{".concat("id", "}"), encodeURIComponent(String(id))).replace("{".concat("file", "}"), encodeURIComponent(String(file)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @param {string} id 
     * @param {string} file 
     * @param {{ [key: string]: string; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesWriteFileAttributes: function amphoraeFilesWriteFileAttributes(id, file, requestBody) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeFilesWriteFileAttributes.');
      } // verify required parameter 'file' is not null or undefined


      if (file === null || file === undefined) {
        throw new _base.RequiredError('file', 'Required parameter file was null or undefined when calling amphoraeFilesWriteFileAttributes.');
      } // verify required parameter 'requestBody' is not null or undefined


      if (requestBody === null || requestBody === undefined) {
        throw new _base.RequiredError('requestBody', 'Required parameter requestBody was null or undefined when calling amphoraeFilesWriteFileAttributes.');
      }

      var localVarPath = "/api/amphorae/{id}/files/{file}/attributes".replace("{".concat("id", "}"), encodeURIComponent(String(id))).replace("{".concat("file", "}"), encodeURIComponent(String(file)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof requestBody !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : requestBody || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets a list of Amphora for yourself or your org, created or purchased by you (or organisation).
     * @param {string} [scope] \&#39;self\&#39; or \&#39;organisation\&#39;. Defaults to self.
     * @param {string} [accessType] \&#39;created\&#39; or \&#39;purchased\&#39;. Defaults to created.
     * @param {number} [take] Gets or sets how many items to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many items to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeList: function amphoraeList(scope, accessType, take, skip) {
      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
      var localVarPath = "/api/amphorae";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (scope !== undefined) {
        localVarQueryParameter['scope'] = scope;
      }

      if (accessType !== undefined) {
        localVarQueryParameter['accessType'] = accessType;
      }

      if (take !== undefined) {
        localVarQueryParameter['Take'] = take;
      }

      if (skip !== undefined) {
        localVarQueryParameter['Skip'] = skip;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeRead: function amphoraeRead(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeRead.');
      }

      var localVarPath = "/api/amphorae/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {CreateSignal} createSignal Signal Details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsCreateSignal: function amphoraeSignalsCreateSignal(id, createSignal) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeSignalsCreateSignal.');
      } // verify required parameter 'createSignal' is not null or undefined


      if (createSignal === null || createSignal === undefined) {
        throw new _base.RequiredError('createSignal', 'Required parameter createSignal was null or undefined when calling amphoraeSignalsCreateSignal.');
      }

      var localVarPath = "/api/amphorae/{id}/signals".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof createSignal !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(createSignal !== undefined ? createSignal : {}) : createSignal || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} property The name or id of the signal property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsGetSignal: function amphoraeSignalsGetSignal(id, property) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeSignalsGetSignal.');
      } // verify required parameter 'property' is not null or undefined


      if (property === null || property === undefined) {
        throw new _base.RequiredError('property', 'Required parameter property was null or undefined when calling amphoraeSignalsGetSignal.');
      }

      var localVarPath = "/api/amphorae/{id}/signals/{property}".replace("{".concat("id", "}"), encodeURIComponent(String(id))).replace("{".concat("property", "}"), encodeURIComponent(String(property)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsGetSignals: function amphoraeSignalsGetSignals(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeSignalsGetSignals.');
      }

      var localVarPath = "/api/amphorae/{id}/signals".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {string} signalId Signal Details.
     * @param {UpdateSignal} updateSignal Signal properties to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUpdateSignal: function amphoraeSignalsUpdateSignal(id, signalId, updateSignal) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeSignalsUpdateSignal.');
      } // verify required parameter 'signalId' is not null or undefined


      if (signalId === null || signalId === undefined) {
        throw new _base.RequiredError('signalId', 'Required parameter signalId was null or undefined when calling amphoraeSignalsUpdateSignal.');
      } // verify required parameter 'updateSignal' is not null or undefined


      if (updateSignal === null || updateSignal === undefined) {
        throw new _base.RequiredError('updateSignal', 'Required parameter updateSignal was null or undefined when calling amphoraeSignalsUpdateSignal.');
      }

      var localVarPath = "/api/amphorae/{id}/signals/{signalId}".replace("{".concat("id", "}"), encodeURIComponent(String(id))).replace("{".concat("signalId", "}"), encodeURIComponent(String(signalId)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'PUT'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof updateSignal !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(updateSignal !== undefined ? updateSignal : {}) : updateSignal || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @param {string} id 
     * @param {{ [key: string]: object; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignal: function amphoraeSignalsUploadSignal(id, requestBody) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeSignalsUploadSignal.');
      } // verify required parameter 'requestBody' is not null or undefined


      if (requestBody === null || requestBody === undefined) {
        throw new _base.RequiredError('requestBody', 'Required parameter requestBody was null or undefined when calling amphoraeSignalsUploadSignal.');
      }

      var localVarPath = "/api/amphorae/{id}/signals/values".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof requestBody !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : requestBody || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @param {string} id 
     * @param {{ [key: string]: object; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignal2: function amphoraeSignalsUploadSignal2(id, requestBody) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeSignalsUploadSignal2.');
      } // verify required parameter 'requestBody' is not null or undefined


      if (requestBody === null || requestBody === undefined) {
        throw new _base.RequiredError('requestBody', 'Required parameter requestBody was null or undefined when calling amphoraeSignalsUploadSignal2.');
      }

      var localVarPath = "/api/amphorae/{id}/signalValues".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof requestBody !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : requestBody || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @param {string} id 
     * @param {Array<{ [key: string]: object; }>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignalBatch: function amphoraeSignalsUploadSignalBatch(id, requestBody) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeSignalsUploadSignalBatch.');
      } // verify required parameter 'requestBody' is not null or undefined


      if (requestBody === null || requestBody === undefined) {
        throw new _base.RequiredError('requestBody', 'Required parameter requestBody was null or undefined when calling amphoraeSignalsUploadSignalBatch.');
      }

      var localVarPath = "/api/amphorae/{id}/signals/batchvalues".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof requestBody !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : requestBody || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @param {string} id 
     * @param {Array<{ [key: string]: object; }>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignalBatch2: function amphoraeSignalsUploadSignalBatch2(id, requestBody) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeSignalsUploadSignalBatch2.');
      } // verify required parameter 'requestBody' is not null or undefined


      if (requestBody === null || requestBody === undefined) {
        throw new _base.RequiredError('requestBody', 'Required parameter requestBody was null or undefined when calling amphoraeSignalsUploadSignalBatch2.');
      }

      var localVarPath = "/api/amphorae/{id}/batchSignalValues".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof requestBody !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : requestBody || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Updates the details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {EditAmphora} editAmphora Information to update. Nulls are NOT ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeUpdate: function amphoraeUpdate(id, editAmphora) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeUpdate.');
      } // verify required parameter 'editAmphora' is not null or undefined


      if (editAmphora === null || editAmphora === undefined) {
        throw new _base.RequiredError('editAmphora', 'Required parameter editAmphora was null or undefined when calling amphoraeUpdate.');
      }

      var localVarPath = "/api/amphorae/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'PUT'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof editAmphora !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(editAmphora !== undefined ? editAmphora : {}) : editAmphora || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Purchases an Amphora as the logged in user.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchasesPurchase: function purchasesPurchase(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling purchasesPurchase.');
      }

      var localVarPath = "/api/Amphorae/{id}/Purchases".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * AmphoraeApi - functional programming interface
 * @export
 */


exports.AmphoraeApiAxiosParamCreator = AmphoraeApiAxiosParamCreator;

var AmphoraeApiFp = function AmphoraeApiFp(configuration) {
  return {
    /**
     * 
     * @summary Gets the data quality metrics for this Amphora.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraQualityGet: function amphoraQualityGet(id, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraQualityGet(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Sets the data quality metrics for this Amphora.
     * @param {string} id Amphora Id.
     * @param {Quality} quality The data quality metrics.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraQualitySet: function amphoraQualitySet(id, quality, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraQualitySet(id, quality, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Creates an Access Control Rule for all on this Amphora.
     * @param {string} id Amphora Id.
     * @param {AllAccessRule} allAccessRule The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForAll: function amphoraeAccessControlsCreateForAll(id, allAccessRule, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeAccessControlsCreateForAll(id, allAccessRule, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Creates an Access Control Rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {OrganisationAccessRule} organisationAccessRule The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForOrganisation: function amphoraeAccessControlsCreateForOrganisation(id, organisationAccessRule, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeAccessControlsCreateForOrganisation(id, organisationAccessRule, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Creates an Access Control rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {UserAccessRule} userAccessRule The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForUser: function amphoraeAccessControlsCreateForUser(id, userAccessRule, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeAccessControlsCreateForUser(id, userAccessRule, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Deletes an Access Control on this Amphora.
     * @param {string} id Amphora Id.
     * @param {string} ruleId The Id of the rule to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsDelete: function amphoraeAccessControlsDelete(id, ruleId, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeAccessControlsDelete(id, ruleId, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets the \'for all\' rule, if it exists, else an empty 200.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetForAllRule: function amphoraeAccessControlsGetForAllRule(id, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeAccessControlsGetForAllRule(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets the list of access rules applied to organisations.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetOrganisationRules: function amphoraeAccessControlsGetOrganisationRules(id, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeAccessControlsGetOrganisationRules(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets the list of access rules applied to users.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetUserRules: function amphoraeAccessControlsGetUserRules(id, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeAccessControlsGetUserRules(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Creates a new empty Amphora in the user\'s organisation.
     * @param {CreateAmphora} createAmphora Information for the new Amphora.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeCreate: function amphoraeCreate(createAmphora, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeCreate(createAmphora, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Deletes an Amphora.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeDelete: function amphoraeDelete(id, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeDelete(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Creates a file. Returns a blob URL to upload to.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesCreateFileRequest: function amphoraeFilesCreateFileRequest(id, file, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeFilesCreateFileRequest(id, file, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesDeleteFile: function amphoraeFilesDeleteFile(id, file, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeFilesDeleteFile(id, file, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesDownloadFile: function amphoraeFilesDownloadFile(id, file, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeFilesDownloadFile(id, file, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Lists an Amphora\'s files.
     * @param {string} id Amphora Id.
     * @param {string} [orderBy] Gets or sets the the orderBy parameter. Options are Alphabetical or LastModified.
     * @param {string} [prefix] Gets or sets a prefix filter for all file names. Is case sensitive.
     * @param {number} [take] Gets or sets how many items to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many items to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesListFiles: function amphoraeFilesListFiles(id, orderBy, prefix, take, skip, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeFilesListFiles(id, orderBy, prefix, take, skip, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Queries an Amphora\'s files.
     * @param {string} id Amphora Id.
     * @param {FileQueryOptions} fileQueryOptions Option for querying the files.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesQueryFiles: function amphoraeFilesQueryFiles(id, fileQueryOptions, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeFilesQueryFiles(id, fileQueryOptions, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets the attributes of a file.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesReadFileAttributes: function amphoraeFilesReadFileAttributes(id, file, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeFilesReadFileAttributes(id, file, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @param {string} id 
     * @param {string} file 
     * @param {{ [key: string]: string; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesWriteFileAttributes: function amphoraeFilesWriteFileAttributes(id, file, requestBody, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeFilesWriteFileAttributes(id, file, requestBody, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets a list of Amphora for yourself or your org, created or purchased by you (or organisation).
     * @param {string} [scope] \&#39;self\&#39; or \&#39;organisation\&#39;. Defaults to self.
     * @param {string} [accessType] \&#39;created\&#39; or \&#39;purchased\&#39;. Defaults to created.
     * @param {number} [take] Gets or sets how many items to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many items to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeList: function amphoraeList(scope, accessType, take, skip, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeList(scope, accessType, take, skip, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeRead: function amphoraeRead(id, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeRead(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {CreateSignal} createSignal Signal Details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsCreateSignal: function amphoraeSignalsCreateSignal(id, createSignal, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeSignalsCreateSignal(id, createSignal, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} property The name or id of the signal property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsGetSignal: function amphoraeSignalsGetSignal(id, property, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeSignalsGetSignal(id, property, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsGetSignals: function amphoraeSignalsGetSignals(id, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeSignalsGetSignals(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {string} signalId Signal Details.
     * @param {UpdateSignal} updateSignal Signal properties to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUpdateSignal: function amphoraeSignalsUpdateSignal(id, signalId, updateSignal, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeSignalsUpdateSignal(id, signalId, updateSignal, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @param {string} id 
     * @param {{ [key: string]: object; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignal: function amphoraeSignalsUploadSignal(id, requestBody, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeSignalsUploadSignal(id, requestBody, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @param {string} id 
     * @param {{ [key: string]: object; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignal2: function amphoraeSignalsUploadSignal2(id, requestBody, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeSignalsUploadSignal2(id, requestBody, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @param {string} id 
     * @param {Array<{ [key: string]: object; }>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignalBatch: function amphoraeSignalsUploadSignalBatch(id, requestBody, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeSignalsUploadSignalBatch(id, requestBody, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @param {string} id 
     * @param {Array<{ [key: string]: object; }>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignalBatch2: function amphoraeSignalsUploadSignalBatch2(id, requestBody, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeSignalsUploadSignalBatch2(id, requestBody, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Updates the details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {EditAmphora} editAmphora Information to update. Nulls are NOT ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeUpdate: function amphoraeUpdate(id, editAmphora, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeUpdate(id, editAmphora, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Purchases an Amphora as the logged in user.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchasesPurchase: function purchasesPurchase(id, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).purchasesPurchase(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * AmphoraeApi - factory interface
 * @export
 */


exports.AmphoraeApiFp = AmphoraeApiFp;

var AmphoraeApiFactory = function AmphoraeApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary Gets the data quality metrics for this Amphora.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraQualityGet: function amphoraQualityGet(id, options) {
      return AmphoraeApiFp(configuration).amphoraQualityGet(id, options)(axios, basePath);
    },

    /**
     * 
     * @summary Sets the data quality metrics for this Amphora.
     * @param {string} id Amphora Id.
     * @param {Quality} quality The data quality metrics.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraQualitySet: function amphoraQualitySet(id, quality, options) {
      return AmphoraeApiFp(configuration).amphoraQualitySet(id, quality, options)(axios, basePath);
    },

    /**
     * 
     * @summary Creates an Access Control Rule for all on this Amphora.
     * @param {string} id Amphora Id.
     * @param {AllAccessRule} allAccessRule The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForAll: function amphoraeAccessControlsCreateForAll(id, allAccessRule, options) {
      return AmphoraeApiFp(configuration).amphoraeAccessControlsCreateForAll(id, allAccessRule, options)(axios, basePath);
    },

    /**
     * 
     * @summary Creates an Access Control Rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {OrganisationAccessRule} organisationAccessRule The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForOrganisation: function amphoraeAccessControlsCreateForOrganisation(id, organisationAccessRule, options) {
      return AmphoraeApiFp(configuration).amphoraeAccessControlsCreateForOrganisation(id, organisationAccessRule, options)(axios, basePath);
    },

    /**
     * 
     * @summary Creates an Access Control rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {UserAccessRule} userAccessRule The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForUser: function amphoraeAccessControlsCreateForUser(id, userAccessRule, options) {
      return AmphoraeApiFp(configuration).amphoraeAccessControlsCreateForUser(id, userAccessRule, options)(axios, basePath);
    },

    /**
     * 
     * @summary Deletes an Access Control on this Amphora.
     * @param {string} id Amphora Id.
     * @param {string} ruleId The Id of the rule to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsDelete: function amphoraeAccessControlsDelete(id, ruleId, options) {
      return AmphoraeApiFp(configuration).amphoraeAccessControlsDelete(id, ruleId, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets the \'for all\' rule, if it exists, else an empty 200.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetForAllRule: function amphoraeAccessControlsGetForAllRule(id, options) {
      return AmphoraeApiFp(configuration).amphoraeAccessControlsGetForAllRule(id, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets the list of access rules applied to organisations.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetOrganisationRules: function amphoraeAccessControlsGetOrganisationRules(id, options) {
      return AmphoraeApiFp(configuration).amphoraeAccessControlsGetOrganisationRules(id, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets the list of access rules applied to users.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetUserRules: function amphoraeAccessControlsGetUserRules(id, options) {
      return AmphoraeApiFp(configuration).amphoraeAccessControlsGetUserRules(id, options)(axios, basePath);
    },

    /**
     * 
     * @summary Creates a new empty Amphora in the user\'s organisation.
     * @param {CreateAmphora} createAmphora Information for the new Amphora.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeCreate: function amphoraeCreate(createAmphora, options) {
      return AmphoraeApiFp(configuration).amphoraeCreate(createAmphora, options)(axios, basePath);
    },

    /**
     * 
     * @summary Deletes an Amphora.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeDelete: function amphoraeDelete(id, options) {
      return AmphoraeApiFp(configuration).amphoraeDelete(id, options)(axios, basePath);
    },

    /**
     * 
     * @summary Creates a file. Returns a blob URL to upload to.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesCreateFileRequest: function amphoraeFilesCreateFileRequest(id, file, options) {
      return AmphoraeApiFp(configuration).amphoraeFilesCreateFileRequest(id, file, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesDeleteFile: function amphoraeFilesDeleteFile(id, file, options) {
      return AmphoraeApiFp(configuration).amphoraeFilesDeleteFile(id, file, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesDownloadFile: function amphoraeFilesDownloadFile(id, file, options) {
      return AmphoraeApiFp(configuration).amphoraeFilesDownloadFile(id, file, options)(axios, basePath);
    },

    /**
     * 
     * @summary Lists an Amphora\'s files.
     * @param {string} id Amphora Id.
     * @param {string} [orderBy] Gets or sets the the orderBy parameter. Options are Alphabetical or LastModified.
     * @param {string} [prefix] Gets or sets a prefix filter for all file names. Is case sensitive.
     * @param {number} [take] Gets or sets how many items to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many items to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesListFiles: function amphoraeFilesListFiles(id, orderBy, prefix, take, skip, options) {
      return AmphoraeApiFp(configuration).amphoraeFilesListFiles(id, orderBy, prefix, take, skip, options)(axios, basePath);
    },

    /**
     * 
     * @summary Queries an Amphora\'s files.
     * @param {string} id Amphora Id.
     * @param {FileQueryOptions} fileQueryOptions Option for querying the files.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesQueryFiles: function amphoraeFilesQueryFiles(id, fileQueryOptions, options) {
      return AmphoraeApiFp(configuration).amphoraeFilesQueryFiles(id, fileQueryOptions, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets the attributes of a file.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesReadFileAttributes: function amphoraeFilesReadFileAttributes(id, file, options) {
      return AmphoraeApiFp(configuration).amphoraeFilesReadFileAttributes(id, file, options)(axios, basePath);
    },

    /**
     * 
     * @param {string} id 
     * @param {string} file 
     * @param {{ [key: string]: string; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesWriteFileAttributes: function amphoraeFilesWriteFileAttributes(id, file, requestBody, options) {
      return AmphoraeApiFp(configuration).amphoraeFilesWriteFileAttributes(id, file, requestBody, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets a list of Amphora for yourself or your org, created or purchased by you (or organisation).
     * @param {string} [scope] \&#39;self\&#39; or \&#39;organisation\&#39;. Defaults to self.
     * @param {string} [accessType] \&#39;created\&#39; or \&#39;purchased\&#39;. Defaults to created.
     * @param {number} [take] Gets or sets how many items to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many items to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeList: function amphoraeList(scope, accessType, take, skip, options) {
      return AmphoraeApiFp(configuration).amphoraeList(scope, accessType, take, skip, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeRead: function amphoraeRead(id, options) {
      return AmphoraeApiFp(configuration).amphoraeRead(id, options)(axios, basePath);
    },

    /**
     * 
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {CreateSignal} createSignal Signal Details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsCreateSignal: function amphoraeSignalsCreateSignal(id, createSignal, options) {
      return AmphoraeApiFp(configuration).amphoraeSignalsCreateSignal(id, createSignal, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} property The name or id of the signal property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsGetSignal: function amphoraeSignalsGetSignal(id, property, options) {
      return AmphoraeApiFp(configuration).amphoraeSignalsGetSignal(id, property, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsGetSignals: function amphoraeSignalsGetSignals(id, options) {
      return AmphoraeApiFp(configuration).amphoraeSignalsGetSignals(id, options)(axios, basePath);
    },

    /**
     * 
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {string} signalId Signal Details.
     * @param {UpdateSignal} updateSignal Signal properties to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUpdateSignal: function amphoraeSignalsUpdateSignal(id, signalId, updateSignal, options) {
      return AmphoraeApiFp(configuration).amphoraeSignalsUpdateSignal(id, signalId, updateSignal, options)(axios, basePath);
    },

    /**
     * 
     * @param {string} id 
     * @param {{ [key: string]: object; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignal: function amphoraeSignalsUploadSignal(id, requestBody, options) {
      return AmphoraeApiFp(configuration).amphoraeSignalsUploadSignal(id, requestBody, options)(axios, basePath);
    },

    /**
     * 
     * @param {string} id 
     * @param {{ [key: string]: object; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignal2: function amphoraeSignalsUploadSignal2(id, requestBody, options) {
      return AmphoraeApiFp(configuration).amphoraeSignalsUploadSignal2(id, requestBody, options)(axios, basePath);
    },

    /**
     * 
     * @param {string} id 
     * @param {Array<{ [key: string]: object; }>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignalBatch: function amphoraeSignalsUploadSignalBatch(id, requestBody, options) {
      return AmphoraeApiFp(configuration).amphoraeSignalsUploadSignalBatch(id, requestBody, options)(axios, basePath);
    },

    /**
     * 
     * @param {string} id 
     * @param {Array<{ [key: string]: object; }>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignalBatch2: function amphoraeSignalsUploadSignalBatch2(id, requestBody, options) {
      return AmphoraeApiFp(configuration).amphoraeSignalsUploadSignalBatch2(id, requestBody, options)(axios, basePath);
    },

    /**
     * 
     * @summary Updates the details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {EditAmphora} editAmphora Information to update. Nulls are NOT ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeUpdate: function amphoraeUpdate(id, editAmphora, options) {
      return AmphoraeApiFp(configuration).amphoraeUpdate(id, editAmphora, options)(axios, basePath);
    },

    /**
     * 
     * @summary Purchases an Amphora as the logged in user.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchasesPurchase: function purchasesPurchase(id, options) {
      return AmphoraeApiFp(configuration).purchasesPurchase(id, options)(axios, basePath);
    }
  };
};
/**
 * AmphoraeApi - object-oriented interface
 * @export
 * @class AmphoraeApi
 * @extends {BaseAPI}
 */


exports.AmphoraeApiFactory = AmphoraeApiFactory;

var AmphoraeApi = /*#__PURE__*/function (_BaseAPI3) {
  _inherits(AmphoraeApi, _BaseAPI3);

  var _super3 = _createSuper(AmphoraeApi);

  function AmphoraeApi() {
    _classCallCheck(this, AmphoraeApi);

    return _super3.apply(this, arguments);
  }

  _createClass(AmphoraeApi, [{
    key: "amphoraQualityGet",

    /**
     * 
     * @summary Gets the data quality metrics for this Amphora.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    value: function amphoraQualityGet(id, options) {
      return AmphoraeApiFp(this.configuration).amphoraQualityGet(id, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Sets the data quality metrics for this Amphora.
     * @param {string} id Amphora Id.
     * @param {Quality} quality The data quality metrics.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraQualitySet",
    value: function amphoraQualitySet(id, quality, options) {
      return AmphoraeApiFp(this.configuration).amphoraQualitySet(id, quality, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Creates an Access Control Rule for all on this Amphora.
     * @param {string} id Amphora Id.
     * @param {AllAccessRule} allAccessRule The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeAccessControlsCreateForAll",
    value: function amphoraeAccessControlsCreateForAll(id, allAccessRule, options) {
      return AmphoraeApiFp(this.configuration).amphoraeAccessControlsCreateForAll(id, allAccessRule, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Creates an Access Control Rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {OrganisationAccessRule} organisationAccessRule The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeAccessControlsCreateForOrganisation",
    value: function amphoraeAccessControlsCreateForOrganisation(id, organisationAccessRule, options) {
      return AmphoraeApiFp(this.configuration).amphoraeAccessControlsCreateForOrganisation(id, organisationAccessRule, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Creates an Access Control rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {UserAccessRule} userAccessRule The rule to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeAccessControlsCreateForUser",
    value: function amphoraeAccessControlsCreateForUser(id, userAccessRule, options) {
      return AmphoraeApiFp(this.configuration).amphoraeAccessControlsCreateForUser(id, userAccessRule, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Deletes an Access Control on this Amphora.
     * @param {string} id Amphora Id.
     * @param {string} ruleId The Id of the rule to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeAccessControlsDelete",
    value: function amphoraeAccessControlsDelete(id, ruleId, options) {
      return AmphoraeApiFp(this.configuration).amphoraeAccessControlsDelete(id, ruleId, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets the \'for all\' rule, if it exists, else an empty 200.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeAccessControlsGetForAllRule",
    value: function amphoraeAccessControlsGetForAllRule(id, options) {
      return AmphoraeApiFp(this.configuration).amphoraeAccessControlsGetForAllRule(id, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets the list of access rules applied to organisations.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeAccessControlsGetOrganisationRules",
    value: function amphoraeAccessControlsGetOrganisationRules(id, options) {
      return AmphoraeApiFp(this.configuration).amphoraeAccessControlsGetOrganisationRules(id, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets the list of access rules applied to users.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeAccessControlsGetUserRules",
    value: function amphoraeAccessControlsGetUserRules(id, options) {
      return AmphoraeApiFp(this.configuration).amphoraeAccessControlsGetUserRules(id, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Creates a new empty Amphora in the user\'s organisation.
     * @param {CreateAmphora} createAmphora Information for the new Amphora.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeCreate",
    value: function amphoraeCreate(createAmphora, options) {
      return AmphoraeApiFp(this.configuration).amphoraeCreate(createAmphora, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Deletes an Amphora.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeDelete",
    value: function amphoraeDelete(id, options) {
      return AmphoraeApiFp(this.configuration).amphoraeDelete(id, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Creates a file. Returns a blob URL to upload to.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeFilesCreateFileRequest",
    value: function amphoraeFilesCreateFileRequest(id, file, options) {
      return AmphoraeApiFp(this.configuration).amphoraeFilesCreateFileRequest(id, file, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeFilesDeleteFile",
    value: function amphoraeFilesDeleteFile(id, file, options) {
      return AmphoraeApiFp(this.configuration).amphoraeFilesDeleteFile(id, file, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeFilesDownloadFile",
    value: function amphoraeFilesDownloadFile(id, file, options) {
      return AmphoraeApiFp(this.configuration).amphoraeFilesDownloadFile(id, file, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Lists an Amphora\'s files.
     * @param {string} id Amphora Id.
     * @param {string} [orderBy] Gets or sets the the orderBy parameter. Options are Alphabetical or LastModified.
     * @param {string} [prefix] Gets or sets a prefix filter for all file names. Is case sensitive.
     * @param {number} [take] Gets or sets how many items to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many items to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeFilesListFiles",
    value: function amphoraeFilesListFiles(id, orderBy, prefix, take, skip, options) {
      return AmphoraeApiFp(this.configuration).amphoraeFilesListFiles(id, orderBy, prefix, take, skip, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Queries an Amphora\'s files.
     * @param {string} id Amphora Id.
     * @param {FileQueryOptions} fileQueryOptions Option for querying the files.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeFilesQueryFiles",
    value: function amphoraeFilesQueryFiles(id, fileQueryOptions, options) {
      return AmphoraeApiFp(this.configuration).amphoraeFilesQueryFiles(id, fileQueryOptions, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets the attributes of a file.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeFilesReadFileAttributes",
    value: function amphoraeFilesReadFileAttributes(id, file, options) {
      return AmphoraeApiFp(this.configuration).amphoraeFilesReadFileAttributes(id, file, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @param {string} id 
     * @param {string} file 
     * @param {{ [key: string]: string; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeFilesWriteFileAttributes",
    value: function amphoraeFilesWriteFileAttributes(id, file, requestBody, options) {
      return AmphoraeApiFp(this.configuration).amphoraeFilesWriteFileAttributes(id, file, requestBody, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets a list of Amphora for yourself or your org, created or purchased by you (or organisation).
     * @param {string} [scope] \&#39;self\&#39; or \&#39;organisation\&#39;. Defaults to self.
     * @param {string} [accessType] \&#39;created\&#39; or \&#39;purchased\&#39;. Defaults to created.
     * @param {number} [take] Gets or sets how many items to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many items to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeList",
    value: function amphoraeList(scope, accessType, take, skip, options) {
      return AmphoraeApiFp(this.configuration).amphoraeList(scope, accessType, take, skip, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeRead",
    value: function amphoraeRead(id, options) {
      return AmphoraeApiFp(this.configuration).amphoraeRead(id, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {CreateSignal} createSignal Signal Details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeSignalsCreateSignal",
    value: function amphoraeSignalsCreateSignal(id, createSignal, options) {
      return AmphoraeApiFp(this.configuration).amphoraeSignalsCreateSignal(id, createSignal, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} property The name or id of the signal property.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeSignalsGetSignal",
    value: function amphoraeSignalsGetSignal(id, property, options) {
      return AmphoraeApiFp(this.configuration).amphoraeSignalsGetSignal(id, property, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeSignalsGetSignals",
    value: function amphoraeSignalsGetSignals(id, options) {
      return AmphoraeApiFp(this.configuration).amphoraeSignalsGetSignals(id, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {string} signalId Signal Details.
     * @param {UpdateSignal} updateSignal Signal properties to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeSignalsUpdateSignal",
    value: function amphoraeSignalsUpdateSignal(id, signalId, updateSignal, options) {
      return AmphoraeApiFp(this.configuration).amphoraeSignalsUpdateSignal(id, signalId, updateSignal, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @param {string} id 
     * @param {{ [key: string]: object; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeSignalsUploadSignal",
    value: function amphoraeSignalsUploadSignal(id, requestBody, options) {
      return AmphoraeApiFp(this.configuration).amphoraeSignalsUploadSignal(id, requestBody, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @param {string} id 
     * @param {{ [key: string]: object; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeSignalsUploadSignal2",
    value: function amphoraeSignalsUploadSignal2(id, requestBody, options) {
      return AmphoraeApiFp(this.configuration).amphoraeSignalsUploadSignal2(id, requestBody, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @param {string} id 
     * @param {Array<{ [key: string]: object; }>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeSignalsUploadSignalBatch",
    value: function amphoraeSignalsUploadSignalBatch(id, requestBody, options) {
      return AmphoraeApiFp(this.configuration).amphoraeSignalsUploadSignalBatch(id, requestBody, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @param {string} id 
     * @param {Array<{ [key: string]: object; }>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeSignalsUploadSignalBatch2",
    value: function amphoraeSignalsUploadSignalBatch2(id, requestBody, options) {
      return AmphoraeApiFp(this.configuration).amphoraeSignalsUploadSignalBatch2(id, requestBody, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Updates the details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {EditAmphora} editAmphora Information to update. Nulls are NOT ignored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeUpdate",
    value: function amphoraeUpdate(id, editAmphora, options) {
      return AmphoraeApiFp(this.configuration).amphoraeUpdate(id, editAmphora, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Purchases an Amphora as the logged in user.
     * @param {string} id Amphora Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "purchasesPurchase",
    value: function purchasesPurchase(id, options) {
      return AmphoraeApiFp(this.configuration).purchasesPurchase(id, options)(this.axios, this.basePath);
    }
  }]);

  return AmphoraeApi;
}(_base.BaseAPI);
/**
 * ApplicationsApi - axios parameter creator
 * @export
 */


exports.AmphoraeApi = AmphoraeApi;

var ApplicationsApiAxiosParamCreator = function ApplicationsApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary Creates a new application. Applications are external websites that Amphora users can sign in to.
     * @param {CreateApplication} createApplication An application to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsCreateApplication: function applicationsCreateApplication(createApplication) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'createApplication' is not null or undefined
      if (createApplication === null || createApplication === undefined) {
        throw new _base.RequiredError('createApplication', 'Required parameter createApplication was null or undefined when calling applicationsCreateApplication.');
      }

      var localVarPath = "/api/applications";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof createApplication !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(createApplication !== undefined ? createApplication : {}) : createApplication || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Deletes an application. Must be done by an Organisation administrator.
     * @param {string} id The application id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsDeleteApplication: function applicationsDeleteApplication(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling applicationsDeleteApplication.');
      }

      var localVarPath = "/api/applications/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'DELETE'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets all applications a user has access to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsGetApplications: function applicationsGetApplications() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var localVarPath = "/api/applications";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets an application by Id, if it exists.
     * @param {string} id The id of the application to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsReadApplication: function applicationsReadApplication(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling applicationsReadApplication.');
      }

      var localVarPath = "/api/applications/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Updates an application by Id, if it exists.
     * @param {string} id The id of the application to update.
     * @param {UpdateApplication} updateApplication The information to update (old locations will be deleted).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsUpdateApplication: function applicationsUpdateApplication(id, updateApplication) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling applicationsUpdateApplication.');
      } // verify required parameter 'updateApplication' is not null or undefined


      if (updateApplication === null || updateApplication === undefined) {
        throw new _base.RequiredError('updateApplication', 'Required parameter updateApplication was null or undefined when calling applicationsUpdateApplication.');
      }

      var localVarPath = "/api/applications/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'PUT'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof updateApplication !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(updateApplication !== undefined ? updateApplication : {}) : updateApplication || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * ApplicationsApi - functional programming interface
 * @export
 */


exports.ApplicationsApiAxiosParamCreator = ApplicationsApiAxiosParamCreator;

var ApplicationsApiFp = function ApplicationsApiFp(configuration) {
  return {
    /**
     * 
     * @summary Creates a new application. Applications are external websites that Amphora users can sign in to.
     * @param {CreateApplication} createApplication An application to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsCreateApplication: function applicationsCreateApplication(createApplication, options) {
      var localVarAxiosArgs = ApplicationsApiAxiosParamCreator(configuration).applicationsCreateApplication(createApplication, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Deletes an application. Must be done by an Organisation administrator.
     * @param {string} id The application id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsDeleteApplication: function applicationsDeleteApplication(id, options) {
      var localVarAxiosArgs = ApplicationsApiAxiosParamCreator(configuration).applicationsDeleteApplication(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets all applications a user has access to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsGetApplications: function applicationsGetApplications(options) {
      var localVarAxiosArgs = ApplicationsApiAxiosParamCreator(configuration).applicationsGetApplications(options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets an application by Id, if it exists.
     * @param {string} id The id of the application to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsReadApplication: function applicationsReadApplication(id, options) {
      var localVarAxiosArgs = ApplicationsApiAxiosParamCreator(configuration).applicationsReadApplication(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Updates an application by Id, if it exists.
     * @param {string} id The id of the application to update.
     * @param {UpdateApplication} updateApplication The information to update (old locations will be deleted).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsUpdateApplication: function applicationsUpdateApplication(id, updateApplication, options) {
      var localVarAxiosArgs = ApplicationsApiAxiosParamCreator(configuration).applicationsUpdateApplication(id, updateApplication, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * ApplicationsApi - factory interface
 * @export
 */


exports.ApplicationsApiFp = ApplicationsApiFp;

var ApplicationsApiFactory = function ApplicationsApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary Creates a new application. Applications are external websites that Amphora users can sign in to.
     * @param {CreateApplication} createApplication An application to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsCreateApplication: function applicationsCreateApplication(createApplication, options) {
      return ApplicationsApiFp(configuration).applicationsCreateApplication(createApplication, options)(axios, basePath);
    },

    /**
     * 
     * @summary Deletes an application. Must be done by an Organisation administrator.
     * @param {string} id The application id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsDeleteApplication: function applicationsDeleteApplication(id, options) {
      return ApplicationsApiFp(configuration).applicationsDeleteApplication(id, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets all applications a user has access to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsGetApplications: function applicationsGetApplications(options) {
      return ApplicationsApiFp(configuration).applicationsGetApplications(options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets an application by Id, if it exists.
     * @param {string} id The id of the application to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsReadApplication: function applicationsReadApplication(id, options) {
      return ApplicationsApiFp(configuration).applicationsReadApplication(id, options)(axios, basePath);
    },

    /**
     * 
     * @summary Updates an application by Id, if it exists.
     * @param {string} id The id of the application to update.
     * @param {UpdateApplication} updateApplication The information to update (old locations will be deleted).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsUpdateApplication: function applicationsUpdateApplication(id, updateApplication, options) {
      return ApplicationsApiFp(configuration).applicationsUpdateApplication(id, updateApplication, options)(axios, basePath);
    }
  };
};
/**
 * ApplicationsApi - object-oriented interface
 * @export
 * @class ApplicationsApi
 * @extends {BaseAPI}
 */


exports.ApplicationsApiFactory = ApplicationsApiFactory;

var ApplicationsApi = /*#__PURE__*/function (_BaseAPI4) {
  _inherits(ApplicationsApi, _BaseAPI4);

  var _super4 = _createSuper(ApplicationsApi);

  function ApplicationsApi() {
    _classCallCheck(this, ApplicationsApi);

    return _super4.apply(this, arguments);
  }

  _createClass(ApplicationsApi, [{
    key: "applicationsCreateApplication",

    /**
     * 
     * @summary Creates a new application. Applications are external websites that Amphora users can sign in to.
     * @param {CreateApplication} createApplication An application to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    value: function applicationsCreateApplication(createApplication, options) {
      return ApplicationsApiFp(this.configuration).applicationsCreateApplication(createApplication, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Deletes an application. Must be done by an Organisation administrator.
     * @param {string} id The application id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */

  }, {
    key: "applicationsDeleteApplication",
    value: function applicationsDeleteApplication(id, options) {
      return ApplicationsApiFp(this.configuration).applicationsDeleteApplication(id, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets all applications a user has access to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */

  }, {
    key: "applicationsGetApplications",
    value: function applicationsGetApplications(options) {
      return ApplicationsApiFp(this.configuration).applicationsGetApplications(options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets an application by Id, if it exists.
     * @param {string} id The id of the application to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */

  }, {
    key: "applicationsReadApplication",
    value: function applicationsReadApplication(id, options) {
      return ApplicationsApiFp(this.configuration).applicationsReadApplication(id, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Updates an application by Id, if it exists.
     * @param {string} id The id of the application to update.
     * @param {UpdateApplication} updateApplication The information to update (old locations will be deleted).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */

  }, {
    key: "applicationsUpdateApplication",
    value: function applicationsUpdateApplication(id, updateApplication, options) {
      return ApplicationsApiFp(this.configuration).applicationsUpdateApplication(id, updateApplication, options)(this.axios, this.basePath);
    }
  }]);

  return ApplicationsApi;
}(_base.BaseAPI);
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */


exports.ApplicationsApi = ApplicationsApi;

var AuthenticationApiAxiosParamCreator = function AuthenticationApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary Returns a JWT (JSON Web Token).             
     * @param {LoginRequest} loginRequest Token Request Parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticationRequestToken: function authenticationRequestToken(loginRequest) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'loginRequest' is not null or undefined
      if (loginRequest === null || loginRequest === undefined) {
        throw new _base.RequiredError('loginRequest', 'Required parameter loginRequest was null or undefined when calling authenticationRequestToken.');
      }

      var localVarPath = "/api/authentication/request";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof loginRequest !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(loginRequest !== undefined ? loginRequest : {}) : loginRequest || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * AuthenticationApi - functional programming interface
 * @export
 */


exports.AuthenticationApiAxiosParamCreator = AuthenticationApiAxiosParamCreator;

var AuthenticationApiFp = function AuthenticationApiFp(configuration) {
  return {
    /**
     * 
     * @summary Returns a JWT (JSON Web Token).             
     * @param {LoginRequest} loginRequest Token Request Parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticationRequestToken: function authenticationRequestToken(loginRequest, options) {
      var localVarAxiosArgs = AuthenticationApiAxiosParamCreator(configuration).authenticationRequestToken(loginRequest, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * AuthenticationApi - factory interface
 * @export
 */


exports.AuthenticationApiFp = AuthenticationApiFp;

var AuthenticationApiFactory = function AuthenticationApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary Returns a JWT (JSON Web Token).             
     * @param {LoginRequest} loginRequest Token Request Parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticationRequestToken: function authenticationRequestToken(loginRequest, options) {
      return AuthenticationApiFp(configuration).authenticationRequestToken(loginRequest, options)(axios, basePath);
    }
  };
};
/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */


exports.AuthenticationApiFactory = AuthenticationApiFactory;

var AuthenticationApi = /*#__PURE__*/function (_BaseAPI5) {
  _inherits(AuthenticationApi, _BaseAPI5);

  var _super5 = _createSuper(AuthenticationApi);

  function AuthenticationApi() {
    _classCallCheck(this, AuthenticationApi);

    return _super5.apply(this, arguments);
  }

  _createClass(AuthenticationApi, [{
    key: "authenticationRequestToken",

    /**
     * 
     * @summary Returns a JWT (JSON Web Token).             
     * @param {LoginRequest} loginRequest Token Request Parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    value: function authenticationRequestToken(loginRequest, options) {
      return AuthenticationApiFp(this.configuration).authenticationRequestToken(loginRequest, options)(this.axios, this.basePath);
    }
  }]);

  return AuthenticationApi;
}(_base.BaseAPI);
/**
 * FeedsApi - axios parameter creator
 * @export
 */


exports.AuthenticationApi = AuthenticationApi;

var FeedsApiAxiosParamCreator = function FeedsApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary Gets the feed for the logged in user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedGetFeed: function feedGetFeed() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var localVarPath = "/api/feeds/v1";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * FeedsApi - functional programming interface
 * @export
 */


exports.FeedsApiAxiosParamCreator = FeedsApiAxiosParamCreator;

var FeedsApiFp = function FeedsApiFp(configuration) {
  return {
    /**
     * 
     * @summary Gets the feed for the logged in user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedGetFeed: function feedGetFeed(options) {
      var localVarAxiosArgs = FeedsApiAxiosParamCreator(configuration).feedGetFeed(options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * FeedsApi - factory interface
 * @export
 */


exports.FeedsApiFp = FeedsApiFp;

var FeedsApiFactory = function FeedsApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary Gets the feed for the logged in user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    feedGetFeed: function feedGetFeed(options) {
      return FeedsApiFp(configuration).feedGetFeed(options)(axios, basePath);
    }
  };
};
/**
 * FeedsApi - object-oriented interface
 * @export
 * @class FeedsApi
 * @extends {BaseAPI}
 */


exports.FeedsApiFactory = FeedsApiFactory;

var FeedsApi = /*#__PURE__*/function (_BaseAPI6) {
  _inherits(FeedsApi, _BaseAPI6);

  var _super6 = _createSuper(FeedsApi);

  function FeedsApi() {
    _classCallCheck(this, FeedsApi);

    return _super6.apply(this, arguments);
  }

  _createClass(FeedsApi, [{
    key: "feedGetFeed",

    /**
     * 
     * @summary Gets the feed for the logged in user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    value: function feedGetFeed(options) {
      return FeedsApiFp(this.configuration).feedGetFeed(options)(this.axios, this.basePath);
    }
  }]);

  return FeedsApi;
}(_base.BaseAPI);
/**
 * GeoApi - axios parameter creator
 * @export
 */


exports.FeedsApi = FeedsApi;

var GeoApiAxiosParamCreator = function GeoApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary Executes a fuzzy location search.
     * @param {string} [query] Search Text.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    geoLookupLocation: function geoLookupLocation(query) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var localVarPath = "/api/geo/search/fuzzy";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (query !== undefined) {
        localVarQueryParameter['query'] = query;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * GeoApi - functional programming interface
 * @export
 */


exports.GeoApiAxiosParamCreator = GeoApiAxiosParamCreator;

var GeoApiFp = function GeoApiFp(configuration) {
  return {
    /**
     * 
     * @summary Executes a fuzzy location search.
     * @param {string} [query] Search Text.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    geoLookupLocation: function geoLookupLocation(query, options) {
      var localVarAxiosArgs = GeoApiAxiosParamCreator(configuration).geoLookupLocation(query, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * GeoApi - factory interface
 * @export
 */


exports.GeoApiFp = GeoApiFp;

var GeoApiFactory = function GeoApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary Executes a fuzzy location search.
     * @param {string} [query] Search Text.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    geoLookupLocation: function geoLookupLocation(query, options) {
      return GeoApiFp(configuration).geoLookupLocation(query, options)(axios, basePath);
    }
  };
};
/**
 * GeoApi - object-oriented interface
 * @export
 * @class GeoApi
 * @extends {BaseAPI}
 */


exports.GeoApiFactory = GeoApiFactory;

var GeoApi = /*#__PURE__*/function (_BaseAPI7) {
  _inherits(GeoApi, _BaseAPI7);

  var _super7 = _createSuper(GeoApi);

  function GeoApi() {
    _classCallCheck(this, GeoApi);

    return _super7.apply(this, arguments);
  }

  _createClass(GeoApi, [{
    key: "geoLookupLocation",

    /**
     * 
     * @summary Executes a fuzzy location search.
     * @param {string} [query] Search Text.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeoApi
     */
    value: function geoLookupLocation(query, options) {
      return GeoApiFp(this.configuration).geoLookupLocation(query, options)(this.axios, this.basePath);
    }
  }]);

  return GeoApi;
}(_base.BaseAPI);
/**
 * IdentityApi - axios parameter creator
 * @export
 */


exports.GeoApi = GeoApi;

var IdentityApiAxiosParamCreator = function IdentityApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identityGet: function identityGet() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var localVarPath = "/identity";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * IdentityApi - functional programming interface
 * @export
 */


exports.IdentityApiAxiosParamCreator = IdentityApiAxiosParamCreator;

var IdentityApiFp = function IdentityApiFp(configuration) {
  return {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identityGet: function identityGet(options) {
      var localVarAxiosArgs = IdentityApiAxiosParamCreator(configuration).identityGet(options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * IdentityApi - factory interface
 * @export
 */


exports.IdentityApiFp = IdentityApiFp;

var IdentityApiFactory = function IdentityApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identityGet: function identityGet(options) {
      return IdentityApiFp(configuration).identityGet(options)(axios, basePath);
    }
  };
};
/**
 * IdentityApi - object-oriented interface
 * @export
 * @class IdentityApi
 * @extends {BaseAPI}
 */


exports.IdentityApiFactory = IdentityApiFactory;

var IdentityApi = /*#__PURE__*/function (_BaseAPI8) {
  _inherits(IdentityApi, _BaseAPI8);

  var _super8 = _createSuper(IdentityApi);

  function IdentityApi() {
    _classCallCheck(this, IdentityApi);

    return _super8.apply(this, arguments);
  }

  _createClass(IdentityApi, [{
    key: "identityGet",

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    value: function identityGet(options) {
      return IdentityApiFp(this.configuration).identityGet(options)(this.axios, this.basePath);
    }
  }]);

  return IdentityApi;
}(_base.BaseAPI);
/**
 * InvitationsApi - axios parameter creator
 * @export
 */


exports.IdentityApi = IdentityApi;

var InvitationsApiAxiosParamCreator = function InvitationsApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary Accepts or rejects an invitation sent to the user.
     * @param {string} orgId Organisation to accept invitation for.
     * @param {HandleInvitation} handleInvitation Invitation information to accept or reject.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invitationsAcceptInvitation: function invitationsAcceptInvitation(orgId, handleInvitation) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'orgId' is not null or undefined
      if (orgId === null || orgId === undefined) {
        throw new _base.RequiredError('orgId', 'Required parameter orgId was null or undefined when calling invitationsAcceptInvitation.');
      } // verify required parameter 'handleInvitation' is not null or undefined


      if (handleInvitation === null || handleInvitation === undefined) {
        throw new _base.RequiredError('handleInvitation', 'Required parameter handleInvitation was null or undefined when calling invitationsAcceptInvitation.');
      }

      var localVarPath = "/api/invitations/{orgId}".replace("{".concat("orgId", "}"), encodeURIComponent(String(orgId)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof handleInvitation !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(handleInvitation !== undefined ? handleInvitation : {}) : handleInvitation || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Invite a new email address to Amphora Data.
     * @param {Invitation} invitation Invitation details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invitationsInviteNewUser: function invitationsInviteNewUser(invitation) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'invitation' is not null or undefined
      if (invitation === null || invitation === undefined) {
        throw new _base.RequiredError('invitation', 'Required parameter invitation was null or undefined when calling invitationsInviteNewUser.');
      }

      var localVarPath = "/api/invitations";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof invitation !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(invitation !== undefined ? invitation : {}) : invitation || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Returns all the invitations sent to me.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invitationsReadMyInvitations: function invitationsReadMyInvitations() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var localVarPath = "/api/invitations";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * InvitationsApi - functional programming interface
 * @export
 */


exports.InvitationsApiAxiosParamCreator = InvitationsApiAxiosParamCreator;

var InvitationsApiFp = function InvitationsApiFp(configuration) {
  return {
    /**
     * 
     * @summary Accepts or rejects an invitation sent to the user.
     * @param {string} orgId Organisation to accept invitation for.
     * @param {HandleInvitation} handleInvitation Invitation information to accept or reject.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invitationsAcceptInvitation: function invitationsAcceptInvitation(orgId, handleInvitation, options) {
      var localVarAxiosArgs = InvitationsApiAxiosParamCreator(configuration).invitationsAcceptInvitation(orgId, handleInvitation, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Invite a new email address to Amphora Data.
     * @param {Invitation} invitation Invitation details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invitationsInviteNewUser: function invitationsInviteNewUser(invitation, options) {
      var localVarAxiosArgs = InvitationsApiAxiosParamCreator(configuration).invitationsInviteNewUser(invitation, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Returns all the invitations sent to me.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invitationsReadMyInvitations: function invitationsReadMyInvitations(options) {
      var localVarAxiosArgs = InvitationsApiAxiosParamCreator(configuration).invitationsReadMyInvitations(options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * InvitationsApi - factory interface
 * @export
 */


exports.InvitationsApiFp = InvitationsApiFp;

var InvitationsApiFactory = function InvitationsApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary Accepts or rejects an invitation sent to the user.
     * @param {string} orgId Organisation to accept invitation for.
     * @param {HandleInvitation} handleInvitation Invitation information to accept or reject.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invitationsAcceptInvitation: function invitationsAcceptInvitation(orgId, handleInvitation, options) {
      return InvitationsApiFp(configuration).invitationsAcceptInvitation(orgId, handleInvitation, options)(axios, basePath);
    },

    /**
     * 
     * @summary Invite a new email address to Amphora Data.
     * @param {Invitation} invitation Invitation details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invitationsInviteNewUser: function invitationsInviteNewUser(invitation, options) {
      return InvitationsApiFp(configuration).invitationsInviteNewUser(invitation, options)(axios, basePath);
    },

    /**
     * 
     * @summary Returns all the invitations sent to me.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invitationsReadMyInvitations: function invitationsReadMyInvitations(options) {
      return InvitationsApiFp(configuration).invitationsReadMyInvitations(options)(axios, basePath);
    }
  };
};
/**
 * InvitationsApi - object-oriented interface
 * @export
 * @class InvitationsApi
 * @extends {BaseAPI}
 */


exports.InvitationsApiFactory = InvitationsApiFactory;

var InvitationsApi = /*#__PURE__*/function (_BaseAPI9) {
  _inherits(InvitationsApi, _BaseAPI9);

  var _super9 = _createSuper(InvitationsApi);

  function InvitationsApi() {
    _classCallCheck(this, InvitationsApi);

    return _super9.apply(this, arguments);
  }

  _createClass(InvitationsApi, [{
    key: "invitationsAcceptInvitation",

    /**
     * 
     * @summary Accepts or rejects an invitation sent to the user.
     * @param {string} orgId Organisation to accept invitation for.
     * @param {HandleInvitation} handleInvitation Invitation information to accept or reject.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */
    value: function invitationsAcceptInvitation(orgId, handleInvitation, options) {
      return InvitationsApiFp(this.configuration).invitationsAcceptInvitation(orgId, handleInvitation, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Invite a new email address to Amphora Data.
     * @param {Invitation} invitation Invitation details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */

  }, {
    key: "invitationsInviteNewUser",
    value: function invitationsInviteNewUser(invitation, options) {
      return InvitationsApiFp(this.configuration).invitationsInviteNewUser(invitation, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Returns all the invitations sent to me.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationsApi
     */

  }, {
    key: "invitationsReadMyInvitations",
    value: function invitationsReadMyInvitations(options) {
      return InvitationsApiFp(this.configuration).invitationsReadMyInvitations(options)(this.axios, this.basePath);
    }
  }]);

  return InvitationsApi;
}(_base.BaseAPI);
/**
 * OrganisationsApi - axios parameter creator
 * @export
 */


exports.InvitationsApi = InvitationsApi;

var OrganisationsApiAxiosParamCreator = function OrganisationsApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead: function accountRead(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling accountRead.');
      }

      var localVarPath = "/api/Organisations/{id}/Account".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead2: function accountRead2(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling accountRead2.');
      }

      var localVarPath = "/api/Account".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Creates a new Organisation. This will assign the logged in user to the organisation.
     * @param {Organisation} organisation Information of the new Organisation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsCreate: function organisationsCreate(organisation) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'organisation' is not null or undefined
      if (organisation === null || organisation === undefined) {
        throw new _base.RequiredError('organisation', 'Required parameter organisation was null or undefined when calling organisationsCreate.');
      }

      var localVarPath = "/api/Organisations";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof organisation !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(organisation !== undefined ? organisation : {}) : organisation || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Deletes an organisation.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsDelete: function organisationsDelete(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling organisationsDelete.');
      }

      var localVarPath = "/api/Organisations/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'DELETE'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets an organisation\'s details.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsRead: function organisationsRead(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling organisationsRead.');
      }

      var localVarPath = "/api/Organisations/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets an organisation\'s invitations.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsReadInvitations: function organisationsReadInvitations(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling organisationsReadInvitations.');
      }

      var localVarPath = "/api/Organisations/{id}/Invitations".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets a list of an Organisation\'s Terms of Use.
     * @param {string} id The Id of the Organisation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsTermsOfUseRead: function organisationsTermsOfUseRead(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling organisationsTermsOfUseRead.');
      }

      var localVarPath = "/api/Organisations/{id}/TermsOfUse".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Updates an organisation.
     * @param {string} id Organisation Id.
     * @param {Organisation} organisation Organisation Information. All fields are updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsUpdate: function organisationsUpdate(id, organisation) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling organisationsUpdate.');
      } // verify required parameter 'organisation' is not null or undefined


      if (organisation === null || organisation === undefined) {
        throw new _base.RequiredError('organisation', 'Required parameter organisation was null or undefined when calling organisationsUpdate.');
      }

      var localVarPath = "/api/Organisations/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'PUT'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof organisation !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(organisation !== undefined ? organisation : {}) : organisation || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets an Organisation\'s plan information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planGetPlan: function planGetPlan() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var localVarPath = "/api/Account/Plan";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Set\'s an Organisation\'s plan.
     * @param {string} [planType] The Plan Type. Should be PAYG or Glaze.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planSetPlan: function planSetPlan(planType) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var localVarPath = "/api/Account/Plan";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (planType !== undefined) {
        localVarQueryParameter['planType'] = planType;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * OrganisationsApi - functional programming interface
 * @export
 */


exports.OrganisationsApiAxiosParamCreator = OrganisationsApiAxiosParamCreator;

var OrganisationsApiFp = function OrganisationsApiFp(configuration) {
  return {
    /**
     * 
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead: function accountRead(id, options) {
      var localVarAxiosArgs = OrganisationsApiAxiosParamCreator(configuration).accountRead(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead2: function accountRead2(id, options) {
      var localVarAxiosArgs = OrganisationsApiAxiosParamCreator(configuration).accountRead2(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Creates a new Organisation. This will assign the logged in user to the organisation.
     * @param {Organisation} organisation Information of the new Organisation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsCreate: function organisationsCreate(organisation, options) {
      var localVarAxiosArgs = OrganisationsApiAxiosParamCreator(configuration).organisationsCreate(organisation, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Deletes an organisation.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsDelete: function organisationsDelete(id, options) {
      var localVarAxiosArgs = OrganisationsApiAxiosParamCreator(configuration).organisationsDelete(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets an organisation\'s details.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsRead: function organisationsRead(id, options) {
      var localVarAxiosArgs = OrganisationsApiAxiosParamCreator(configuration).organisationsRead(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets an organisation\'s invitations.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsReadInvitations: function organisationsReadInvitations(id, options) {
      var localVarAxiosArgs = OrganisationsApiAxiosParamCreator(configuration).organisationsReadInvitations(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets a list of an Organisation\'s Terms of Use.
     * @param {string} id The Id of the Organisation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsTermsOfUseRead: function organisationsTermsOfUseRead(id, options) {
      var localVarAxiosArgs = OrganisationsApiAxiosParamCreator(configuration).organisationsTermsOfUseRead(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Updates an organisation.
     * @param {string} id Organisation Id.
     * @param {Organisation} organisation Organisation Information. All fields are updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsUpdate: function organisationsUpdate(id, organisation, options) {
      var localVarAxiosArgs = OrganisationsApiAxiosParamCreator(configuration).organisationsUpdate(id, organisation, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets an Organisation\'s plan information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planGetPlan: function planGetPlan(options) {
      var localVarAxiosArgs = OrganisationsApiAxiosParamCreator(configuration).planGetPlan(options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Set\'s an Organisation\'s plan.
     * @param {string} [planType] The Plan Type. Should be PAYG or Glaze.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planSetPlan: function planSetPlan(planType, options) {
      var localVarAxiosArgs = OrganisationsApiAxiosParamCreator(configuration).planSetPlan(planType, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * OrganisationsApi - factory interface
 * @export
 */


exports.OrganisationsApiFp = OrganisationsApiFp;

var OrganisationsApiFactory = function OrganisationsApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead: function accountRead(id, options) {
      return OrganisationsApiFp(configuration).accountRead(id, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead2: function accountRead2(id, options) {
      return OrganisationsApiFp(configuration).accountRead2(id, options)(axios, basePath);
    },

    /**
     * 
     * @summary Creates a new Organisation. This will assign the logged in user to the organisation.
     * @param {Organisation} organisation Information of the new Organisation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsCreate: function organisationsCreate(organisation, options) {
      return OrganisationsApiFp(configuration).organisationsCreate(organisation, options)(axios, basePath);
    },

    /**
     * 
     * @summary Deletes an organisation.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsDelete: function organisationsDelete(id, options) {
      return OrganisationsApiFp(configuration).organisationsDelete(id, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets an organisation\'s details.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsRead: function organisationsRead(id, options) {
      return OrganisationsApiFp(configuration).organisationsRead(id, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets an organisation\'s invitations.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsReadInvitations: function organisationsReadInvitations(id, options) {
      return OrganisationsApiFp(configuration).organisationsReadInvitations(id, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets a list of an Organisation\'s Terms of Use.
     * @param {string} id The Id of the Organisation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsTermsOfUseRead: function organisationsTermsOfUseRead(id, options) {
      return OrganisationsApiFp(configuration).organisationsTermsOfUseRead(id, options)(axios, basePath);
    },

    /**
     * 
     * @summary Updates an organisation.
     * @param {string} id Organisation Id.
     * @param {Organisation} organisation Organisation Information. All fields are updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsUpdate: function organisationsUpdate(id, organisation, options) {
      return OrganisationsApiFp(configuration).organisationsUpdate(id, organisation, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets an Organisation\'s plan information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planGetPlan: function planGetPlan(options) {
      return OrganisationsApiFp(configuration).planGetPlan(options)(axios, basePath);
    },

    /**
     * 
     * @summary Set\'s an Organisation\'s plan.
     * @param {string} [planType] The Plan Type. Should be PAYG or Glaze.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    planSetPlan: function planSetPlan(planType, options) {
      return OrganisationsApiFp(configuration).planSetPlan(planType, options)(axios, basePath);
    }
  };
};
/**
 * OrganisationsApi - object-oriented interface
 * @export
 * @class OrganisationsApi
 * @extends {BaseAPI}
 */


exports.OrganisationsApiFactory = OrganisationsApiFactory;

var OrganisationsApi = /*#__PURE__*/function (_BaseAPI10) {
  _inherits(OrganisationsApi, _BaseAPI10);

  var _super10 = _createSuper(OrganisationsApi);

  function OrganisationsApi() {
    _classCallCheck(this, OrganisationsApi);

    return _super10.apply(this, arguments);
  }

  _createClass(OrganisationsApi, [{
    key: "accountRead",

    /**
     * 
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    value: function accountRead(id, options) {
      return OrganisationsApiFp(this.configuration).accountRead(id, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */

  }, {
    key: "accountRead2",
    value: function accountRead2(id, options) {
      return OrganisationsApiFp(this.configuration).accountRead2(id, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Creates a new Organisation. This will assign the logged in user to the organisation.
     * @param {Organisation} organisation Information of the new Organisation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */

  }, {
    key: "organisationsCreate",
    value: function organisationsCreate(organisation, options) {
      return OrganisationsApiFp(this.configuration).organisationsCreate(organisation, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Deletes an organisation.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */

  }, {
    key: "organisationsDelete",
    value: function organisationsDelete(id, options) {
      return OrganisationsApiFp(this.configuration).organisationsDelete(id, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets an organisation\'s details.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */

  }, {
    key: "organisationsRead",
    value: function organisationsRead(id, options) {
      return OrganisationsApiFp(this.configuration).organisationsRead(id, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets an organisation\'s invitations.
     * @param {string} id Organisation Id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */

  }, {
    key: "organisationsReadInvitations",
    value: function organisationsReadInvitations(id, options) {
      return OrganisationsApiFp(this.configuration).organisationsReadInvitations(id, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets a list of an Organisation\'s Terms of Use.
     * @param {string} id The Id of the Organisation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */

  }, {
    key: "organisationsTermsOfUseRead",
    value: function organisationsTermsOfUseRead(id, options) {
      return OrganisationsApiFp(this.configuration).organisationsTermsOfUseRead(id, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Updates an organisation.
     * @param {string} id Organisation Id.
     * @param {Organisation} organisation Organisation Information. All fields are updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */

  }, {
    key: "organisationsUpdate",
    value: function organisationsUpdate(id, organisation, options) {
      return OrganisationsApiFp(this.configuration).organisationsUpdate(id, organisation, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets an Organisation\'s plan information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */

  }, {
    key: "planGetPlan",
    value: function planGetPlan(options) {
      return OrganisationsApiFp(this.configuration).planGetPlan(options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Set\'s an Organisation\'s plan.
     * @param {string} [planType] The Plan Type. Should be PAYG or Glaze.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */

  }, {
    key: "planSetPlan",
    value: function planSetPlan(planType, options) {
      return OrganisationsApiFp(this.configuration).planSetPlan(planType, options)(this.axios, this.basePath);
    }
  }]);

  return OrganisationsApi;
}(_base.BaseAPI);
/**
 * PermissionApi - axios parameter creator
 * @export
 */


exports.OrganisationsApi = OrganisationsApi;

var PermissionApiAxiosParamCreator = function PermissionApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary The permission level for each object id in the request.
     * @param {PermissionsRequest} permissionsRequest A request object containing the list of ids to check.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permissionGetPermissions: function permissionGetPermissions(permissionsRequest) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'permissionsRequest' is not null or undefined
      if (permissionsRequest === null || permissionsRequest === undefined) {
        throw new _base.RequiredError('permissionsRequest', 'Required parameter permissionsRequest was null or undefined when calling permissionGetPermissions.');
      }

      var localVarPath = "/api/permissions";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof permissionsRequest !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(permissionsRequest !== undefined ? permissionsRequest : {}) : permissionsRequest || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * PermissionApi - functional programming interface
 * @export
 */


exports.PermissionApiAxiosParamCreator = PermissionApiAxiosParamCreator;

var PermissionApiFp = function PermissionApiFp(configuration) {
  return {
    /**
     * 
     * @summary The permission level for each object id in the request.
     * @param {PermissionsRequest} permissionsRequest A request object containing the list of ids to check.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permissionGetPermissions: function permissionGetPermissions(permissionsRequest, options) {
      var localVarAxiosArgs = PermissionApiAxiosParamCreator(configuration).permissionGetPermissions(permissionsRequest, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * PermissionApi - factory interface
 * @export
 */


exports.PermissionApiFp = PermissionApiFp;

var PermissionApiFactory = function PermissionApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary The permission level for each object id in the request.
     * @param {PermissionsRequest} permissionsRequest A request object containing the list of ids to check.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permissionGetPermissions: function permissionGetPermissions(permissionsRequest, options) {
      return PermissionApiFp(configuration).permissionGetPermissions(permissionsRequest, options)(axios, basePath);
    }
  };
};
/**
 * PermissionApi - object-oriented interface
 * @export
 * @class PermissionApi
 * @extends {BaseAPI}
 */


exports.PermissionApiFactory = PermissionApiFactory;

var PermissionApi = /*#__PURE__*/function (_BaseAPI11) {
  _inherits(PermissionApi, _BaseAPI11);

  var _super11 = _createSuper(PermissionApi);

  function PermissionApi() {
    _classCallCheck(this, PermissionApi);

    return _super11.apply(this, arguments);
  }

  _createClass(PermissionApi, [{
    key: "permissionGetPermissions",

    /**
     * 
     * @summary The permission level for each object id in the request.
     * @param {PermissionsRequest} permissionsRequest A request object containing the list of ids to check.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    value: function permissionGetPermissions(permissionsRequest, options) {
      return PermissionApiFp(this.configuration).permissionGetPermissions(permissionsRequest, options)(this.axios, this.basePath);
    }
  }]);

  return PermissionApi;
}(_base.BaseAPI);
/**
 * SearchApi - axios parameter creator
 * @export
 */


exports.PermissionApi = PermissionApi;

var SearchApiAxiosParamCreator = function SearchApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary Searches for Amphorae.
     * @param {string} [term] Gets or sets the free text search term.
     * @param {string} [labels] Gets or sets the comma separated labels that must be included in results.
     * @param {string} [orgId] Gets or sets the Organisation ID for the Amphora.
     * @param {number} [lat] Gets or sets the latitude (center of search area).
     * @param {number} [lon] Gets or sets the longitude (center of search area).
     * @param {number} [dist] Gets or sets the distance from center of search area (describing a circle).
     * @param {number} [take] Gets or sets how many items to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many items to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchAmphora: function searchSearchAmphora(term, labels, orgId, lat, lon, dist, take, skip) {
      var options = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : {};
      var localVarPath = "/api/search-v2/amphorae";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (term !== undefined) {
        localVarQueryParameter['Term'] = term;
      }

      if (labels !== undefined) {
        localVarQueryParameter['Labels'] = labels;
      }

      if (orgId !== undefined) {
        localVarQueryParameter['OrgId'] = orgId;
      }

      if (lat !== undefined) {
        localVarQueryParameter['Lat'] = lat;
      }

      if (lon !== undefined) {
        localVarQueryParameter['Lon'] = lon;
      }

      if (dist !== undefined) {
        localVarQueryParameter['Dist'] = dist;
      }

      if (take !== undefined) {
        localVarQueryParameter['Take'] = take;
      }

      if (skip !== undefined) {
        localVarQueryParameter['Skip'] = skip;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Searches for Organisations with fuzzy search.
     * @param {string} [term] Gets or sets the free text search term.
     * @param {number} [take] Gets or sets how many items to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many items to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchOrganisations: function searchSearchOrganisations(term, take, skip) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var localVarPath = "/api/search-v2/organisations";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (term !== undefined) {
        localVarQueryParameter['Term'] = term;
      }

      if (take !== undefined) {
        localVarQueryParameter['Take'] = take;
      }

      if (skip !== undefined) {
        localVarQueryParameter['Skip'] = skip;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * SearchApi - functional programming interface
 * @export
 */


exports.SearchApiAxiosParamCreator = SearchApiAxiosParamCreator;

var SearchApiFp = function SearchApiFp(configuration) {
  return {
    /**
     * 
     * @summary Searches for Amphorae.
     * @param {string} [term] Gets or sets the free text search term.
     * @param {string} [labels] Gets or sets the comma separated labels that must be included in results.
     * @param {string} [orgId] Gets or sets the Organisation ID for the Amphora.
     * @param {number} [lat] Gets or sets the latitude (center of search area).
     * @param {number} [lon] Gets or sets the longitude (center of search area).
     * @param {number} [dist] Gets or sets the distance from center of search area (describing a circle).
     * @param {number} [take] Gets or sets how many items to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many items to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchAmphora: function searchSearchAmphora(term, labels, orgId, lat, lon, dist, take, skip, options) {
      var localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchSearchAmphora(term, labels, orgId, lat, lon, dist, take, skip, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Searches for Organisations with fuzzy search.
     * @param {string} [term] Gets or sets the free text search term.
     * @param {number} [take] Gets or sets how many items to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many items to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchOrganisations: function searchSearchOrganisations(term, take, skip, options) {
      var localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchSearchOrganisations(term, take, skip, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * SearchApi - factory interface
 * @export
 */


exports.SearchApiFp = SearchApiFp;

var SearchApiFactory = function SearchApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary Searches for Amphorae.
     * @param {string} [term] Gets or sets the free text search term.
     * @param {string} [labels] Gets or sets the comma separated labels that must be included in results.
     * @param {string} [orgId] Gets or sets the Organisation ID for the Amphora.
     * @param {number} [lat] Gets or sets the latitude (center of search area).
     * @param {number} [lon] Gets or sets the longitude (center of search area).
     * @param {number} [dist] Gets or sets the distance from center of search area (describing a circle).
     * @param {number} [take] Gets or sets how many items to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many items to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchAmphora: function searchSearchAmphora(term, labels, orgId, lat, lon, dist, take, skip, options) {
      return SearchApiFp(configuration).searchSearchAmphora(term, labels, orgId, lat, lon, dist, take, skip, options)(axios, basePath);
    },

    /**
     * 
     * @summary Searches for Organisations with fuzzy search.
     * @param {string} [term] Gets or sets the free text search term.
     * @param {number} [take] Gets or sets how many items to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many items to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchOrganisations: function searchSearchOrganisations(term, take, skip, options) {
      return SearchApiFp(configuration).searchSearchOrganisations(term, take, skip, options)(axios, basePath);
    }
  };
};
/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */


exports.SearchApiFactory = SearchApiFactory;

var SearchApi = /*#__PURE__*/function (_BaseAPI12) {
  _inherits(SearchApi, _BaseAPI12);

  var _super12 = _createSuper(SearchApi);

  function SearchApi() {
    _classCallCheck(this, SearchApi);

    return _super12.apply(this, arguments);
  }

  _createClass(SearchApi, [{
    key: "searchSearchAmphora",

    /**
     * 
     * @summary Searches for Amphorae.
     * @param {string} [term] Gets or sets the free text search term.
     * @param {string} [labels] Gets or sets the comma separated labels that must be included in results.
     * @param {string} [orgId] Gets or sets the Organisation ID for the Amphora.
     * @param {number} [lat] Gets or sets the latitude (center of search area).
     * @param {number} [lon] Gets or sets the longitude (center of search area).
     * @param {number} [dist] Gets or sets the distance from center of search area (describing a circle).
     * @param {number} [take] Gets or sets how many items to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many items to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    value: function searchSearchAmphora(term, labels, orgId, lat, lon, dist, take, skip, options) {
      return SearchApiFp(this.configuration).searchSearchAmphora(term, labels, orgId, lat, lon, dist, take, skip, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Searches for Organisations with fuzzy search.
     * @param {string} [term] Gets or sets the free text search term.
     * @param {number} [take] Gets or sets how many items to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many items to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */

  }, {
    key: "searchSearchOrganisations",
    value: function searchSearchOrganisations(term, take, skip, options) {
      return SearchApiFp(this.configuration).searchSearchOrganisations(term, take, skip, options)(this.axios, this.basePath);
    }
  }]);

  return SearchApi;
}(_base.BaseAPI);
/**
 * TermsOfUseApi - axios parameter creator
 * @export
 */


exports.SearchApi = SearchApi;

var TermsOfUseApiAxiosParamCreator = function TermsOfUseApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary Accepts a Terms of Use.
     * @param {string} id The Terms of Use id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseAccept: function termsOfUseAccept(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling termsOfUseAccept.');
      }

      var localVarPath = "/api/TermsOfUse/{id}/Accepts".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Creates a Terms of Use object.
     * @param {CreateTermsOfUse} createTermsOfUse The terms of use to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseCreate: function termsOfUseCreate(createTermsOfUse) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'createTermsOfUse' is not null or undefined
      if (createTermsOfUse === null || createTermsOfUse === undefined) {
        throw new _base.RequiredError('createTermsOfUse', 'Required parameter createTermsOfUse was null or undefined when calling termsOfUseCreate.');
      }

      var localVarPath = "/api/TermsOfUse";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof createTermsOfUse !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(createTermsOfUse !== undefined ? createTermsOfUse : {}) : createTermsOfUse || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Deletes a Terms of Use object.
     * @param {string} id The terms of use id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseDelete: function termsOfUseDelete(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling termsOfUseDelete.');
      }

      var localVarPath = "/api/TermsOfUse/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'DELETE'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Returns all Terms of Use.
     * @param {number} [take] Gets or sets how many items to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many items to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseList: function termsOfUseList(take, skip) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var localVarPath = "/api/TermsOfUse";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (take !== undefined) {
        localVarQueryParameter['Take'] = take;
      }

      if (skip !== undefined) {
        localVarQueryParameter['Skip'] = skip;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Returns all Terms of Use.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseRead: function termsOfUseRead(id) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling termsOfUseRead.');
      }

      var localVarPath = "/api/TermsOfUse/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * TermsOfUseApi - functional programming interface
 * @export
 */


exports.TermsOfUseApiAxiosParamCreator = TermsOfUseApiAxiosParamCreator;

var TermsOfUseApiFp = function TermsOfUseApiFp(configuration) {
  return {
    /**
     * 
     * @summary Accepts a Terms of Use.
     * @param {string} id The Terms of Use id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseAccept: function termsOfUseAccept(id, options) {
      var localVarAxiosArgs = TermsOfUseApiAxiosParamCreator(configuration).termsOfUseAccept(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Creates a Terms of Use object.
     * @param {CreateTermsOfUse} createTermsOfUse The terms of use to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseCreate: function termsOfUseCreate(createTermsOfUse, options) {
      var localVarAxiosArgs = TermsOfUseApiAxiosParamCreator(configuration).termsOfUseCreate(createTermsOfUse, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Deletes a Terms of Use object.
     * @param {string} id The terms of use id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseDelete: function termsOfUseDelete(id, options) {
      var localVarAxiosArgs = TermsOfUseApiAxiosParamCreator(configuration).termsOfUseDelete(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Returns all Terms of Use.
     * @param {number} [take] Gets or sets how many items to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many items to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseList: function termsOfUseList(take, skip, options) {
      var localVarAxiosArgs = TermsOfUseApiAxiosParamCreator(configuration).termsOfUseList(take, skip, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Returns all Terms of Use.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseRead: function termsOfUseRead(id, options) {
      var localVarAxiosArgs = TermsOfUseApiAxiosParamCreator(configuration).termsOfUseRead(id, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * TermsOfUseApi - factory interface
 * @export
 */


exports.TermsOfUseApiFp = TermsOfUseApiFp;

var TermsOfUseApiFactory = function TermsOfUseApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary Accepts a Terms of Use.
     * @param {string} id The Terms of Use id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseAccept: function termsOfUseAccept(id, options) {
      return TermsOfUseApiFp(configuration).termsOfUseAccept(id, options)(axios, basePath);
    },

    /**
     * 
     * @summary Creates a Terms of Use object.
     * @param {CreateTermsOfUse} createTermsOfUse The terms of use to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseCreate: function termsOfUseCreate(createTermsOfUse, options) {
      return TermsOfUseApiFp(configuration).termsOfUseCreate(createTermsOfUse, options)(axios, basePath);
    },

    /**
     * 
     * @summary Deletes a Terms of Use object.
     * @param {string} id The terms of use id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseDelete: function termsOfUseDelete(id, options) {
      return TermsOfUseApiFp(configuration).termsOfUseDelete(id, options)(axios, basePath);
    },

    /**
     * 
     * @summary Returns all Terms of Use.
     * @param {number} [take] Gets or sets how many items to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many items to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseList: function termsOfUseList(take, skip, options) {
      return TermsOfUseApiFp(configuration).termsOfUseList(take, skip, options)(axios, basePath);
    },

    /**
     * 
     * @summary Returns all Terms of Use.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseRead: function termsOfUseRead(id, options) {
      return TermsOfUseApiFp(configuration).termsOfUseRead(id, options)(axios, basePath);
    }
  };
};
/**
 * TermsOfUseApi - object-oriented interface
 * @export
 * @class TermsOfUseApi
 * @extends {BaseAPI}
 */


exports.TermsOfUseApiFactory = TermsOfUseApiFactory;

var TermsOfUseApi = /*#__PURE__*/function (_BaseAPI13) {
  _inherits(TermsOfUseApi, _BaseAPI13);

  var _super13 = _createSuper(TermsOfUseApi);

  function TermsOfUseApi() {
    _classCallCheck(this, TermsOfUseApi);

    return _super13.apply(this, arguments);
  }

  _createClass(TermsOfUseApi, [{
    key: "termsOfUseAccept",

    /**
     * 
     * @summary Accepts a Terms of Use.
     * @param {string} id The Terms of Use id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsOfUseApi
     */
    value: function termsOfUseAccept(id, options) {
      return TermsOfUseApiFp(this.configuration).termsOfUseAccept(id, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Creates a Terms of Use object.
     * @param {CreateTermsOfUse} createTermsOfUse The terms of use to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsOfUseApi
     */

  }, {
    key: "termsOfUseCreate",
    value: function termsOfUseCreate(createTermsOfUse, options) {
      return TermsOfUseApiFp(this.configuration).termsOfUseCreate(createTermsOfUse, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Deletes a Terms of Use object.
     * @param {string} id The terms of use id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsOfUseApi
     */

  }, {
    key: "termsOfUseDelete",
    value: function termsOfUseDelete(id, options) {
      return TermsOfUseApiFp(this.configuration).termsOfUseDelete(id, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Returns all Terms of Use.
     * @param {number} [take] Gets or sets how many items to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many items to skip before returning. Defaults to 0.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsOfUseApi
     */

  }, {
    key: "termsOfUseList",
    value: function termsOfUseList(take, skip, options) {
      return TermsOfUseApiFp(this.configuration).termsOfUseList(take, skip, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Returns all Terms of Use.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsOfUseApi
     */

  }, {
    key: "termsOfUseRead",
    value: function termsOfUseRead(id, options) {
      return TermsOfUseApiFp(this.configuration).termsOfUseRead(id, options)(this.axios, this.basePath);
    }
  }]);

  return TermsOfUseApi;
}(_base.BaseAPI);
/**
 * TimeSeriesApi - axios parameter creator
 * @export
 */


exports.TermsOfUseApi = TermsOfUseApi;

var TimeSeriesApiAxiosParamCreator = function TimeSeriesApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary Updates the details of an Amphora by Id.
     * @param {QueryRequest} queryRequest Time Series query. See https://github.com/microsoft/tsiclient/blob/master/docs/Server.md#functions .
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    timeSeriesQueryTimeSeries: function timeSeriesQueryTimeSeries(queryRequest) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'queryRequest' is not null or undefined
      if (queryRequest === null || queryRequest === undefined) {
        throw new _base.RequiredError('queryRequest', 'Required parameter queryRequest was null or undefined when calling timeSeriesQueryTimeSeries.');
      }

      var localVarPath = "/api/timeseries/query";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof queryRequest !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(queryRequest !== undefined ? queryRequest : {}) : queryRequest || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * TimeSeriesApi - functional programming interface
 * @export
 */


exports.TimeSeriesApiAxiosParamCreator = TimeSeriesApiAxiosParamCreator;

var TimeSeriesApiFp = function TimeSeriesApiFp(configuration) {
  return {
    /**
     * 
     * @summary Updates the details of an Amphora by Id.
     * @param {QueryRequest} queryRequest Time Series query. See https://github.com/microsoft/tsiclient/blob/master/docs/Server.md#functions .
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    timeSeriesQueryTimeSeries: function timeSeriesQueryTimeSeries(queryRequest, options) {
      var localVarAxiosArgs = TimeSeriesApiAxiosParamCreator(configuration).timeSeriesQueryTimeSeries(queryRequest, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * TimeSeriesApi - factory interface
 * @export
 */


exports.TimeSeriesApiFp = TimeSeriesApiFp;

var TimeSeriesApiFactory = function TimeSeriesApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary Updates the details of an Amphora by Id.
     * @param {QueryRequest} queryRequest Time Series query. See https://github.com/microsoft/tsiclient/blob/master/docs/Server.md#functions .
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    timeSeriesQueryTimeSeries: function timeSeriesQueryTimeSeries(queryRequest, options) {
      return TimeSeriesApiFp(configuration).timeSeriesQueryTimeSeries(queryRequest, options)(axios, basePath);
    }
  };
};
/**
 * TimeSeriesApi - object-oriented interface
 * @export
 * @class TimeSeriesApi
 * @extends {BaseAPI}
 */


exports.TimeSeriesApiFactory = TimeSeriesApiFactory;

var TimeSeriesApi = /*#__PURE__*/function (_BaseAPI14) {
  _inherits(TimeSeriesApi, _BaseAPI14);

  var _super14 = _createSuper(TimeSeriesApi);

  function TimeSeriesApi() {
    _classCallCheck(this, TimeSeriesApi);

    return _super14.apply(this, arguments);
  }

  _createClass(TimeSeriesApi, [{
    key: "timeSeriesQueryTimeSeries",

    /**
     * 
     * @summary Updates the details of an Amphora by Id.
     * @param {QueryRequest} queryRequest Time Series query. See https://github.com/microsoft/tsiclient/blob/master/docs/Server.md#functions .
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeSeriesApi
     */
    value: function timeSeriesQueryTimeSeries(queryRequest, options) {
      return TimeSeriesApiFp(this.configuration).timeSeriesQueryTimeSeries(queryRequest, options)(this.axios, this.basePath);
    }
  }]);

  return TimeSeriesApi;
}(_base.BaseAPI);
/**
 * UsersApi - axios parameter creator
 * @export
 */


exports.TimeSeriesApi = TimeSeriesApi;

var UsersApiAxiosParamCreator = function UsersApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary Creates a new User. Returns the password.
     * @param {CreateAmphoraUser} createAmphoraUser User parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCreate: function usersCreate(createAmphoraUser) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // verify required parameter 'createAmphoraUser' is not null or undefined
      if (createAmphoraUser === null || createAmphoraUser === undefined) {
        throw new _base.RequiredError('createAmphoraUser', 'Required parameter createAmphoraUser was null or undefined when calling usersCreate.');
      }

      var localVarPath = "/api/users";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'POST'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      var needsSerialization = typeof createAmphoraUser !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(createAmphoraUser !== undefined ? createAmphoraUser : {}) : createAmphoraUser || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets logged in users information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersReadSelf: function usersReadSelf() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var localVarPath = "/api/users/self";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * UsersApi - functional programming interface
 * @export
 */


exports.UsersApiAxiosParamCreator = UsersApiAxiosParamCreator;

var UsersApiFp = function UsersApiFp(configuration) {
  return {
    /**
     * 
     * @summary Creates a new User. Returns the password.
     * @param {CreateAmphoraUser} createAmphoraUser User parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCreate: function usersCreate(createAmphoraUser, options) {
      var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).usersCreate(createAmphoraUser, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets logged in users information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersReadSelf: function usersReadSelf(options) {
      var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).usersReadSelf(options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * UsersApi - factory interface
 * @export
 */


exports.UsersApiFp = UsersApiFp;

var UsersApiFactory = function UsersApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary Creates a new User. Returns the password.
     * @param {CreateAmphoraUser} createAmphoraUser User parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCreate: function usersCreate(createAmphoraUser, options) {
      return UsersApiFp(configuration).usersCreate(createAmphoraUser, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets logged in users information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersReadSelf: function usersReadSelf(options) {
      return UsersApiFp(configuration).usersReadSelf(options)(axios, basePath);
    }
  };
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */


exports.UsersApiFactory = UsersApiFactory;

var UsersApi = /*#__PURE__*/function (_BaseAPI15) {
  _inherits(UsersApi, _BaseAPI15);

  var _super15 = _createSuper(UsersApi);

  function UsersApi() {
    _classCallCheck(this, UsersApi);

    return _super15.apply(this, arguments);
  }

  _createClass(UsersApi, [{
    key: "usersCreate",

    /**
     * 
     * @summary Creates a new User. Returns the password.
     * @param {CreateAmphoraUser} createAmphoraUser User parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    value: function usersCreate(createAmphoraUser, options) {
      return UsersApiFp(this.configuration).usersCreate(createAmphoraUser, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets logged in users information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */

  }, {
    key: "usersReadSelf",
    value: function usersReadSelf(options) {
      return UsersApiFp(this.configuration).usersReadSelf(options)(this.axios, this.basePath);
    }
  }]);

  return UsersApi;
}(_base.BaseAPI);
/**
 * VersionApi - axios parameter creator
 * @export
 */


exports.UsersApi = UsersApi;

var VersionApiAxiosParamCreator = function VersionApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary Gets the current server version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionGetCurrentVersion: function versionGetCurrentVersion() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var localVarPath = "/api/version";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread(_objectSpread({
        method: 'GET'
      }, baseOptions), options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      localVarUrlObj.query = _objectSpread(_objectSpread(_objectSpread({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread(_objectSpread({}, localVarHeaderParameter), options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * VersionApi - functional programming interface
 * @export
 */


exports.VersionApiAxiosParamCreator = VersionApiAxiosParamCreator;

var VersionApiFp = function VersionApiFp(configuration) {
  return {
    /**
     * 
     * @summary Gets the current server version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionGetCurrentVersion: function versionGetCurrentVersion(options) {
      var localVarAxiosArgs = VersionApiAxiosParamCreator(configuration).versionGetCurrentVersion(options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread(_objectSpread({}, localVarAxiosArgs.options), {}, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * VersionApi - factory interface
 * @export
 */


exports.VersionApiFp = VersionApiFp;

var VersionApiFactory = function VersionApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary Gets the current server version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionGetCurrentVersion: function versionGetCurrentVersion(options) {
      return VersionApiFp(configuration).versionGetCurrentVersion(options)(axios, basePath);
    }
  };
};
/**
 * VersionApi - object-oriented interface
 * @export
 * @class VersionApi
 * @extends {BaseAPI}
 */


exports.VersionApiFactory = VersionApiFactory;

var VersionApi = /*#__PURE__*/function (_BaseAPI16) {
  _inherits(VersionApi, _BaseAPI16);

  var _super16 = _createSuper(VersionApi);

  function VersionApi() {
    _classCallCheck(this, VersionApi);

    return _super16.apply(this, arguments);
  }

  _createClass(VersionApi, [{
    key: "versionGetCurrentVersion",

    /**
     * 
     * @summary Gets the current server version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionApi
     */
    value: function versionGetCurrentVersion(options) {
      return VersionApiFp(this.configuration).versionGetCurrentVersion(options)(this.axios, this.basePath);
    }
  }]);

  return VersionApi;
}(_base.BaseAPI);

exports.VersionApi = VersionApi;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3Nkay9hcGkudHMiXSwibmFtZXMiOlsiUGxhblR5cGVzIiwiUG9zdEV2ZW50VHlwZSIsIlBvc3RTdWJqZWN0VHlwZSIsIkFjY291bnRBcGlBeGlvc1BhcmFtQ3JlYXRvciIsImNvbmZpZ3VyYXRpb24iLCJhY2NvdW50SW52aXRhdGlvbnNJbnZpdGF0aW9ucyIsImlkIiwib3B0aW9ucyIsImxvY2FsVmFyUGF0aCIsImxvY2FsVmFyVXJsT2JqIiwiZ2xvYmFsSW1wb3J0VXJsIiwicGFyc2UiLCJiYXNlT3B0aW9ucyIsImxvY2FsVmFyUmVxdWVzdE9wdGlvbnMiLCJtZXRob2QiLCJsb2NhbFZhckhlYWRlclBhcmFtZXRlciIsImxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIiLCJhcGlLZXkiLCJsb2NhbFZhckFwaUtleVZhbHVlIiwidW5kZWZpbmVkIiwicXVlcnkiLCJzZWFyY2giLCJoZWFkZXJzIiwidXJsIiwiZm9ybWF0IiwiYWNjb3VudFJlYWQiLCJSZXF1aXJlZEVycm9yIiwicmVwbGFjZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIlN0cmluZyIsImFjY291bnRSZWFkMiIsImludm9pY2VzQ3JlYXRlSW52b2ljZSIsImNyZWF0ZUludm9pY2UiLCJuZWVkc1NlcmlhbGl6YXRpb24iLCJkYXRhIiwiSlNPTiIsInN0cmluZ2lmeSIsImludm9pY2VzRG93bmxvYWRJbnZvaWNlIiwiaW52b2ljZXNHZXRJbnZvaWNlcyIsIm1lbWJlcnNoaXBHZXRNZW1iZXJzaGlwcyIsInBsYW5HZXRQbGFuIiwicGxhblNldFBsYW4iLCJwbGFuVHlwZSIsInRyYW5zYWN0aW9uc0dldFRyYW5zYWN0aW9ucyIsIkFjY291bnRBcGlGcCIsImxvY2FsVmFyQXhpb3NBcmdzIiwiYXhpb3MiLCJnbG9iYWxBeGlvcyIsImJhc2VQYXRoIiwiQkFTRV9QQVRIIiwiYXhpb3NSZXF1ZXN0QXJncyIsInJlcXVlc3QiLCJBY2NvdW50QXBpRmFjdG9yeSIsIkFjY291bnRBcGkiLCJCYXNlQVBJIiwiQWN0aXZpdGllc0FwaUF4aW9zUGFyYW1DcmVhdG9yIiwiYWN0aXZpdGllc0NyZWF0ZUFjdGl2aXR5IiwiY3JlYXRlQWN0aXZpdHkiLCJhY3Rpdml0aWVzRGVsZXRlQWN0aXZpdHkiLCJhY3Rpdml0aWVzUmVhZEFjdGl2aXR5IiwiYWN0aXZpdGllc1JlZmVyZW5jZUFtcGhvcmEiLCJydW5JZCIsImFtcGhvcmFJZCIsImFtcGhvcmFSZWZlcmVuY2UiLCJhY3Rpdml0aWVzU3RhcnRSdW4iLCJhY3Rpdml0aWVzVXBkYXRlUnVuIiwidXBkYXRlUnVuIiwiQWN0aXZpdGllc0FwaUZwIiwiQWN0aXZpdGllc0FwaUZhY3RvcnkiLCJBY3Rpdml0aWVzQXBpIiwiQW1waG9yYWVBcGlBeGlvc1BhcmFtQ3JlYXRvciIsImFtcGhvcmFRdWFsaXR5R2V0IiwiYW1waG9yYVF1YWxpdHlTZXQiLCJxdWFsaXR5IiwiYW1waG9yYWVBY2Nlc3NDb250cm9sc0NyZWF0ZUZvckFsbCIsImFsbEFjY2Vzc1J1bGUiLCJhbXBob3JhZUFjY2Vzc0NvbnRyb2xzQ3JlYXRlRm9yT3JnYW5pc2F0aW9uIiwib3JnYW5pc2F0aW9uQWNjZXNzUnVsZSIsImFtcGhvcmFlQWNjZXNzQ29udHJvbHNDcmVhdGVGb3JVc2VyIiwidXNlckFjY2Vzc1J1bGUiLCJhbXBob3JhZUFjY2Vzc0NvbnRyb2xzRGVsZXRlIiwicnVsZUlkIiwiYW1waG9yYWVBY2Nlc3NDb250cm9sc0dldEZvckFsbFJ1bGUiLCJhbXBob3JhZUFjY2Vzc0NvbnRyb2xzR2V0T3JnYW5pc2F0aW9uUnVsZXMiLCJhbXBob3JhZUFjY2Vzc0NvbnRyb2xzR2V0VXNlclJ1bGVzIiwiYW1waG9yYWVDcmVhdGUiLCJjcmVhdGVBbXBob3JhIiwiYW1waG9yYWVEZWxldGUiLCJhbXBob3JhZUZpbGVzQ3JlYXRlRmlsZVJlcXVlc3QiLCJmaWxlIiwiYW1waG9yYWVGaWxlc0RlbGV0ZUZpbGUiLCJhbXBob3JhZUZpbGVzRG93bmxvYWRGaWxlIiwiYW1waG9yYWVGaWxlc0xpc3RGaWxlcyIsIm9yZGVyQnkiLCJwcmVmaXgiLCJ0YWtlIiwic2tpcCIsImFtcGhvcmFlRmlsZXNRdWVyeUZpbGVzIiwiZmlsZVF1ZXJ5T3B0aW9ucyIsImFtcGhvcmFlRmlsZXNSZWFkRmlsZUF0dHJpYnV0ZXMiLCJhbXBob3JhZUZpbGVzV3JpdGVGaWxlQXR0cmlidXRlcyIsInJlcXVlc3RCb2R5IiwiYW1waG9yYWVMaXN0Iiwic2NvcGUiLCJhY2Nlc3NUeXBlIiwiYW1waG9yYWVSZWFkIiwiYW1waG9yYWVTaWduYWxzQ3JlYXRlU2lnbmFsIiwiY3JlYXRlU2lnbmFsIiwiYW1waG9yYWVTaWduYWxzR2V0U2lnbmFsIiwicHJvcGVydHkiLCJhbXBob3JhZVNpZ25hbHNHZXRTaWduYWxzIiwiYW1waG9yYWVTaWduYWxzVXBkYXRlU2lnbmFsIiwic2lnbmFsSWQiLCJ1cGRhdGVTaWduYWwiLCJhbXBob3JhZVNpZ25hbHNVcGxvYWRTaWduYWwiLCJhbXBob3JhZVNpZ25hbHNVcGxvYWRTaWduYWwyIiwiYW1waG9yYWVTaWduYWxzVXBsb2FkU2lnbmFsQmF0Y2giLCJhbXBob3JhZVNpZ25hbHNVcGxvYWRTaWduYWxCYXRjaDIiLCJhbXBob3JhZVVwZGF0ZSIsImVkaXRBbXBob3JhIiwicHVyY2hhc2VzUHVyY2hhc2UiLCJBbXBob3JhZUFwaUZwIiwiQW1waG9yYWVBcGlGYWN0b3J5IiwiQW1waG9yYWVBcGkiLCJBcHBsaWNhdGlvbnNBcGlBeGlvc1BhcmFtQ3JlYXRvciIsImFwcGxpY2F0aW9uc0NyZWF0ZUFwcGxpY2F0aW9uIiwiY3JlYXRlQXBwbGljYXRpb24iLCJhcHBsaWNhdGlvbnNEZWxldGVBcHBsaWNhdGlvbiIsImFwcGxpY2F0aW9uc0dldEFwcGxpY2F0aW9ucyIsImFwcGxpY2F0aW9uc1JlYWRBcHBsaWNhdGlvbiIsImFwcGxpY2F0aW9uc1VwZGF0ZUFwcGxpY2F0aW9uIiwidXBkYXRlQXBwbGljYXRpb24iLCJBcHBsaWNhdGlvbnNBcGlGcCIsIkFwcGxpY2F0aW9uc0FwaUZhY3RvcnkiLCJBcHBsaWNhdGlvbnNBcGkiLCJBdXRoZW50aWNhdGlvbkFwaUF4aW9zUGFyYW1DcmVhdG9yIiwiYXV0aGVudGljYXRpb25SZXF1ZXN0VG9rZW4iLCJsb2dpblJlcXVlc3QiLCJBdXRoZW50aWNhdGlvbkFwaUZwIiwiQXV0aGVudGljYXRpb25BcGlGYWN0b3J5IiwiQXV0aGVudGljYXRpb25BcGkiLCJGZWVkc0FwaUF4aW9zUGFyYW1DcmVhdG9yIiwiZmVlZEdldEZlZWQiLCJGZWVkc0FwaUZwIiwiRmVlZHNBcGlGYWN0b3J5IiwiRmVlZHNBcGkiLCJHZW9BcGlBeGlvc1BhcmFtQ3JlYXRvciIsImdlb0xvb2t1cExvY2F0aW9uIiwiR2VvQXBpRnAiLCJHZW9BcGlGYWN0b3J5IiwiR2VvQXBpIiwiSWRlbnRpdHlBcGlBeGlvc1BhcmFtQ3JlYXRvciIsImlkZW50aXR5R2V0IiwiSWRlbnRpdHlBcGlGcCIsIklkZW50aXR5QXBpRmFjdG9yeSIsIklkZW50aXR5QXBpIiwiSW52aXRhdGlvbnNBcGlBeGlvc1BhcmFtQ3JlYXRvciIsImludml0YXRpb25zQWNjZXB0SW52aXRhdGlvbiIsIm9yZ0lkIiwiaGFuZGxlSW52aXRhdGlvbiIsImludml0YXRpb25zSW52aXRlTmV3VXNlciIsImludml0YXRpb24iLCJpbnZpdGF0aW9uc1JlYWRNeUludml0YXRpb25zIiwiSW52aXRhdGlvbnNBcGlGcCIsIkludml0YXRpb25zQXBpRmFjdG9yeSIsIkludml0YXRpb25zQXBpIiwiT3JnYW5pc2F0aW9uc0FwaUF4aW9zUGFyYW1DcmVhdG9yIiwib3JnYW5pc2F0aW9uc0NyZWF0ZSIsIm9yZ2FuaXNhdGlvbiIsIm9yZ2FuaXNhdGlvbnNEZWxldGUiLCJvcmdhbmlzYXRpb25zUmVhZCIsIm9yZ2FuaXNhdGlvbnNSZWFkSW52aXRhdGlvbnMiLCJvcmdhbmlzYXRpb25zVGVybXNPZlVzZVJlYWQiLCJvcmdhbmlzYXRpb25zVXBkYXRlIiwiT3JnYW5pc2F0aW9uc0FwaUZwIiwiT3JnYW5pc2F0aW9uc0FwaUZhY3RvcnkiLCJPcmdhbmlzYXRpb25zQXBpIiwiUGVybWlzc2lvbkFwaUF4aW9zUGFyYW1DcmVhdG9yIiwicGVybWlzc2lvbkdldFBlcm1pc3Npb25zIiwicGVybWlzc2lvbnNSZXF1ZXN0IiwiUGVybWlzc2lvbkFwaUZwIiwiUGVybWlzc2lvbkFwaUZhY3RvcnkiLCJQZXJtaXNzaW9uQXBpIiwiU2VhcmNoQXBpQXhpb3NQYXJhbUNyZWF0b3IiLCJzZWFyY2hTZWFyY2hBbXBob3JhIiwidGVybSIsImxhYmVscyIsImxhdCIsImxvbiIsImRpc3QiLCJzZWFyY2hTZWFyY2hPcmdhbmlzYXRpb25zIiwiU2VhcmNoQXBpRnAiLCJTZWFyY2hBcGlGYWN0b3J5IiwiU2VhcmNoQXBpIiwiVGVybXNPZlVzZUFwaUF4aW9zUGFyYW1DcmVhdG9yIiwidGVybXNPZlVzZUFjY2VwdCIsInRlcm1zT2ZVc2VDcmVhdGUiLCJjcmVhdGVUZXJtc09mVXNlIiwidGVybXNPZlVzZURlbGV0ZSIsInRlcm1zT2ZVc2VMaXN0IiwidGVybXNPZlVzZVJlYWQiLCJUZXJtc09mVXNlQXBpRnAiLCJUZXJtc09mVXNlQXBpRmFjdG9yeSIsIlRlcm1zT2ZVc2VBcGkiLCJUaW1lU2VyaWVzQXBpQXhpb3NQYXJhbUNyZWF0b3IiLCJ0aW1lU2VyaWVzUXVlcnlUaW1lU2VyaWVzIiwicXVlcnlSZXF1ZXN0IiwiVGltZVNlcmllc0FwaUZwIiwiVGltZVNlcmllc0FwaUZhY3RvcnkiLCJUaW1lU2VyaWVzQXBpIiwiVXNlcnNBcGlBeGlvc1BhcmFtQ3JlYXRvciIsInVzZXJzQ3JlYXRlIiwiY3JlYXRlQW1waG9yYVVzZXIiLCJ1c2Vyc1JlYWRTZWxmIiwiVXNlcnNBcGlGcCIsIlVzZXJzQXBpRmFjdG9yeSIsIlVzZXJzQXBpIiwiVmVyc2lvbkFwaUF4aW9zUGFyYW1DcmVhdG9yIiwidmVyc2lvbkdldEN1cnJlbnRWZXJzaW9uIiwiVmVyc2lvbkFwaUZwIiwiVmVyc2lvbkFwaUZhY3RvcnkiLCJWZXJzaW9uQXBpIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBY0E7O0FBRUE7O0FBR0E7Ozs7Ozs7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QVA7QUFDSDs7OztFQVYyQk0sYSIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlXG4vKipcbiAqIEFtcGhvcmEgRGF0YVxuICogICAgICAgICAgICAgIENvbm5lY3QgaW5mb3JtYXRpb24gaW4gcmVhbCB0aW1lIHdpdGggQW1waG9yYSBEYXRhLiAgICAgICAgICAgICAgICAgICAgICAgICAgTGVhcm4gbW9yZSBhdCBodHRwczovL2RvY3MuYW1waG9yYWRhdGEuY29tXG4gKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIE9wZW5BUEkgZG9jdW1lbnQ6IDAuMTAuMjFcbiAqIFxuICpcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgT3BlbkFQSSBHZW5lcmF0b3IgKGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaCkuXG4gKiBodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2hcbiAqIERvIG5vdCBlZGl0IHRoZSBjbGFzcyBtYW51YWxseS5cbiAqL1xuXG5cbmltcG9ydCAqIGFzIGdsb2JhbEltcG9ydFVybCBmcm9tICd1cmwnO1xuaW1wb3J0IHsgQ29uZmlndXJhdGlvbiB9IGZyb20gJy4vY29uZmlndXJhdGlvbic7XG5pbXBvcnQgZ2xvYmFsQXhpb3MsIHsgQXhpb3NQcm9taXNlLCBBeGlvc0luc3RhbmNlIH0gZnJvbSAnYXhpb3MnO1xuLy8gU29tZSBpbXBvcnRzIG5vdCB1c2VkIGRlcGVuZGluZyBvbiB0ZW1wbGF0ZSBjb25kaXRpb25zXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgeyBCQVNFX1BBVEgsIENPTExFQ1RJT05fRk9STUFUUywgUmVxdWVzdEFyZ3MsIEJhc2VBUEksIFJlcXVpcmVkRXJyb3IgfSBmcm9tICcuL2Jhc2UnO1xuXG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBBY2Nlc3NMZXZlbFF1ZXJ5XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWNjZXNzTGV2ZWxRdWVyeSB7XG4gICAgLyoqXG4gICAgICogR2V0cyBvciBzZXRzIFRoZSBpZCBvZiB0aGUgQW1waG9yYSB5b3UgYXJlIGNoZWNraW5nLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEFjY2Vzc0xldmVsUXVlcnlcbiAgICAgKi9cbiAgICBhbXBob3JhSWQ/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgYWNjZXNzIGxldmVsIHRoYXQgd2lsbCBiZSBjaGVja2VkLiBSYW5nZXMgZnJvbSAwIChub25lKSB0byAyNTYgKEFkbWluaXN0ZXIpLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIEFjY2Vzc0xldmVsUXVlcnlcbiAgICAgKi9cbiAgICBhY2Nlc3NMZXZlbD86IG51bWJlcjtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIEFjY2Vzc0xldmVsUmVzcG9uc2VcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBY2Nlc3NMZXZlbFJlc3BvbnNlIHtcbiAgICAvKipcbiAgICAgKiBHZXRzIG9yIHNldHMgVGhlIGlkIG9mIHRoZSBBbXBob3JhIHlvdSBhcmUgY2hlY2tpbmcuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQWNjZXNzTGV2ZWxSZXNwb25zZVxuICAgICAqL1xuICAgIGFtcGhvcmFJZD86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBhY2Nlc3MgbGV2ZWwgdGhhdCB3aWxsIGJlIGNoZWNrZWQuIFJhbmdlcyBmcm9tIDAgKG5vbmUpIHRvIDI1NiAoQWRtaW5pc3RlcikuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgQWNjZXNzTGV2ZWxSZXNwb25zZVxuICAgICAqL1xuICAgIGFjY2Vzc0xldmVsPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEdldHMgb3Igc2V0cyBhIHZhbHVlIGluZGljYXRpbmcgd2hldGhlciBpcyBhdXRob3JpemVkIGF0IHRoYXQgbGV2ZWwuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQG1lbWJlcm9mIEFjY2Vzc0xldmVsUmVzcG9uc2VcbiAgICAgKi9cbiAgICBpc0F1dGhvcml6ZWQ/OiBib29sZWFuO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgQWNjZXNzTGV2ZWxSZXNwb25zZUFsbE9mXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWNjZXNzTGV2ZWxSZXNwb25zZUFsbE9mIHtcbiAgICAvKipcbiAgICAgKiBHZXRzIG9yIHNldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgaXMgYXV0aG9yaXplZCBhdCB0aGF0IGxldmVsLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBtZW1iZXJvZiBBY2Nlc3NMZXZlbFJlc3BvbnNlQWxsT2ZcbiAgICAgKi9cbiAgICBpc0F1dGhvcml6ZWQ/OiBib29sZWFuO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgQWNjZXNzUnVsZUR0b0Jhc2VcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBY2Nlc3NSdWxlRHRvQmFzZSB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQWNjZXNzUnVsZUR0b0Jhc2VcbiAgICAgKi9cbiAgICBpZD86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQWNjZXNzUnVsZUR0b0Jhc2VcbiAgICAgKi9cbiAgICBhbGxvd09yRGVueT86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgQWNjZXNzUnVsZUR0b0Jhc2VcbiAgICAgKi9cbiAgICBwcmlvcml0eT86IG51bWJlcjtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIEFjY291bnRJbmZvcm1hdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFjY291bnRJbmZvcm1hdGlvbiB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgQWNjb3VudEluZm9ybWF0aW9uXG4gICAgICovXG4gICAgYmFsYW5jZT86IG51bWJlcjtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIEFjdGl2aXR5XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWN0aXZpdHkge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEFjdGl2aXR5XG4gICAgICovXG4gICAgaWQ/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBtZW1iZXJvZiBBY3Rpdml0eVxuICAgICAqL1xuICAgIGlzRGVsZXRlZD86IGJvb2xlYW4gfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtEYXRlfVxuICAgICAqIEBtZW1iZXJvZiBBY3Rpdml0eVxuICAgICAqL1xuICAgIGNyZWF0ZWREYXRlPzogRGF0ZSB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQWN0aXZpdHlcbiAgICAgKi9cbiAgICBuYW1lPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7QXJyYXk8UnVuPn1cbiAgICAgKiBAbWVtYmVyb2YgQWN0aXZpdHlcbiAgICAgKi9cbiAgICBydW5zPzogQXJyYXk8UnVuPiB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBBY3Rpdml0eUFsbE9mXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWN0aXZpdHlBbGxPZiB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQWN0aXZpdHlBbGxPZlxuICAgICAqL1xuICAgIG5hbWU/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtBcnJheTxSdW4+fVxuICAgICAqIEBtZW1iZXJvZiBBY3Rpdml0eUFsbE9mXG4gICAgICovXG4gICAgcnVucz86IEFycmF5PFJ1bj4gfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgQWRkcmVzc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEFkZHJlc3Mge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEFkZHJlc3NcbiAgICAgKi9cbiAgICBzdHJlZXROdW1iZXI/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEFkZHJlc3NcbiAgICAgKi9cbiAgICBzdHJlZXROYW1lPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBBZGRyZXNzXG4gICAgICovXG4gICAgbXVuaWNpcGFsaXR5U3ViZGl2aXNpb24/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEFkZHJlc3NcbiAgICAgKi9cbiAgICBtdW5pY2lwYWxpdHk/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEFkZHJlc3NcbiAgICAgKi9cbiAgICBjb3VudHJ5U2Vjb25kYXJ5U3ViZGl2aXNpb24/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEFkZHJlc3NcbiAgICAgKi9cbiAgICBjb3VudHJ5U3ViZGl2aXNpb24/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEFkZHJlc3NcbiAgICAgKi9cbiAgICBwb3N0YWxDb2RlPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBBZGRyZXNzXG4gICAgICovXG4gICAgY291bnRyeUNvZGU/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEFkZHJlc3NcbiAgICAgKi9cbiAgICBjb3VudHJ5Pzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBBZGRyZXNzXG4gICAgICovXG4gICAgY291bnRyeUNvZGVJc28zPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBBZGRyZXNzXG4gICAgICovXG4gICAgZnJlZWZvcm1BZGRyZXNzPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBBZGRyZXNzXG4gICAgICovXG4gICAgbG9jYWxOYW1lPzogc3RyaW5nIHwgbnVsbDtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIEFnZ3JlZ2F0ZVNlcmllc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEFnZ3JlZ2F0ZVNlcmllcyB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge0FycmF5PG9iamVjdD59XG4gICAgICogQG1lbWJlcm9mIEFnZ3JlZ2F0ZVNlcmllc1xuICAgICAqL1xuICAgIHRpbWVTZXJpZXNJZD86IEFycmF5PG9iamVjdD4gfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtEYXRlVGltZVJhbmdlfVxuICAgICAqIEBtZW1iZXJvZiBBZ2dyZWdhdGVTZXJpZXNcbiAgICAgKi9cbiAgICBzZWFyY2hTcGFuPzogRGF0ZVRpbWVSYW5nZSB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge1RzeH1cbiAgICAgKiBAbWVtYmVyb2YgQWdncmVnYXRlU2VyaWVzXG4gICAgICovXG4gICAgZmlsdGVyPzogVHN4IHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBBZ2dyZWdhdGVTZXJpZXNcbiAgICAgKi9cbiAgICBpbnRlcnZhbD86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7QXJyYXk8c3RyaW5nPn1cbiAgICAgKiBAbWVtYmVyb2YgQWdncmVnYXRlU2VyaWVzXG4gICAgICovXG4gICAgcHJvamVjdGVkVmFyaWFibGVzPzogQXJyYXk8c3RyaW5nPiB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3sgW2tleTogc3RyaW5nXTogVmFyaWFibGU7IH19XG4gICAgICogQG1lbWJlcm9mIEFnZ3JlZ2F0ZVNlcmllc1xuICAgICAqL1xuICAgIGlubGluZVZhcmlhYmxlcz86IHsgW2tleTogc3RyaW5nXTogVmFyaWFibGU7IH0gfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgQWdncmVnYXRlVmFyaWFibGVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBZ2dyZWdhdGVWYXJpYWJsZSB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge1RzeH1cbiAgICAgKiBAbWVtYmVyb2YgQWdncmVnYXRlVmFyaWFibGVcbiAgICAgKi9cbiAgICBmaWx0ZXI/OiBUc3ggfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtUc3h9XG4gICAgICogQG1lbWJlcm9mIEFnZ3JlZ2F0ZVZhcmlhYmxlXG4gICAgICovXG4gICAgYWdncmVnYXRpb24/OiBUc3ggfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgQWxsQWNjZXNzUnVsZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFsbEFjY2Vzc1J1bGUgZXh0ZW5kcyBBY2Nlc3NSdWxlRHRvQmFzZSB7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBBbXBob3JhUmVmZXJlbmNlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQW1waG9yYVJlZmVyZW5jZSB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQW1waG9yYVJlZmVyZW5jZVxuICAgICAqL1xuICAgIGFtcGhvcmFJZD86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgQW1waG9yYVJlZmVyZW5jZVxuICAgICAqL1xuICAgIGZpbGVzQ29uc3VtZWQ/OiBudW1iZXIgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIEFtcGhvcmFSZWZlcmVuY2VcbiAgICAgKi9cbiAgICBmaWxlc1Byb2R1Y2VkPzogbnVtYmVyIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBBbXBob3JhUmVmZXJlbmNlXG4gICAgICovXG4gICAgc2lnbmFsc0NvbnN1bWVkPzogbnVtYmVyIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBBbXBob3JhUmVmZXJlbmNlXG4gICAgICovXG4gICAgc2lnbmFsc1Byb2R1Y2VkPzogbnVtYmVyIHwgbnVsbDtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIEFtcGhvcmFVc2VyXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQW1waG9yYVVzZXIge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEFtcGhvcmFVc2VyXG4gICAgICovXG4gICAgcGhvbmVOdW1iZXI/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEFtcGhvcmFVc2VyXG4gICAgICovXG4gICAgYWJvdXQ/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEFtcGhvcmFVc2VyXG4gICAgICovXG4gICAgZnVsbE5hbWU/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEFtcGhvcmFVc2VyXG4gICAgICovXG4gICAgdXNlck5hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBBbXBob3JhVXNlclxuICAgICAqL1xuICAgIGlkPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEFtcGhvcmFVc2VyXG4gICAgICovXG4gICAgZW1haWw/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEFtcGhvcmFVc2VyXG4gICAgICovXG4gICAgb3JnYW5pc2F0aW9uSWQ/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtEYXRlfVxuICAgICAqIEBtZW1iZXJvZiBBbXBob3JhVXNlclxuICAgICAqL1xuICAgIGxhc3RNb2RpZmllZD86IERhdGUgfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgQW1waG9yYVVzZXJBbGxPZlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFtcGhvcmFVc2VyQWxsT2Yge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEFtcGhvcmFVc2VyQWxsT2ZcbiAgICAgKi9cbiAgICBpZD86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBBbXBob3JhVXNlckFsbE9mXG4gICAgICovXG4gICAgZW1haWw/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEFtcGhvcmFVc2VyQWxsT2ZcbiAgICAgKi9cbiAgICBvcmdhbmlzYXRpb25JZD86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge0RhdGV9XG4gICAgICogQG1lbWJlcm9mIEFtcGhvcmFVc2VyQWxsT2ZcbiAgICAgKi9cbiAgICBsYXN0TW9kaWZpZWQ/OiBEYXRlIHwgbnVsbDtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIEFwcExvY2F0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXBwTG9jYXRpb24ge1xuICAgIC8qKlxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgZXhwZWN0ZWQgb3JpZ2luIGZyb20gYSBYTUxIdHRwUmVxdWVzdCBNdXN0IG5vdCBlbmQgaW4gXFwnL1xcJy5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBBcHBMb2NhdGlvblxuICAgICAqL1xuICAgIG9yaWdpbj86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogR2V0cyBvciBzZXRzIGFsbG93ZWQgcmVkaXJlY3RzIGFmdGVyIGxvZ2luLCByZWxhdGl2ZSB0byBPcmlnaW4uIE11c3QgYmVnaW4gd2l0aCBhIFxcJy9cXCcuXG4gICAgICogQHR5cGUge0FycmF5PHN0cmluZz59XG4gICAgICogQG1lbWJlcm9mIEFwcExvY2F0aW9uXG4gICAgICovXG4gICAgYWxsb3dlZFJlZGlyZWN0UGF0aHM/OiBBcnJheTxzdHJpbmc+IHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGFsbG93ZWQgcmVkaXJlY3QgYWZ0ZXIgbG9nb3V0LiBNdXN0IGJlIGFuIGFic29sdXRlIHVybC5cbiAgICAgKiBAdHlwZSB7QXJyYXk8c3RyaW5nPn1cbiAgICAgKiBAbWVtYmVyb2YgQXBwTG9jYXRpb25cbiAgICAgKi9cbiAgICBwb3N0TG9nb3V0UmVkaXJlY3RzPzogQXJyYXk8c3RyaW5nPiB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQXBwTG9jYXRpb25cbiAgICAgKi9cbiAgICBpZD86IHN0cmluZyB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBBcHBMb2NhdGlvbkFsbE9mXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXBwTG9jYXRpb25BbGxPZiB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQXBwTG9jYXRpb25BbGxPZlxuICAgICAqL1xuICAgIGlkPzogc3RyaW5nIHwgbnVsbDtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIEFwcExvY2F0aW9uQmFzZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFwcExvY2F0aW9uQmFzZSB7XG4gICAgLyoqXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBleHBlY3RlZCBvcmlnaW4gZnJvbSBhIFhNTEh0dHBSZXF1ZXN0IE11c3Qgbm90IGVuZCBpbiBcXCcvXFwnLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEFwcExvY2F0aW9uQmFzZVxuICAgICAqL1xuICAgIG9yaWdpbj86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogR2V0cyBvciBzZXRzIGFsbG93ZWQgcmVkaXJlY3RzIGFmdGVyIGxvZ2luLCByZWxhdGl2ZSB0byBPcmlnaW4uIE11c3QgYmVnaW4gd2l0aCBhIFxcJy9cXCcuXG4gICAgICogQHR5cGUge0FycmF5PHN0cmluZz59XG4gICAgICogQG1lbWJlcm9mIEFwcExvY2F0aW9uQmFzZVxuICAgICAqL1xuICAgIGFsbG93ZWRSZWRpcmVjdFBhdGhzPzogQXJyYXk8c3RyaW5nPiB8IG51bGw7XG4gICAgLyoqXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBhbGxvd2VkIHJlZGlyZWN0IGFmdGVyIGxvZ291dC4gTXVzdCBiZSBhbiBhYnNvbHV0ZSB1cmwuXG4gICAgICogQHR5cGUge0FycmF5PHN0cmluZz59XG4gICAgICogQG1lbWJlcm9mIEFwcExvY2F0aW9uQmFzZVxuICAgICAqL1xuICAgIHBvc3RMb2dvdXRSZWRpcmVjdHM/OiBBcnJheTxzdHJpbmc+IHwgbnVsbDtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIEFwcGxpY2F0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXBwbGljYXRpb24ge1xuICAgIC8qKlxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgbmFtZSBvZiB5b3VyIGFwcGxpY2F0aW9uLiBXaWxsIGJlIHNob3duIG9uIHRoZSBjb25zZW50IHBhZ2UuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQXBwbGljYXRpb25cbiAgICAgKi9cbiAgICBuYW1lPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBHZXRzIG9yIHNldHMgYSB1cmwgZm9yIGZyb250IGNoYW5uZWwgSFRUUCBsb2dvdXRzLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEFwcGxpY2F0aW9uXG4gICAgICovXG4gICAgbG9nb3V0VXJsPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGFsbG93ZWQgc2NvcGVzIGZvciB0aGUgYXBwLiBvcGVuaWQgaXMgbm90IHJlcXVpcmVkLCBhbmQgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGluY2x1ZGVkLiBPcHRpb25zIGluY2x1ZGU6IFtcXCdhbXBob3JhXFwnLCBcXCdhbXBob3JhLnB1cmNoYXNlXFwnLCBcXCdwcm9maWxlXFwnLCBcXCdlbWFpbFxcJywgXFwnd2ViX2FwaVxcJ10uXG4gICAgICogQHR5cGUge0FycmF5PHN0cmluZz59XG4gICAgICogQG1lbWJlcm9mIEFwcGxpY2F0aW9uXG4gICAgICovXG4gICAgYWxsb3dlZFNjb3Blcz86IEFycmF5PHN0cmluZz4gfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEFwcGxpY2F0aW9uXG4gICAgICovXG4gICAgaWQ/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIEdldHMgb3Igc2V0cyBhIGNvbGxlY3Rpb24gb2YgbG9jYXRpb25zIHlvdXIgYXBwbGljYXRpb24gd2lsbCBydW4uXG4gICAgICogQHR5cGUge0FycmF5PEFwcExvY2F0aW9uPn1cbiAgICAgKiBAbWVtYmVyb2YgQXBwbGljYXRpb25cbiAgICAgKi9cbiAgICBsb2NhdGlvbnM/OiBBcnJheTxBcHBMb2NhdGlvbj4gfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgQXBwbGljYXRpb25BbGxPZlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFwcGxpY2F0aW9uQWxsT2Yge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEFwcGxpY2F0aW9uQWxsT2ZcbiAgICAgKi9cbiAgICBpZD86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogR2V0cyBvciBzZXRzIGEgY29sbGVjdGlvbiBvZiBsb2NhdGlvbnMgeW91ciBhcHBsaWNhdGlvbiB3aWxsIHJ1bi5cbiAgICAgKiBAdHlwZSB7QXJyYXk8QXBwTG9jYXRpb24+fVxuICAgICAqIEBtZW1iZXJvZiBBcHBsaWNhdGlvbkFsbE9mXG4gICAgICovXG4gICAgbG9jYXRpb25zPzogQXJyYXk8QXBwTG9jYXRpb24+IHwgbnVsbDtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIEFwcGxpY2F0aW9uQmFzZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFwcGxpY2F0aW9uQmFzZSB7XG4gICAgLyoqXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBuYW1lIG9mIHlvdXIgYXBwbGljYXRpb24uIFdpbGwgYmUgc2hvd24gb24gdGhlIGNvbnNlbnQgcGFnZS5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBBcHBsaWNhdGlvbkJhc2VcbiAgICAgKi9cbiAgICBuYW1lPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBHZXRzIG9yIHNldHMgYSB1cmwgZm9yIGZyb250IGNoYW5uZWwgSFRUUCBsb2dvdXRzLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEFwcGxpY2F0aW9uQmFzZVxuICAgICAqL1xuICAgIGxvZ291dFVybD86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBhbGxvd2VkIHNjb3BlcyBmb3IgdGhlIGFwcC4gb3BlbmlkIGlzIG5vdCByZXF1aXJlZCwgYW5kIHdpbGwgYmUgYXV0b21hdGljYWxseSBpbmNsdWRlZC4gT3B0aW9ucyBpbmNsdWRlOiBbXFwnYW1waG9yYVxcJywgXFwnYW1waG9yYS5wdXJjaGFzZVxcJywgXFwncHJvZmlsZVxcJywgXFwnZW1haWxcXCcsIFxcJ3dlYl9hcGlcXCddLlxuICAgICAqIEB0eXBlIHtBcnJheTxzdHJpbmc+fVxuICAgICAqIEBtZW1iZXJvZiBBcHBsaWNhdGlvbkJhc2VcbiAgICAgKi9cbiAgICBhbGxvd2VkU2NvcGVzPzogQXJyYXk8c3RyaW5nPiB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBCYXNlQW1waG9yYVVzZXJcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCYXNlQW1waG9yYVVzZXIge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEJhc2VBbXBob3JhVXNlclxuICAgICAqL1xuICAgIHBob25lTnVtYmVyPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBCYXNlQW1waG9yYVVzZXJcbiAgICAgKi9cbiAgICBhYm91dD86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQmFzZUFtcGhvcmFVc2VyXG4gICAgICovXG4gICAgZnVsbE5hbWU/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEJhc2VBbXBob3JhVXNlclxuICAgICAqL1xuICAgIHVzZXJOYW1lOiBzdHJpbmc7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBCYXNpY0FtcGhvcmFcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCYXNpY0FtcGhvcmEge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEJhc2ljQW1waG9yYVxuICAgICAqL1xuICAgIGlkPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAbWVtYmVyb2YgQmFzaWNBbXBob3JhXG4gICAgICovXG4gICAgaXNEZWxldGVkPzogYm9vbGVhbiB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge0RhdGV9XG4gICAgICogQG1lbWJlcm9mIEJhc2ljQW1waG9yYVxuICAgICAqL1xuICAgIGNyZWF0ZWREYXRlPzogRGF0ZSB8IG51bGw7XG4gICAgLyoqXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBvd25lclxcJ3Mgb3JnYW5pc2F0aW9uIElkLiBXaWxsIGJlIHNldCBieSB0aGUgc2VydmVyIHVwb24gY3JlYXRpb24uXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQmFzaWNBbXBob3JhXG4gICAgICovXG4gICAgb3JnYW5pc2F0aW9uSWQ/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEJhc2ljQW1waG9yYVxuICAgICAqL1xuICAgIG5hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBCYXNpY0FtcGhvcmFcbiAgICAgKi9cbiAgICBwcmljZTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEJhc2ljQW1waG9yYVxuICAgICAqL1xuICAgIGxhYmVscz86IHN0cmluZyB8IG51bGw7XG59XG4vKipcbiAqIFRoZSBiYXNpYyBtZXRhZGF0YSBvZiBhbiBBbXBob3JhLlxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBCYXNpY0FtcGhvcmFBbGxPZlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJhc2ljQW1waG9yYUFsbE9mIHtcbiAgICAvKipcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIG93bmVyXFwncyBvcmdhbmlzYXRpb24gSWQuIFdpbGwgYmUgc2V0IGJ5IHRoZSBzZXJ2ZXIgdXBvbiBjcmVhdGlvbi5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBCYXNpY0FtcGhvcmFBbGxPZlxuICAgICAqL1xuICAgIG9yZ2FuaXNhdGlvbklkPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBCYXNpY0FtcGhvcmFBbGxPZlxuICAgICAqL1xuICAgIG5hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBCYXNpY0FtcGhvcmFBbGxPZlxuICAgICAqL1xuICAgIHByaWNlOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQmFzaWNBbXBob3JhQWxsT2ZcbiAgICAgKi9cbiAgICBsYWJlbHM/OiBzdHJpbmcgfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgQ2F0ZWdvcmljYWxWYXJpYWJsZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIENhdGVnb3JpY2FsVmFyaWFibGUge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtUc3h9XG4gICAgICogQG1lbWJlcm9mIENhdGVnb3JpY2FsVmFyaWFibGVcbiAgICAgKi9cbiAgICBmaWx0ZXI/OiBUc3ggfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtUc3h9XG4gICAgICogQG1lbWJlcm9mIENhdGVnb3JpY2FsVmFyaWFibGVcbiAgICAgKi9cbiAgICB2YWx1ZT86IFRzeCB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge0ludGVycG9sYXRpb259XG4gICAgICogQG1lbWJlcm9mIENhdGVnb3JpY2FsVmFyaWFibGVcbiAgICAgKi9cbiAgICBpbnRlcnBvbGF0aW9uPzogSW50ZXJwb2xhdGlvbiB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge0FycmF5PFRpbWVTZXJpZXNBZ2dyZWdhdGVDYXRlZ29yeT59XG4gICAgICogQG1lbWJlcm9mIENhdGVnb3JpY2FsVmFyaWFibGVcbiAgICAgKi9cbiAgICBjYXRlZ29yaWVzPzogQXJyYXk8VGltZVNlcmllc0FnZ3JlZ2F0ZUNhdGVnb3J5PiB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge1RpbWVTZXJpZXNEZWZhdWx0Q2F0ZWdvcnl9XG4gICAgICogQG1lbWJlcm9mIENhdGVnb3JpY2FsVmFyaWFibGVcbiAgICAgKi9cbiAgICBkZWZhdWx0Q2F0ZWdvcnk/OiBUaW1lU2VyaWVzRGVmYXVsdENhdGVnb3J5IHwgbnVsbDtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIENvbGxlY3Rpb25SZXNwb25zZU9mQXBwbGljYXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb2xsZWN0aW9uUmVzcG9uc2VPZkFwcGxpY2F0aW9uIHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBDb2xsZWN0aW9uUmVzcG9uc2VPZkFwcGxpY2F0aW9uXG4gICAgICovXG4gICAgbWVzc2FnZT86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgQ29sbGVjdGlvblJlc3BvbnNlT2ZBcHBsaWNhdGlvblxuICAgICAqL1xuICAgIGNvdW50PzogbnVtYmVyIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7QXJyYXk8QXBwbGljYXRpb24+fVxuICAgICAqIEBtZW1iZXJvZiBDb2xsZWN0aW9uUmVzcG9uc2VPZkFwcGxpY2F0aW9uXG4gICAgICovXG4gICAgaXRlbXM/OiBBcnJheTxBcHBsaWNhdGlvbj4gfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgQ29sbGVjdGlvblJlc3BvbnNlT2ZBcHBsaWNhdGlvbkFsbE9mXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29sbGVjdGlvblJlc3BvbnNlT2ZBcHBsaWNhdGlvbkFsbE9mIHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBDb2xsZWN0aW9uUmVzcG9uc2VPZkFwcGxpY2F0aW9uQWxsT2ZcbiAgICAgKi9cbiAgICBjb3VudD86IG51bWJlciB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge0FycmF5PEFwcGxpY2F0aW9uPn1cbiAgICAgKiBAbWVtYmVyb2YgQ29sbGVjdGlvblJlc3BvbnNlT2ZBcHBsaWNhdGlvbkFsbE9mXG4gICAgICovXG4gICAgaXRlbXM/OiBBcnJheTxBcHBsaWNhdGlvbj4gfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgQ29sbGVjdGlvblJlc3BvbnNlT2ZCYXNpY0FtcGhvcmFcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb2xsZWN0aW9uUmVzcG9uc2VPZkJhc2ljQW1waG9yYSB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQ29sbGVjdGlvblJlc3BvbnNlT2ZCYXNpY0FtcGhvcmFcbiAgICAgKi9cbiAgICBtZXNzYWdlPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBDb2xsZWN0aW9uUmVzcG9uc2VPZkJhc2ljQW1waG9yYVxuICAgICAqL1xuICAgIGNvdW50PzogbnVtYmVyIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7QXJyYXk8QmFzaWNBbXBob3JhPn1cbiAgICAgKiBAbWVtYmVyb2YgQ29sbGVjdGlvblJlc3BvbnNlT2ZCYXNpY0FtcGhvcmFcbiAgICAgKi9cbiAgICBpdGVtcz86IEFycmF5PEJhc2ljQW1waG9yYT4gfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgQ29sbGVjdGlvblJlc3BvbnNlT2ZCYXNpY0FtcGhvcmFBbGxPZlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbGxlY3Rpb25SZXNwb25zZU9mQmFzaWNBbXBob3JhQWxsT2Yge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIENvbGxlY3Rpb25SZXNwb25zZU9mQmFzaWNBbXBob3JhQWxsT2ZcbiAgICAgKi9cbiAgICBjb3VudD86IG51bWJlciB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge0FycmF5PEJhc2ljQW1waG9yYT59XG4gICAgICogQG1lbWJlcm9mIENvbGxlY3Rpb25SZXNwb25zZU9mQmFzaWNBbXBob3JhQWxsT2ZcbiAgICAgKi9cbiAgICBpdGVtcz86IEFycmF5PEJhc2ljQW1waG9yYT4gfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgQ29sbGVjdGlvblJlc3BvbnNlT2ZGZWVkSXRlbVxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbGxlY3Rpb25SZXNwb25zZU9mRmVlZEl0ZW0ge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIENvbGxlY3Rpb25SZXNwb25zZU9mRmVlZEl0ZW1cbiAgICAgKi9cbiAgICBtZXNzYWdlPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBDb2xsZWN0aW9uUmVzcG9uc2VPZkZlZWRJdGVtXG4gICAgICovXG4gICAgY291bnQ/OiBudW1iZXIgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtBcnJheTxGZWVkSXRlbT59XG4gICAgICogQG1lbWJlcm9mIENvbGxlY3Rpb25SZXNwb25zZU9mRmVlZEl0ZW1cbiAgICAgKi9cbiAgICBpdGVtcz86IEFycmF5PEZlZWRJdGVtPiB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBDb2xsZWN0aW9uUmVzcG9uc2VPZkZlZWRJdGVtQWxsT2ZcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb2xsZWN0aW9uUmVzcG9uc2VPZkZlZWRJdGVtQWxsT2Yge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIENvbGxlY3Rpb25SZXNwb25zZU9mRmVlZEl0ZW1BbGxPZlxuICAgICAqL1xuICAgIGNvdW50PzogbnVtYmVyIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7QXJyYXk8RmVlZEl0ZW0+fVxuICAgICAqIEBtZW1iZXJvZiBDb2xsZWN0aW9uUmVzcG9uc2VPZkZlZWRJdGVtQWxsT2ZcbiAgICAgKi9cbiAgICBpdGVtcz86IEFycmF5PEZlZWRJdGVtPiB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBDb2xsZWN0aW9uUmVzcG9uc2VPZkludml0YXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb2xsZWN0aW9uUmVzcG9uc2VPZkludml0YXRpb24ge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIENvbGxlY3Rpb25SZXNwb25zZU9mSW52aXRhdGlvblxuICAgICAqL1xuICAgIG1lc3NhZ2U/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIENvbGxlY3Rpb25SZXNwb25zZU9mSW52aXRhdGlvblxuICAgICAqL1xuICAgIGNvdW50PzogbnVtYmVyIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7QXJyYXk8SW52aXRhdGlvbj59XG4gICAgICogQG1lbWJlcm9mIENvbGxlY3Rpb25SZXNwb25zZU9mSW52aXRhdGlvblxuICAgICAqL1xuICAgIGl0ZW1zPzogQXJyYXk8SW52aXRhdGlvbj4gfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgQ29sbGVjdGlvblJlc3BvbnNlT2ZJbnZpdGF0aW9uQWxsT2ZcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb2xsZWN0aW9uUmVzcG9uc2VPZkludml0YXRpb25BbGxPZiB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgQ29sbGVjdGlvblJlc3BvbnNlT2ZJbnZpdGF0aW9uQWxsT2ZcbiAgICAgKi9cbiAgICBjb3VudD86IG51bWJlciB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge0FycmF5PEludml0YXRpb24+fVxuICAgICAqIEBtZW1iZXJvZiBDb2xsZWN0aW9uUmVzcG9uc2VPZkludml0YXRpb25BbGxPZlxuICAgICAqL1xuICAgIGl0ZW1zPzogQXJyYXk8SW52aXRhdGlvbj4gfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgQ29sbGVjdGlvblJlc3BvbnNlT2ZJbnZvaWNlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29sbGVjdGlvblJlc3BvbnNlT2ZJbnZvaWNlIHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBDb2xsZWN0aW9uUmVzcG9uc2VPZkludm9pY2VcbiAgICAgKi9cbiAgICBtZXNzYWdlPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBDb2xsZWN0aW9uUmVzcG9uc2VPZkludm9pY2VcbiAgICAgKi9cbiAgICBjb3VudD86IG51bWJlciB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge0FycmF5PEludm9pY2U+fVxuICAgICAqIEBtZW1iZXJvZiBDb2xsZWN0aW9uUmVzcG9uc2VPZkludm9pY2VcbiAgICAgKi9cbiAgICBpdGVtcz86IEFycmF5PEludm9pY2U+IHwgbnVsbDtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIENvbGxlY3Rpb25SZXNwb25zZU9mSW52b2ljZUFsbE9mXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29sbGVjdGlvblJlc3BvbnNlT2ZJbnZvaWNlQWxsT2Yge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIENvbGxlY3Rpb25SZXNwb25zZU9mSW52b2ljZUFsbE9mXG4gICAgICovXG4gICAgY291bnQ/OiBudW1iZXIgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtBcnJheTxJbnZvaWNlPn1cbiAgICAgKiBAbWVtYmVyb2YgQ29sbGVjdGlvblJlc3BvbnNlT2ZJbnZvaWNlQWxsT2ZcbiAgICAgKi9cbiAgICBpdGVtcz86IEFycmF5PEludm9pY2U+IHwgbnVsbDtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIENvbGxlY3Rpb25SZXNwb25zZU9mTWVtYmVyc2hpcFxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbGxlY3Rpb25SZXNwb25zZU9mTWVtYmVyc2hpcCB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQ29sbGVjdGlvblJlc3BvbnNlT2ZNZW1iZXJzaGlwXG4gICAgICovXG4gICAgbWVzc2FnZT86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgQ29sbGVjdGlvblJlc3BvbnNlT2ZNZW1iZXJzaGlwXG4gICAgICovXG4gICAgY291bnQ/OiBudW1iZXIgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtBcnJheTxNZW1iZXJzaGlwPn1cbiAgICAgKiBAbWVtYmVyb2YgQ29sbGVjdGlvblJlc3BvbnNlT2ZNZW1iZXJzaGlwXG4gICAgICovXG4gICAgaXRlbXM/OiBBcnJheTxNZW1iZXJzaGlwPiB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBDb2xsZWN0aW9uUmVzcG9uc2VPZk1lbWJlcnNoaXBBbGxPZlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbGxlY3Rpb25SZXNwb25zZU9mTWVtYmVyc2hpcEFsbE9mIHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBDb2xsZWN0aW9uUmVzcG9uc2VPZk1lbWJlcnNoaXBBbGxPZlxuICAgICAqL1xuICAgIGNvdW50PzogbnVtYmVyIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7QXJyYXk8TWVtYmVyc2hpcD59XG4gICAgICogQG1lbWJlcm9mIENvbGxlY3Rpb25SZXNwb25zZU9mTWVtYmVyc2hpcEFsbE9mXG4gICAgICovXG4gICAgaXRlbXM/OiBBcnJheTxNZW1iZXJzaGlwPiB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBDb2xsZWN0aW9uUmVzcG9uc2VPZk9yZ2FuaXNhdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbGxlY3Rpb25SZXNwb25zZU9mT3JnYW5pc2F0aW9uIHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBDb2xsZWN0aW9uUmVzcG9uc2VPZk9yZ2FuaXNhdGlvblxuICAgICAqL1xuICAgIG1lc3NhZ2U/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIENvbGxlY3Rpb25SZXNwb25zZU9mT3JnYW5pc2F0aW9uXG4gICAgICovXG4gICAgY291bnQ/OiBudW1iZXIgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtBcnJheTxPcmdhbmlzYXRpb24+fVxuICAgICAqIEBtZW1iZXJvZiBDb2xsZWN0aW9uUmVzcG9uc2VPZk9yZ2FuaXNhdGlvblxuICAgICAqL1xuICAgIGl0ZW1zPzogQXJyYXk8T3JnYW5pc2F0aW9uPiB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBDb2xsZWN0aW9uUmVzcG9uc2VPZk9yZ2FuaXNhdGlvbkFsbE9mXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29sbGVjdGlvblJlc3BvbnNlT2ZPcmdhbmlzYXRpb25BbGxPZiB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgQ29sbGVjdGlvblJlc3BvbnNlT2ZPcmdhbmlzYXRpb25BbGxPZlxuICAgICAqL1xuICAgIGNvdW50PzogbnVtYmVyIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7QXJyYXk8T3JnYW5pc2F0aW9uPn1cbiAgICAgKiBAbWVtYmVyb2YgQ29sbGVjdGlvblJlc3BvbnNlT2ZPcmdhbmlzYXRpb25BbGxPZlxuICAgICAqL1xuICAgIGl0ZW1zPzogQXJyYXk8T3JnYW5pc2F0aW9uPiB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBDb2xsZWN0aW9uUmVzcG9uc2VPZlRyYW5zYWN0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29sbGVjdGlvblJlc3BvbnNlT2ZUcmFuc2FjdGlvbiB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQ29sbGVjdGlvblJlc3BvbnNlT2ZUcmFuc2FjdGlvblxuICAgICAqL1xuICAgIG1lc3NhZ2U/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIENvbGxlY3Rpb25SZXNwb25zZU9mVHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBjb3VudD86IG51bWJlciB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge0FycmF5PFRyYW5zYWN0aW9uPn1cbiAgICAgKiBAbWVtYmVyb2YgQ29sbGVjdGlvblJlc3BvbnNlT2ZUcmFuc2FjdGlvblxuICAgICAqL1xuICAgIGl0ZW1zPzogQXJyYXk8VHJhbnNhY3Rpb24+IHwgbnVsbDtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIENvbGxlY3Rpb25SZXNwb25zZU9mVHJhbnNhY3Rpb25BbGxPZlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbGxlY3Rpb25SZXNwb25zZU9mVHJhbnNhY3Rpb25BbGxPZiB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgQ29sbGVjdGlvblJlc3BvbnNlT2ZUcmFuc2FjdGlvbkFsbE9mXG4gICAgICovXG4gICAgY291bnQ/OiBudW1iZXIgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtBcnJheTxUcmFuc2FjdGlvbj59XG4gICAgICogQG1lbWJlcm9mIENvbGxlY3Rpb25SZXNwb25zZU9mVHJhbnNhY3Rpb25BbGxPZlxuICAgICAqL1xuICAgIGl0ZW1zPzogQXJyYXk8VHJhbnNhY3Rpb24+IHwgbnVsbDtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIENyZWF0ZUFjdGl2aXR5XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlQWN0aXZpdHkge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIENyZWF0ZUFjdGl2aXR5XG4gICAgICovXG4gICAgbmFtZT86IHN0cmluZyB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBDcmVhdGVBbXBob3JhXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlQW1waG9yYSB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQ3JlYXRlQW1waG9yYVxuICAgICAqL1xuICAgIGlkPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAbWVtYmVyb2YgQ3JlYXRlQW1waG9yYVxuICAgICAqL1xuICAgIGlzRGVsZXRlZD86IGJvb2xlYW4gfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtEYXRlfVxuICAgICAqIEBtZW1iZXJvZiBDcmVhdGVBbXBob3JhXG4gICAgICovXG4gICAgY3JlYXRlZERhdGU/OiBEYXRlIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIG93bmVyXFwncyBvcmdhbmlzYXRpb24gSWQuIFdpbGwgYmUgc2V0IGJ5IHRoZSBzZXJ2ZXIgdXBvbiBjcmVhdGlvbi5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBDcmVhdGVBbXBob3JhXG4gICAgICovXG4gICAgb3JnYW5pc2F0aW9uSWQ/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIENyZWF0ZUFtcGhvcmFcbiAgICAgKi9cbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgQ3JlYXRlQW1waG9yYVxuICAgICAqL1xuICAgIHByaWNlOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQ3JlYXRlQW1waG9yYVxuICAgICAqL1xuICAgIGxhYmVscz86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQ3JlYXRlQW1waG9yYVxuICAgICAqL1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgQ3JlYXRlQW1waG9yYVxuICAgICAqL1xuICAgIGxhdD86IG51bWJlciB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgQ3JlYXRlQW1waG9yYVxuICAgICAqL1xuICAgIGxvbj86IG51bWJlciB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQ3JlYXRlQW1waG9yYVxuICAgICAqL1xuICAgIHRlcm1zT2ZVc2VJZD86IHN0cmluZyB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBDcmVhdGVBbXBob3JhVXNlclxuICovXG5leHBvcnQgaW50ZXJmYWNlIENyZWF0ZUFtcGhvcmFVc2VyIHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBDcmVhdGVBbXBob3JhVXNlclxuICAgICAqL1xuICAgIHBob25lTnVtYmVyPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBDcmVhdGVBbXBob3JhVXNlclxuICAgICAqL1xuICAgIGFib3V0Pzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBDcmVhdGVBbXBob3JhVXNlclxuICAgICAqL1xuICAgIGZ1bGxOYW1lPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBDcmVhdGVBbXBob3JhVXNlclxuICAgICAqL1xuICAgIHVzZXJOYW1lOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQ3JlYXRlQW1waG9yYVVzZXJcbiAgICAgKi9cbiAgICBwYXNzd29yZDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIENyZWF0ZUFtcGhvcmFVc2VyXG4gICAgICovXG4gICAgY29uZmlybVBhc3N3b3JkPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBDcmVhdGVBbXBob3JhVXNlclxuICAgICAqL1xuICAgIGVtYWlsOiBzdHJpbmc7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBDcmVhdGVBbXBob3JhVXNlckFsbE9mXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlQW1waG9yYVVzZXJBbGxPZiB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQ3JlYXRlQW1waG9yYVVzZXJBbGxPZlxuICAgICAqL1xuICAgIHBhc3N3b3JkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQ3JlYXRlQW1waG9yYVVzZXJBbGxPZlxuICAgICAqL1xuICAgIGNvbmZpcm1QYXNzd29yZD86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQ3JlYXRlQW1waG9yYVVzZXJBbGxPZlxuICAgICAqL1xuICAgIGVtYWlsOiBzdHJpbmc7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBDcmVhdGVBcHBMb2NhdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIENyZWF0ZUFwcExvY2F0aW9uIGV4dGVuZHMgQXBwTG9jYXRpb25CYXNlIHtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIENyZWF0ZUFwcGxpY2F0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlQXBwbGljYXRpb24ge1xuICAgIC8qKlxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgbmFtZSBvZiB5b3VyIGFwcGxpY2F0aW9uLiBXaWxsIGJlIHNob3duIG9uIHRoZSBjb25zZW50IHBhZ2UuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQ3JlYXRlQXBwbGljYXRpb25cbiAgICAgKi9cbiAgICBuYW1lPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBHZXRzIG9yIHNldHMgYSB1cmwgZm9yIGZyb250IGNoYW5uZWwgSFRUUCBsb2dvdXRzLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIENyZWF0ZUFwcGxpY2F0aW9uXG4gICAgICovXG4gICAgbG9nb3V0VXJsPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGFsbG93ZWQgc2NvcGVzIGZvciB0aGUgYXBwLiBvcGVuaWQgaXMgbm90IHJlcXVpcmVkLCBhbmQgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGluY2x1ZGVkLiBPcHRpb25zIGluY2x1ZGU6IFtcXCdhbXBob3JhXFwnLCBcXCdhbXBob3JhLnB1cmNoYXNlXFwnLCBcXCdwcm9maWxlXFwnLCBcXCdlbWFpbFxcJywgXFwnd2ViX2FwaVxcJ10uXG4gICAgICogQHR5cGUge0FycmF5PHN0cmluZz59XG4gICAgICogQG1lbWJlcm9mIENyZWF0ZUFwcGxpY2F0aW9uXG4gICAgICovXG4gICAgYWxsb3dlZFNjb3Blcz86IEFycmF5PHN0cmluZz4gfCBudWxsO1xuICAgIC8qKlxuICAgICAqIEdldHMgb3Igc2V0cyBhIGNvbGxlY3Rpb24gb2YgbG9jYXRpb25zIHlvdXIgYXBwbGljYXRpb24gd2lsbCBydW4uXG4gICAgICogQHR5cGUge0FycmF5PENyZWF0ZUFwcExvY2F0aW9uPn1cbiAgICAgKiBAbWVtYmVyb2YgQ3JlYXRlQXBwbGljYXRpb25cbiAgICAgKi9cbiAgICBsb2NhdGlvbnM/OiBBcnJheTxDcmVhdGVBcHBMb2NhdGlvbj4gfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgQ3JlYXRlQXBwbGljYXRpb25BbGxPZlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENyZWF0ZUFwcGxpY2F0aW9uQWxsT2Yge1xuICAgIC8qKlxuICAgICAqIEdldHMgb3Igc2V0cyBhIGNvbGxlY3Rpb24gb2YgbG9jYXRpb25zIHlvdXIgYXBwbGljYXRpb24gd2lsbCBydW4uXG4gICAgICogQHR5cGUge0FycmF5PENyZWF0ZUFwcExvY2F0aW9uPn1cbiAgICAgKiBAbWVtYmVyb2YgQ3JlYXRlQXBwbGljYXRpb25BbGxPZlxuICAgICAqL1xuICAgIGxvY2F0aW9ucz86IEFycmF5PENyZWF0ZUFwcExvY2F0aW9uPiB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBDcmVhdGVJbnZvaWNlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlSW52b2ljZSB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge0RhdGV9XG4gICAgICogQG1lbWJlcm9mIENyZWF0ZUludm9pY2VcbiAgICAgKi9cbiAgICBtb250aD86IERhdGU7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQ3JlYXRlSW52b2ljZVxuICAgICAqL1xuICAgIG9yZ2FuaXNhdGlvbklkPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAbWVtYmVyb2YgQ3JlYXRlSW52b2ljZVxuICAgICAqL1xuICAgIHByZXZpZXc/OiBib29sZWFuIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAbWVtYmVyb2YgQ3JlYXRlSW52b2ljZVxuICAgICAqL1xuICAgIHJlZ2VuZXJhdGU/OiBib29sZWFuIHwgbnVsbDtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIENyZWF0ZVNpZ25hbFxuICovXG5leHBvcnQgaW50ZXJmYWNlIENyZWF0ZVNpZ25hbCB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQ3JlYXRlU2lnbmFsXG4gICAgICovXG4gICAgcHJvcGVydHk/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIENyZWF0ZVNpZ25hbFxuICAgICAqL1xuICAgIHZhbHVlVHlwZT86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3sgW2tleTogc3RyaW5nXTogc3RyaW5nOyB9fVxuICAgICAqIEBtZW1iZXJvZiBDcmVhdGVTaWduYWxcbiAgICAgKi9cbiAgICBhdHRyaWJ1dGVzPzogeyBba2V5OiBzdHJpbmddOiBzdHJpbmc7IH0gfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgQ3JlYXRlVGVybXNPZlVzZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIENyZWF0ZVRlcm1zT2ZVc2Uge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIENyZWF0ZVRlcm1zT2ZVc2VcbiAgICAgKi9cbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgQ3JlYXRlVGVybXNPZlVzZVxuICAgICAqL1xuICAgIGNvbnRlbnRzOiBzdHJpbmc7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBEYXRlVGltZVJhbmdlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGF0ZVRpbWVSYW5nZSB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge0RhdGV9XG4gICAgICogQG1lbWJlcm9mIERhdGVUaW1lUmFuZ2VcbiAgICAgKi9cbiAgICBmcm9tPzogRGF0ZTtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7RGF0ZX1cbiAgICAgKiBAbWVtYmVyb2YgRGF0ZVRpbWVSYW5nZVxuICAgICAqL1xuICAgIHRvPzogRGF0ZTtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIERldGFpbGVkQW1waG9yYVxuICovXG5leHBvcnQgaW50ZXJmYWNlIERldGFpbGVkQW1waG9yYSB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgRGV0YWlsZWRBbXBob3JhXG4gICAgICovXG4gICAgaWQ/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBtZW1iZXJvZiBEZXRhaWxlZEFtcGhvcmFcbiAgICAgKi9cbiAgICBpc0RlbGV0ZWQ/OiBib29sZWFuIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7RGF0ZX1cbiAgICAgKiBAbWVtYmVyb2YgRGV0YWlsZWRBbXBob3JhXG4gICAgICovXG4gICAgY3JlYXRlZERhdGU/OiBEYXRlIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIG93bmVyXFwncyBvcmdhbmlzYXRpb24gSWQuIFdpbGwgYmUgc2V0IGJ5IHRoZSBzZXJ2ZXIgdXBvbiBjcmVhdGlvbi5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBEZXRhaWxlZEFtcGhvcmFcbiAgICAgKi9cbiAgICBvcmdhbmlzYXRpb25JZD86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgRGV0YWlsZWRBbXBob3JhXG4gICAgICovXG4gICAgbmFtZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIERldGFpbGVkQW1waG9yYVxuICAgICAqL1xuICAgIHByaWNlOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgRGV0YWlsZWRBbXBob3JhXG4gICAgICovXG4gICAgbGFiZWxzPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBEZXRhaWxlZEFtcGhvcmFcbiAgICAgKi9cbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIERldGFpbGVkQW1waG9yYVxuICAgICAqL1xuICAgIGxhdD86IG51bWJlciB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgRGV0YWlsZWRBbXBob3JhXG4gICAgICovXG4gICAgbG9uPzogbnVtYmVyIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBEZXRhaWxlZEFtcGhvcmFcbiAgICAgKi9cbiAgICB0ZXJtc09mVXNlSWQ/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIERldGFpbGVkQW1waG9yYVxuICAgICAqL1xuICAgIHB1cmNoYXNlQ291bnQ/OiBudW1iZXIgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIERldGFpbGVkQW1waG9yYVxuICAgICAqL1xuICAgIHNpZ25hbENvdW50PzogbnVtYmVyIHwgbnVsbDtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIERldGFpbGVkQW1waG9yYUFsbE9mXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGV0YWlsZWRBbXBob3JhQWxsT2Yge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIERldGFpbGVkQW1waG9yYUFsbE9mXG4gICAgICovXG4gICAgcHVyY2hhc2VDb3VudD86IG51bWJlciB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgRGV0YWlsZWRBbXBob3JhQWxsT2ZcbiAgICAgKi9cbiAgICBzaWduYWxDb3VudD86IG51bWJlciB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBFZGl0QW1waG9yYVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEVkaXRBbXBob3JhIHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBFZGl0QW1waG9yYVxuICAgICAqL1xuICAgIGlkPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAbWVtYmVyb2YgRWRpdEFtcGhvcmFcbiAgICAgKi9cbiAgICBpc0RlbGV0ZWQ/OiBib29sZWFuIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7RGF0ZX1cbiAgICAgKiBAbWVtYmVyb2YgRWRpdEFtcGhvcmFcbiAgICAgKi9cbiAgICBjcmVhdGVkRGF0ZT86IERhdGUgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgb3duZXJcXCdzIG9yZ2FuaXNhdGlvbiBJZC4gV2lsbCBiZSBzZXQgYnkgdGhlIHNlcnZlciB1cG9uIGNyZWF0aW9uLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEVkaXRBbXBob3JhXG4gICAgICovXG4gICAgb3JnYW5pc2F0aW9uSWQ/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEVkaXRBbXBob3JhXG4gICAgICovXG4gICAgbmFtZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIEVkaXRBbXBob3JhXG4gICAgICovXG4gICAgcHJpY2U6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBFZGl0QW1waG9yYVxuICAgICAqL1xuICAgIGxhYmVscz86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgRWRpdEFtcGhvcmFcbiAgICAgKi9cbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIEVkaXRBbXBob3JhXG4gICAgICovXG4gICAgbGF0PzogbnVtYmVyIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBFZGl0QW1waG9yYVxuICAgICAqL1xuICAgIGxvbj86IG51bWJlciB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgRWRpdEFtcGhvcmFcbiAgICAgKi9cbiAgICB0ZXJtc09mVXNlSWQ/OiBzdHJpbmcgfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgRWRpdEFtcGhvcmFBbGxPZlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEVkaXRBbXBob3JhQWxsT2Yge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEVkaXRBbXBob3JhQWxsT2ZcbiAgICAgKi9cbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIEVkaXRBbXBob3JhQWxsT2ZcbiAgICAgKi9cbiAgICBsYXQ/OiBudW1iZXIgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIEVkaXRBbXBob3JhQWxsT2ZcbiAgICAgKi9cbiAgICBsb24/OiBudW1iZXIgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEVkaXRBbXBob3JhQWxsT2ZcbiAgICAgKi9cbiAgICB0ZXJtc09mVXNlSWQ/OiBzdHJpbmcgfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgRW50aXR5XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRW50aXR5IHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBFbnRpdHlcbiAgICAgKi9cbiAgICBpZD86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQG1lbWJlcm9mIEVudGl0eVxuICAgICAqL1xuICAgIGlzRGVsZXRlZD86IGJvb2xlYW4gfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtEYXRlfVxuICAgICAqIEBtZW1iZXJvZiBFbnRpdHlcbiAgICAgKi9cbiAgICBjcmVhdGVkRGF0ZT86IERhdGUgfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgRXZlbnRQcm9wZXJ0eVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEV2ZW50UHJvcGVydHkge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEV2ZW50UHJvcGVydHlcbiAgICAgKi9cbiAgICBuYW1lPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBFdmVudFByb3BlcnR5XG4gICAgICovXG4gICAgdHlwZT86IHN0cmluZyB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBGZWVkSXRlbVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEZlZWRJdGVtIHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7RGF0ZX1cbiAgICAgKiBAbWVtYmVyb2YgRmVlZEl0ZW1cbiAgICAgKi9cbiAgICB0aW1lc3RhbXA/OiBEYXRlO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtQb3N0U3ViamVjdFR5cGV9XG4gICAgICogQG1lbWJlcm9mIEZlZWRJdGVtXG4gICAgICovXG4gICAgc3ViamVjdFR5cGU/OiBQb3N0U3ViamVjdFR5cGU7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge1Bvc3RFdmVudFR5cGV9XG4gICAgICogQG1lbWJlcm9mIEZlZWRJdGVtXG4gICAgICovXG4gICAgZXZlbnRUeXBlPzogUG9zdEV2ZW50VHlwZTtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBGZWVkSXRlbVxuICAgICAqL1xuICAgIHN1YmplY3RJZD86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgRmVlZEl0ZW1cbiAgICAgKi9cbiAgICB0ZXh0Pzogc3RyaW5nIHwgbnVsbDtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIEZpbGVMaXN0T3B0aW9uc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVMaXN0T3B0aW9ucyB7XG4gICAgLyoqXG4gICAgICogR2V0cyBvciBzZXRzIGhvdyBtYW55IGl0ZW1zIHRvIHJldHVybi4gRGVmYXVsdHMgdG8gNjQuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgRmlsZUxpc3RPcHRpb25zXG4gICAgICovXG4gICAgdGFrZT86IG51bWJlciB8IG51bGw7XG4gICAgLyoqXG4gICAgICogR2V0cyBvciBzZXRzIGhvdyBtYW55IGl0ZW1zIHRvIHNraXAgYmVmb3JlIHJldHVybmluZy4gRGVmYXVsdHMgdG8gMC5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBGaWxlTGlzdE9wdGlvbnNcbiAgICAgKi9cbiAgICBza2lwPzogbnVtYmVyIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIHRoZSBvcmRlckJ5IHBhcmFtZXRlci4gT3B0aW9ucyBhcmUgQWxwaGFiZXRpY2FsIG9yIExhc3RNb2RpZmllZC5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBGaWxlTGlzdE9wdGlvbnNcbiAgICAgKi9cbiAgICBvcmRlckJ5Pzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBHZXRzIG9yIHNldHMgYSBwcmVmaXggZmlsdGVyIGZvciBhbGwgZmlsZSBuYW1lcy4gSXMgY2FzZSBzZW5zaXRpdmUuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgRmlsZUxpc3RPcHRpb25zXG4gICAgICovXG4gICAgcHJlZml4Pzogc3RyaW5nIHwgbnVsbDtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIEZpbGVMaXN0T3B0aW9uc0FsbE9mXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZUxpc3RPcHRpb25zQWxsT2Yge1xuICAgIC8qKlxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgdGhlIG9yZGVyQnkgcGFyYW1ldGVyLiBPcHRpb25zIGFyZSBBbHBoYWJldGljYWwgb3IgTGFzdE1vZGlmaWVkLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEZpbGVMaXN0T3B0aW9uc0FsbE9mXG4gICAgICovXG4gICAgb3JkZXJCeT86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogR2V0cyBvciBzZXRzIGEgcHJlZml4IGZpbHRlciBmb3IgYWxsIGZpbGUgbmFtZXMuIElzIGNhc2Ugc2Vuc2l0aXZlLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEZpbGVMaXN0T3B0aW9uc0FsbE9mXG4gICAgICovXG4gICAgcHJlZml4Pzogc3RyaW5nIHwgbnVsbDtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIEZpbGVRdWVyeU9wdGlvbnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBGaWxlUXVlcnlPcHRpb25zIHtcbiAgICAvKipcbiAgICAgKiBHZXRzIG9yIHNldHMgaG93IG1hbnkgaXRlbXMgdG8gcmV0dXJuLiBEZWZhdWx0cyB0byA2NC5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBGaWxlUXVlcnlPcHRpb25zXG4gICAgICovXG4gICAgdGFrZT86IG51bWJlciB8IG51bGw7XG4gICAgLyoqXG4gICAgICogR2V0cyBvciBzZXRzIGhvdyBtYW55IGl0ZW1zIHRvIHNraXAgYmVmb3JlIHJldHVybmluZy4gRGVmYXVsdHMgdG8gMC5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBGaWxlUXVlcnlPcHRpb25zXG4gICAgICovXG4gICAgc2tpcD86IG51bWJlciB8IG51bGw7XG4gICAgLyoqXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSB0aGUgb3JkZXJCeSBwYXJhbWV0ZXIuIE9wdGlvbnMgYXJlIEFscGhhYmV0aWNhbCBvciBMYXN0TW9kaWZpZWQuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgRmlsZVF1ZXJ5T3B0aW9uc1xuICAgICAqL1xuICAgIG9yZGVyQnk/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIEdldHMgb3Igc2V0cyBhIHByZWZpeCBmaWx0ZXIgZm9yIGFsbCBmaWxlIG5hbWVzLiBJcyBjYXNlIHNlbnNpdGl2ZS5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBGaWxlUXVlcnlPcHRpb25zXG4gICAgICovXG4gICAgcHJlZml4Pzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGF0dHJpYnV0ZSBmaWx0ZXJzLlxuICAgICAqIEB0eXBlIHt7IFtrZXk6IHN0cmluZ106IHN0cmluZzsgfX1cbiAgICAgKiBAbWVtYmVyb2YgRmlsZVF1ZXJ5T3B0aW9uc1xuICAgICAqL1xuICAgIGF0dHJpYnV0ZXM/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZzsgfSB8IG51bGw7XG4gICAgLyoqXG4gICAgICogR2V0cyBvciBzZXRzIGEgdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIHdoZXRoZXIgYWxsIGF0dHJpYnV0ZXMgYXJlIHJlcXVpcmVkIHRvIG1hdGNoLiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAbWVtYmVyb2YgRmlsZVF1ZXJ5T3B0aW9uc1xuICAgICAqL1xuICAgIGFsbEF0dHJpYnV0ZXM/OiBib29sZWFuO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgRmlsZVF1ZXJ5T3B0aW9uc0FsbE9mXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZVF1ZXJ5T3B0aW9uc0FsbE9mIHtcbiAgICAvKipcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIGF0dHJpYnV0ZSBmaWx0ZXJzLlxuICAgICAqIEB0eXBlIHt7IFtrZXk6IHN0cmluZ106IHN0cmluZzsgfX1cbiAgICAgKiBAbWVtYmVyb2YgRmlsZVF1ZXJ5T3B0aW9uc0FsbE9mXG4gICAgICovXG4gICAgYXR0cmlidXRlcz86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nOyB9IHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBHZXRzIG9yIHNldHMgYSB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgd2hldGhlciBhbGwgYXR0cmlidXRlcyBhcmUgcmVxdWlyZWQgdG8gbWF0Y2guIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBtZW1iZXJvZiBGaWxlUXVlcnlPcHRpb25zQWxsT2ZcbiAgICAgKi9cbiAgICBhbGxBdHRyaWJ1dGVzPzogYm9vbGVhbjtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIEZ1enp5U2VhcmNoUmVzcG9uc2VcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBGdXp6eVNlYXJjaFJlc3BvbnNlIHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7U3VtbWFyeX1cbiAgICAgKiBAbWVtYmVyb2YgRnV6enlTZWFyY2hSZXNwb25zZVxuICAgICAqL1xuICAgIHN1bW1hcnk/OiBTdW1tYXJ5IHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7QXJyYXk8UmVzdWx0Pn1cbiAgICAgKiBAbWVtYmVyb2YgRnV6enlTZWFyY2hSZXNwb25zZVxuICAgICAqL1xuICAgIHJlc3VsdHM/OiBBcnJheTxSZXN1bHQ+IHwgbnVsbDtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIEdldEV2ZW50c1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEdldEV2ZW50cyB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge0FycmF5PG9iamVjdD59XG4gICAgICogQG1lbWJlcm9mIEdldEV2ZW50c1xuICAgICAqL1xuICAgIHRpbWVTZXJpZXNJZD86IEFycmF5PG9iamVjdD4gfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtEYXRlVGltZVJhbmdlfVxuICAgICAqIEBtZW1iZXJvZiBHZXRFdmVudHNcbiAgICAgKi9cbiAgICBzZWFyY2hTcGFuPzogRGF0ZVRpbWVSYW5nZSB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge1RzeH1cbiAgICAgKiBAbWVtYmVyb2YgR2V0RXZlbnRzXG4gICAgICovXG4gICAgZmlsdGVyPzogVHN4IHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7QXJyYXk8RXZlbnRQcm9wZXJ0eT59XG4gICAgICogQG1lbWJlcm9mIEdldEV2ZW50c1xuICAgICAqL1xuICAgIHByb2plY3RlZFByb3BlcnRpZXM/OiBBcnJheTxFdmVudFByb3BlcnR5PiB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgR2V0RXZlbnRzXG4gICAgICovXG4gICAgdGFrZT86IG51bWJlciB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBHZXRTZXJpZXNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBHZXRTZXJpZXMge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtBcnJheTxvYmplY3Q+fVxuICAgICAqIEBtZW1iZXJvZiBHZXRTZXJpZXNcbiAgICAgKi9cbiAgICB0aW1lU2VyaWVzSWQ/OiBBcnJheTxvYmplY3Q+IHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7RGF0ZVRpbWVSYW5nZX1cbiAgICAgKiBAbWVtYmVyb2YgR2V0U2VyaWVzXG4gICAgICovXG4gICAgc2VhcmNoU3Bhbj86IERhdGVUaW1lUmFuZ2UgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtUc3h9XG4gICAgICogQG1lbWJlcm9mIEdldFNlcmllc1xuICAgICAqL1xuICAgIGZpbHRlcj86IFRzeCB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge0FycmF5PHN0cmluZz59XG4gICAgICogQG1lbWJlcm9mIEdldFNlcmllc1xuICAgICAqL1xuICAgIHByb2plY3RlZFZhcmlhYmxlcz86IEFycmF5PHN0cmluZz4gfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHt7IFtrZXk6IHN0cmluZ106IFZhcmlhYmxlOyB9fVxuICAgICAqIEBtZW1iZXJvZiBHZXRTZXJpZXNcbiAgICAgKi9cbiAgICBpbmxpbmVWYXJpYWJsZXM/OiB7IFtrZXk6IHN0cmluZ106IFZhcmlhYmxlOyB9IHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBHZXRTZXJpZXNcbiAgICAgKi9cbiAgICB0YWtlPzogbnVtYmVyIHwgbnVsbDtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIEhhbmRsZUludml0YXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBIYW5kbGVJbnZpdGF0aW9uIHtcbiAgICAvKipcbiAgICAgKiBHZXRzIG9yIHNldHMgdGhlIElkIG9mIHRoZSBvcmdhbmlzYXRpb24gdGhhdCBpc3N1ZWQgdGhlIGludml0YXRpb24uXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgSGFuZGxlSW52aXRhdGlvblxuICAgICAqL1xuICAgIHRhcmdldE9yZ2FuaXNhdGlvbklkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogR2V0cyBvciBzZXRzIHdoZXRoZXIgdGhlIEludml0YXRpb24gd2lsbCBiZSBhY2NlcHRlZC4gVHJ1ZSA9PSBBY2NlcHQuIEZhbHNlID09IFJlamVjdC5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAbWVtYmVyb2YgSGFuZGxlSW52aXRhdGlvblxuICAgICAqL1xuICAgIGFjY2VwdE9yUmVqZWN0OiBib29sZWFuO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgSW50ZXJwb2xhdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIEludGVycG9sYXRpb24ge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEludGVycG9sYXRpb25cbiAgICAgKi9cbiAgICBraW5kPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7SW50ZXJwb2xhdGlvbkJvdW5kYXJ5fVxuICAgICAqIEBtZW1iZXJvZiBJbnRlcnBvbGF0aW9uXG4gICAgICovXG4gICAgYm91bmRhcnk/OiBJbnRlcnBvbGF0aW9uQm91bmRhcnkgfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgSW50ZXJwb2xhdGlvbkJvdW5kYXJ5XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW50ZXJwb2xhdGlvbkJvdW5kYXJ5IHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBJbnRlcnBvbGF0aW9uQm91bmRhcnlcbiAgICAgKi9cbiAgICBzcGFuPzogc3RyaW5nIHwgbnVsbDtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIEludml0YXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJbnZpdGF0aW9uIHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBJbnZpdGF0aW9uXG4gICAgICovXG4gICAgdGFyZ2V0RW1haWw6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBJbnZpdGF0aW9uXG4gICAgICovXG4gICAgdGFyZ2V0T3JnYW5pc2F0aW9uSWQ/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEludml0YXRpb25cbiAgICAgKi9cbiAgICBzdGF0ZT86IHN0cmluZyB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBJbnZvaWNlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW52b2ljZSB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgSW52b2ljZVxuICAgICAqL1xuICAgIGlkPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBJbnZvaWNlXG4gICAgICovXG4gICAgb3JnYW5pc2F0aW9uSWQ/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEludm9pY2VcbiAgICAgKi9cbiAgICBuYW1lPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAbWVtYmVyb2YgSW52b2ljZVxuICAgICAqL1xuICAgIGlzUGFpZD86IGJvb2xlYW4gfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtEYXRlfVxuICAgICAqIEBtZW1iZXJvZiBJbnZvaWNlXG4gICAgICovXG4gICAgZGF0ZUNyZWF0ZWQ/OiBEYXRlIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7RGF0ZX1cbiAgICAgKiBAbWVtYmVyb2YgSW52b2ljZVxuICAgICAqL1xuICAgIHRpbWVzdGFtcD86IERhdGUgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIEludm9pY2VcbiAgICAgKi9cbiAgICBvcGVuaW5nQmFsYW5jZT86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBJbnZvaWNlXG4gICAgICovXG4gICAgaW52b2ljZUJhbGFuY2U/OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge0FycmF5PFRyYW5zYWN0aW9uPn1cbiAgICAgKiBAbWVtYmVyb2YgSW52b2ljZVxuICAgICAqL1xuICAgIHRyYW5zYWN0aW9ucz86IEFycmF5PFRyYW5zYWN0aW9uPiB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBJdGVtUmVzcG9uc2VPZkludm9pY2VcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJdGVtUmVzcG9uc2VPZkludm9pY2Uge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIEl0ZW1SZXNwb25zZU9mSW52b2ljZVxuICAgICAqL1xuICAgIG1lc3NhZ2U/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtJbnZvaWNlfVxuICAgICAqIEBtZW1iZXJvZiBJdGVtUmVzcG9uc2VPZkludm9pY2VcbiAgICAgKi9cbiAgICBpdGVtPzogSW52b2ljZSB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBMb2dpbkNsYWltXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTG9naW5DbGFpbSB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgTG9naW5DbGFpbVxuICAgICAqL1xuICAgIHR5cGU/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgTG9naW5DbGFpbVxuICAgICAqL1xuICAgIHZhbHVlPzogc3RyaW5nIHwgbnVsbDtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIExvZ2luUmVxdWVzdFxuICovXG5leHBvcnQgaW50ZXJmYWNlIExvZ2luUmVxdWVzdCB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgTG9naW5SZXF1ZXN0XG4gICAgICovXG4gICAgdXNlcm5hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBMb2dpblJlcXVlc3RcbiAgICAgKi9cbiAgICBwYXNzd29yZDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtBcnJheTxMb2dpbkNsYWltPn1cbiAgICAgKiBAbWVtYmVyb2YgTG9naW5SZXF1ZXN0XG4gICAgICovXG4gICAgY2xhaW1zPzogQXJyYXk8TG9naW5DbGFpbT4gfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgTWVtYmVyc2hpcFxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1lbWJlcnNoaXAge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIE1lbWJlcnNoaXBcbiAgICAgKi9cbiAgICB1c2VybmFtZT86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgTWVtYmVyc2hpcFxuICAgICAqL1xuICAgIHVzZXJJZD86IHN0cmluZyB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBOdW1lcmljVmFyaWFibGVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBOdW1lcmljVmFyaWFibGUge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtUc3h9XG4gICAgICogQG1lbWJlcm9mIE51bWVyaWNWYXJpYWJsZVxuICAgICAqL1xuICAgIGZpbHRlcj86IFRzeCB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge1RzeH1cbiAgICAgKiBAbWVtYmVyb2YgTnVtZXJpY1ZhcmlhYmxlXG4gICAgICovXG4gICAgdmFsdWU/OiBUc3ggfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtJbnRlcnBvbGF0aW9ufVxuICAgICAqIEBtZW1iZXJvZiBOdW1lcmljVmFyaWFibGVcbiAgICAgKi9cbiAgICBpbnRlcnBvbGF0aW9uPzogSW50ZXJwb2xhdGlvbiB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge1RzeH1cbiAgICAgKiBAbWVtYmVyb2YgTnVtZXJpY1ZhcmlhYmxlXG4gICAgICovXG4gICAgYWdncmVnYXRpb24/OiBUc3ggfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgT3JnYW5pc2F0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgT3JnYW5pc2F0aW9uIHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBPcmdhbmlzYXRpb25cbiAgICAgKi9cbiAgICBpZD86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQG1lbWJlcm9mIE9yZ2FuaXNhdGlvblxuICAgICAqL1xuICAgIGlzRGVsZXRlZD86IGJvb2xlYW4gfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtEYXRlfVxuICAgICAqIEBtZW1iZXJvZiBPcmdhbmlzYXRpb25cbiAgICAgKi9cbiAgICBjcmVhdGVkRGF0ZT86IERhdGUgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIE9yZ2FuaXNhdGlvblxuICAgICAqL1xuICAgIG5hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBPcmdhbmlzYXRpb25cbiAgICAgKi9cbiAgICBhYm91dDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIE9yZ2FuaXNhdGlvblxuICAgICAqL1xuICAgIHdlYnNpdGVVcmw6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBPcmdhbmlzYXRpb25cbiAgICAgKi9cbiAgICBhZGRyZXNzPzogc3RyaW5nIHwgbnVsbDtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIE9yZ2FuaXNhdGlvbkFjY2Vzc1J1bGVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBPcmdhbmlzYXRpb25BY2Nlc3NSdWxlIHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBPcmdhbmlzYXRpb25BY2Nlc3NSdWxlXG4gICAgICovXG4gICAgaWQ/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIE9yZ2FuaXNhdGlvbkFjY2Vzc1J1bGVcbiAgICAgKi9cbiAgICBhbGxvd09yRGVueT86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgT3JnYW5pc2F0aW9uQWNjZXNzUnVsZVxuICAgICAqL1xuICAgIHByaW9yaXR5PzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIE9yZ2FuaXNhdGlvbkFjY2Vzc1J1bGVcbiAgICAgKi9cbiAgICBvcmdhbmlzYXRpb25JZDogc3RyaW5nO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgT3JnYW5pc2F0aW9uQWNjZXNzUnVsZUFsbE9mXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgT3JnYW5pc2F0aW9uQWNjZXNzUnVsZUFsbE9mIHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBPcmdhbmlzYXRpb25BY2Nlc3NSdWxlQWxsT2ZcbiAgICAgKi9cbiAgICBvcmdhbmlzYXRpb25JZDogc3RyaW5nO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgT3JnYW5pc2F0aW9uQWxsT2ZcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBPcmdhbmlzYXRpb25BbGxPZiB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgT3JnYW5pc2F0aW9uQWxsT2ZcbiAgICAgKi9cbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgT3JnYW5pc2F0aW9uQWxsT2ZcbiAgICAgKi9cbiAgICBhYm91dDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIE9yZ2FuaXNhdGlvbkFsbE9mXG4gICAgICovXG4gICAgd2Vic2l0ZVVybDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIE9yZ2FuaXNhdGlvbkFsbE9mXG4gICAgICovXG4gICAgYWRkcmVzcz86IHN0cmluZyB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBQYWdlZFJlc3BvbnNlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGFnZWRSZXNwb25zZSB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgUGFnZWRSZXNwb25zZVxuICAgICAqL1xuICAgIGNvbnRpbnVhdGlvblRva2VuPzogc3RyaW5nIHwgbnVsbDtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIFBhZ2luYXRlZFJlc3BvbnNlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGFnaW5hdGVkUmVzcG9uc2Uge1xuICAgIC8qKlxuICAgICAqIEdldHMgb3Igc2V0cyBob3cgbWFueSBpdGVtcyB0byByZXR1cm4uIERlZmF1bHRzIHRvIDY0LlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIFBhZ2luYXRlZFJlc3BvbnNlXG4gICAgICovXG4gICAgdGFrZT86IG51bWJlciB8IG51bGw7XG4gICAgLyoqXG4gICAgICogR2V0cyBvciBzZXRzIGhvdyBtYW55IGl0ZW1zIHRvIHNraXAgYmVmb3JlIHJldHVybmluZy4gRGVmYXVsdHMgdG8gMC5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBQYWdpbmF0ZWRSZXNwb25zZVxuICAgICAqL1xuICAgIHNraXA/OiBudW1iZXIgfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgUGVybWlzc2lvbnNSZXF1ZXN0XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGVybWlzc2lvbnNSZXF1ZXN0IHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7QXJyYXk8QWNjZXNzTGV2ZWxRdWVyeT59XG4gICAgICogQG1lbWJlcm9mIFBlcm1pc3Npb25zUmVxdWVzdFxuICAgICAqL1xuICAgIGFjY2Vzc1F1ZXJpZXM/OiBBcnJheTxBY2Nlc3NMZXZlbFF1ZXJ5PiB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBQZXJtaXNzaW9uc1Jlc3BvbnNlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGVybWlzc2lvbnNSZXNwb25zZSB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge0FycmF5PEFjY2Vzc0xldmVsUmVzcG9uc2U+fVxuICAgICAqIEBtZW1iZXJvZiBQZXJtaXNzaW9uc1Jlc3BvbnNlXG4gICAgICovXG4gICAgYWNjZXNzUmVzcG9uc2VzPzogQXJyYXk8QWNjZXNzTGV2ZWxSZXNwb25zZT4gfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgUGxhbkluZm9ybWF0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGxhbkluZm9ybWF0aW9uIHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7UGxhblR5cGVzfVxuICAgICAqIEBtZW1iZXJvZiBQbGFuSW5mb3JtYXRpb25cbiAgICAgKi9cbiAgICBwbGFuVHlwZT86IFBsYW5UeXBlcztcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBQbGFuSW5mb3JtYXRpb25cbiAgICAgKi9cbiAgICBmcmllbmRseU5hbWU/OiBzdHJpbmcgfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBlbnVtIFBsYW5UeXBlcyB7XG4gICAgTlVNQkVSXzAgPSAwLFxuICAgIE5VTUJFUl8xID0gMSxcbiAgICBOVU1CRVJfMiA9IDIsXG4gICAgTlVNQkVSXzMgPSAzLFxuICAgIE5VTUJFUl80ID0gNFxufVxuXG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBQb3NpdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBvc2l0aW9uIHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBQb3NpdGlvblxuICAgICAqL1xuICAgIGxhdD86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBQb3NpdGlvblxuICAgICAqL1xuICAgIGxvbj86IG51bWJlcjtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5leHBvcnQgZW51bSBQb3N0RXZlbnRUeXBlIHtcbiAgICBDcmVhdGVkID0gJ0NyZWF0ZWQnLFxuICAgIFB1cmNoYXNlZCA9ICdQdXJjaGFzZWQnLFxuICAgIFNvbGQgPSAnU29sZCdcbn1cblxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBlbnVtIFBvc3RTdWJqZWN0VHlwZSB7XG4gICAgQW1waG9yYSA9ICdBbXBob3JhJ1xufVxuXG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBQcm9ibGVtRGV0YWlsc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFByb2JsZW1EZXRhaWxzIHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBQcm9ibGVtRGV0YWlsc1xuICAgICAqL1xuICAgIHR5cGU/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIFByb2JsZW1EZXRhaWxzXG4gICAgICovXG4gICAgdGl0bGU/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIFByb2JsZW1EZXRhaWxzXG4gICAgICovXG4gICAgc3RhdHVzPzogbnVtYmVyIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBQcm9ibGVtRGV0YWlsc1xuICAgICAqL1xuICAgIGRldGFpbD86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgUHJvYmxlbURldGFpbHNcbiAgICAgKi9cbiAgICBpbnN0YW5jZT86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3sgW2tleTogc3RyaW5nXTogb2JqZWN0OyB9fVxuICAgICAqIEBtZW1iZXJvZiBQcm9ibGVtRGV0YWlsc1xuICAgICAqL1xuICAgIGV4dGVuc2lvbnM/OiB7IFtrZXk6IHN0cmluZ106IG9iamVjdDsgfSB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBQcm9wZXJ0eVZhbHVlc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFByb3BlcnR5VmFsdWVzIHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBQcm9wZXJ0eVZhbHVlc1xuICAgICAqL1xuICAgIG5hbWU/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIFByb3BlcnR5VmFsdWVzXG4gICAgICovXG4gICAgdHlwZT86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge0FycmF5PG9iamVjdD59XG4gICAgICogQG1lbWJlcm9mIFByb3BlcnR5VmFsdWVzXG4gICAgICovXG4gICAgdmFsdWVzPzogQXJyYXk8b2JqZWN0PiB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBQcm9wZXJ0eVZhbHVlc0FsbE9mXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUHJvcGVydHlWYWx1ZXNBbGxPZiB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge0FycmF5PG9iamVjdD59XG4gICAgICogQG1lbWJlcm9mIFByb3BlcnR5VmFsdWVzQWxsT2ZcbiAgICAgKi9cbiAgICB2YWx1ZXM/OiBBcnJheTxvYmplY3Q+IHwgbnVsbDtcbn1cbi8qKlxuICogUXVhbGl0eSBtZXRyaWNzIGZvciBhbiBBbXBob3JhLCBiZXR3ZWVuIDEgYW5kIDQuXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIFF1YWxpdHlcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBRdWFsaXR5IHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBRdWFsaXR5XG4gICAgICovXG4gICAgYWNjdXJhY3k/OiBudW1iZXIgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIFF1YWxpdHlcbiAgICAgKi9cbiAgICBjb21wbGV0ZW5lc3M/OiBudW1iZXIgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIFF1YWxpdHlcbiAgICAgKi9cbiAgICBncmFudWxhcml0eT86IG51bWJlciB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgUXVhbGl0eVxuICAgICAqL1xuICAgIHJlbGlhYmlsaXR5PzogbnVtYmVyIHwgbnVsbDtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIFF1ZXJ5UmVxdWVzdFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFF1ZXJ5UmVxdWVzdCB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge0dldEV2ZW50c31cbiAgICAgKiBAbWVtYmVyb2YgUXVlcnlSZXF1ZXN0XG4gICAgICovXG4gICAgZ2V0RXZlbnRzPzogR2V0RXZlbnRzIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7R2V0U2VyaWVzfVxuICAgICAqIEBtZW1iZXJvZiBRdWVyeVJlcXVlc3RcbiAgICAgKi9cbiAgICBnZXRTZXJpZXM/OiBHZXRTZXJpZXMgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtBZ2dyZWdhdGVTZXJpZXN9XG4gICAgICogQG1lbWJlcm9mIFF1ZXJ5UmVxdWVzdFxuICAgICAqL1xuICAgIGFnZ3JlZ2F0ZVNlcmllcz86IEFnZ3JlZ2F0ZVNlcmllcyB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBRdWVyeVJlc3VsdFBhZ2VcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBRdWVyeVJlc3VsdFBhZ2Uge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIFF1ZXJ5UmVzdWx0UGFnZVxuICAgICAqL1xuICAgIGNvbnRpbnVhdGlvblRva2VuPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7QXJyYXk8RGF0ZT59XG4gICAgICogQG1lbWJlcm9mIFF1ZXJ5UmVzdWx0UGFnZVxuICAgICAqL1xuICAgIHRpbWVzdGFtcHM/OiBBcnJheTxEYXRlPiB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge0FycmF5PFByb3BlcnR5VmFsdWVzPn1cbiAgICAgKiBAbWVtYmVyb2YgUXVlcnlSZXN1bHRQYWdlXG4gICAgICovXG4gICAgcHJvcGVydGllcz86IEFycmF5PFByb3BlcnR5VmFsdWVzPiB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgUXVlcnlSZXN1bHRQYWdlXG4gICAgICovXG4gICAgcHJvZ3Jlc3M/OiBudW1iZXIgfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgUXVlcnlSZXN1bHRQYWdlQWxsT2ZcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBRdWVyeVJlc3VsdFBhZ2VBbGxPZiB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge0FycmF5PERhdGU+fVxuICAgICAqIEBtZW1iZXJvZiBRdWVyeVJlc3VsdFBhZ2VBbGxPZlxuICAgICAqL1xuICAgIHRpbWVzdGFtcHM/OiBBcnJheTxEYXRlPiB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge0FycmF5PFByb3BlcnR5VmFsdWVzPn1cbiAgICAgKiBAbWVtYmVyb2YgUXVlcnlSZXN1bHRQYWdlQWxsT2ZcbiAgICAgKi9cbiAgICBwcm9wZXJ0aWVzPzogQXJyYXk8UHJvcGVydHlWYWx1ZXM+IHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBRdWVyeVJlc3VsdFBhZ2VBbGxPZlxuICAgICAqL1xuICAgIHByb2dyZXNzPzogbnVtYmVyIHwgbnVsbDtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIFJlc3BvbnNlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2Uge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIFJlc3BvbnNlXG4gICAgICovXG4gICAgbWVzc2FnZT86IHN0cmluZyB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBSZXN1bHRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXN1bHQge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIFJlc3VsdFxuICAgICAqL1xuICAgIGlkPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBSZXN1bHRcbiAgICAgKi9cbiAgICBzY29yZT86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7QWRkcmVzc31cbiAgICAgKiBAbWVtYmVyb2YgUmVzdWx0XG4gICAgICovXG4gICAgYWRkcmVzcz86IEFkZHJlc3MgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtQb3NpdGlvbn1cbiAgICAgKiBAbWVtYmVyb2YgUmVzdWx0XG4gICAgICovXG4gICAgcG9zaXRpb24/OiBQb3NpdGlvbiB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgUmVzdWx0XG4gICAgICovXG4gICAgaW5mbz86IHN0cmluZyB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBSdW5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSdW4ge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIFJ1blxuICAgICAqL1xuICAgIGlkPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7VmVyc2lvbkluZm99XG4gICAgICogQG1lbWJlcm9mIFJ1blxuICAgICAqL1xuICAgIHZlcnNpb25JbmZvPzogVmVyc2lvbkluZm8gfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIFJ1blxuICAgICAqL1xuICAgIHN0YXJ0ZWRCeT86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQG1lbWJlcm9mIFJ1blxuICAgICAqL1xuICAgIHN1Y2Nlc3M/OiBib29sZWFuIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7RGF0ZX1cbiAgICAgKiBAbWVtYmVyb2YgUnVuXG4gICAgICovXG4gICAgc3RhcnRUaW1lPzogRGF0ZSB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge0RhdGV9XG4gICAgICogQG1lbWJlcm9mIFJ1blxuICAgICAqL1xuICAgIGVuZFRpbWU/OiBEYXRlIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7QXJyYXk8QW1waG9yYVJlZmVyZW5jZT59XG4gICAgICogQG1lbWJlcm9mIFJ1blxuICAgICAqL1xuICAgIGFtcGhvcmFSZWZlcmVuY2VzPzogQXJyYXk8QW1waG9yYVJlZmVyZW5jZT4gfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgU2VhcmNoUmVzcG9uc2VPZkJhc2ljQW1waG9yYVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNlYXJjaFJlc3BvbnNlT2ZCYXNpY0FtcGhvcmEgZXh0ZW5kcyBDb2xsZWN0aW9uUmVzcG9uc2VPZkJhc2ljQW1waG9yYSB7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBTZWFyY2hSZXNwb25zZU9mT3JnYW5pc2F0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2VhcmNoUmVzcG9uc2VPZk9yZ2FuaXNhdGlvbiBleHRlbmRzIENvbGxlY3Rpb25SZXNwb25zZU9mT3JnYW5pc2F0aW9uIHtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIFNpZ25hbFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNpZ25hbCB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgU2lnbmFsXG4gICAgICovXG4gICAgcHJvcGVydHk/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIFNpZ25hbFxuICAgICAqL1xuICAgIHZhbHVlVHlwZT86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3sgW2tleTogc3RyaW5nXTogc3RyaW5nOyB9fVxuICAgICAqIEBtZW1iZXJvZiBTaWduYWxcbiAgICAgKi9cbiAgICBhdHRyaWJ1dGVzPzogeyBba2V5OiBzdHJpbmddOiBzdHJpbmc7IH0gfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIFNpZ25hbFxuICAgICAqL1xuICAgIGlkPzogc3RyaW5nIHwgbnVsbDtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIFN1bW1hcnlcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTdW1tYXJ5IHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBTdW1tYXJ5XG4gICAgICovXG4gICAgcXVlcnk/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIFN1bW1hcnlcbiAgICAgKi9cbiAgICBxdWVyeVR5cGU/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIFN1bW1hcnlcbiAgICAgKi9cbiAgICBudW1SZXN1bHRzPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIFN1bW1hcnlcbiAgICAgKi9cbiAgICB0b3RhbFJlc3VsdHM/OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgU3VtbWFyeVxuICAgICAqL1xuICAgIGZ1enp5TGV2ZWw/OiBudW1iZXI7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBUZXJtc09mVXNlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGVybXNPZlVzZSB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgVGVybXNPZlVzZVxuICAgICAqL1xuICAgIG5hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBUZXJtc09mVXNlXG4gICAgICovXG4gICAgY29udGVudHM6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBUZXJtc09mVXNlXG4gICAgICovXG4gICAgaWQ/OiBzdHJpbmcgfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgVGltZVNlcmllc0FnZ3JlZ2F0ZUNhdGVnb3J5XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGltZVNlcmllc0FnZ3JlZ2F0ZUNhdGVnb3J5IHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBUaW1lU2VyaWVzQWdncmVnYXRlQ2F0ZWdvcnlcbiAgICAgKi9cbiAgICBsYWJlbD86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge0FycmF5PG9iamVjdD59XG4gICAgICogQG1lbWJlcm9mIFRpbWVTZXJpZXNBZ2dyZWdhdGVDYXRlZ29yeVxuICAgICAqL1xuICAgIHZhbHVlcz86IEFycmF5PG9iamVjdD4gfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgVGltZVNlcmllc0RlZmF1bHRDYXRlZ29yeVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRpbWVTZXJpZXNEZWZhdWx0Q2F0ZWdvcnkge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIFRpbWVTZXJpZXNEZWZhdWx0Q2F0ZWdvcnlcbiAgICAgKi9cbiAgICBsYWJlbD86IHN0cmluZyB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBUcmFuc2FjdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zYWN0aW9uIHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBUcmFuc2FjdGlvblxuICAgICAqL1xuICAgIGlkPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBUcmFuc2FjdGlvblxuICAgICAqL1xuICAgIGFtcGhvcmFJZD86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgVHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBiYWxhbmNlPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIFRyYW5zYWN0aW9uXG4gICAgICovXG4gICAgYW1vdW50PzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtEYXRlfVxuICAgICAqIEBtZW1iZXJvZiBUcmFuc2FjdGlvblxuICAgICAqL1xuICAgIHRpbWVzdGFtcD86IERhdGUgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIFRyYW5zYWN0aW9uXG4gICAgICovXG4gICAgbGFiZWw/OiBzdHJpbmcgfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgVHN4XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVHN4IHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBUc3hcbiAgICAgKi9cbiAgICB0c3g/OiBzdHJpbmcgfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgVXBkYXRlQXBwbGljYXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBVcGRhdGVBcHBsaWNhdGlvbiB7XG4gICAgLyoqXG4gICAgICogR2V0cyBvciBzZXRzIHRoZSBuYW1lIG9mIHlvdXIgYXBwbGljYXRpb24uIFdpbGwgYmUgc2hvd24gb24gdGhlIGNvbnNlbnQgcGFnZS5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBVcGRhdGVBcHBsaWNhdGlvblxuICAgICAqL1xuICAgIG5hbWU/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIEdldHMgb3Igc2V0cyBhIHVybCBmb3IgZnJvbnQgY2hhbm5lbCBIVFRQIGxvZ291dHMuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgVXBkYXRlQXBwbGljYXRpb25cbiAgICAgKi9cbiAgICBsb2dvdXRVcmw/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgYWxsb3dlZCBzY29wZXMgZm9yIHRoZSBhcHAuIG9wZW5pZCBpcyBub3QgcmVxdWlyZWQsIGFuZCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgaW5jbHVkZWQuIE9wdGlvbnMgaW5jbHVkZTogW1xcJ2FtcGhvcmFcXCcsIFxcJ2FtcGhvcmEucHVyY2hhc2VcXCcsIFxcJ3Byb2ZpbGVcXCcsIFxcJ2VtYWlsXFwnLCBcXCd3ZWJfYXBpXFwnXS5cbiAgICAgKiBAdHlwZSB7QXJyYXk8c3RyaW5nPn1cbiAgICAgKiBAbWVtYmVyb2YgVXBkYXRlQXBwbGljYXRpb25cbiAgICAgKi9cbiAgICBhbGxvd2VkU2NvcGVzPzogQXJyYXk8c3RyaW5nPiB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgVXBkYXRlQXBwbGljYXRpb25cbiAgICAgKi9cbiAgICBpZD86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogR2V0cyBvciBzZXRzIGEgY29sbGVjdGlvbiBvZiBsb2NhdGlvbnMgeW91ciBhcHBsaWNhdGlvbiB3aWxsIHJ1bi5cbiAgICAgKiBAdHlwZSB7QXJyYXk8Q3JlYXRlQXBwTG9jYXRpb24+fVxuICAgICAqIEBtZW1iZXJvZiBVcGRhdGVBcHBsaWNhdGlvblxuICAgICAqL1xuICAgIGxvY2F0aW9ucz86IEFycmF5PENyZWF0ZUFwcExvY2F0aW9uPiB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBVcGRhdGVBcHBsaWNhdGlvbkFsbE9mXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXBkYXRlQXBwbGljYXRpb25BbGxPZiB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgVXBkYXRlQXBwbGljYXRpb25BbGxPZlxuICAgICAqL1xuICAgIGlkPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBHZXRzIG9yIHNldHMgYSBjb2xsZWN0aW9uIG9mIGxvY2F0aW9ucyB5b3VyIGFwcGxpY2F0aW9uIHdpbGwgcnVuLlxuICAgICAqIEB0eXBlIHtBcnJheTxDcmVhdGVBcHBMb2NhdGlvbj59XG4gICAgICogQG1lbWJlcm9mIFVwZGF0ZUFwcGxpY2F0aW9uQWxsT2ZcbiAgICAgKi9cbiAgICBsb2NhdGlvbnM/OiBBcnJheTxDcmVhdGVBcHBMb2NhdGlvbj4gfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgVXBkYXRlUnVuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXBkYXRlUnVuIHtcbiAgICAvKipcbiAgICAgKiBHZXRzIG9yIHNldHMgd2hldGhlciB0aGUgcnVuIGZhaWxlZCBvciBzdWNjZWVkZWQuIFNldHRpbmcgdGhpcyB3aWxsIGVuZCB0aGUgcnVuLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBtZW1iZXJvZiBVcGRhdGVSdW5cbiAgICAgKi9cbiAgICBzdWNjZXNzPzogYm9vbGVhbiB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBVcGRhdGVTaWduYWxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBVcGRhdGVTaWduYWwge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHt7IFtrZXk6IHN0cmluZ106IHN0cmluZzsgfX1cbiAgICAgKiBAbWVtYmVyb2YgVXBkYXRlU2lnbmFsXG4gICAgICovXG4gICAgbWV0YT86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nOyB9IHwgbnVsbDtcbn1cbi8qKlxuICogXG4gKiBAZXhwb3J0XG4gKiBAaW50ZXJmYWNlIFVwbG9hZFJlc3BvbnNlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXBsb2FkUmVzcG9uc2Uge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIFVwbG9hZFJlc3BvbnNlXG4gICAgICovXG4gICAgbWVzc2FnZT86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgVXBsb2FkUmVzcG9uc2VcbiAgICAgKi9cbiAgICB1cmw/OiBzdHJpbmcgfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgVXBsb2FkUmVzcG9uc2VBbGxPZlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFVwbG9hZFJlc3BvbnNlQWxsT2Yge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQG1lbWJlcm9mIFVwbG9hZFJlc3BvbnNlQWxsT2ZcbiAgICAgKi9cbiAgICB1cmw/OiBzdHJpbmcgfCBudWxsO1xufVxuLyoqXG4gKiBcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgVXNlckFjY2Vzc1J1bGVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBVc2VyQWNjZXNzUnVsZSB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgVXNlckFjY2Vzc1J1bGVcbiAgICAgKi9cbiAgICBpZD86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgVXNlckFjY2Vzc1J1bGVcbiAgICAgKi9cbiAgICBhbGxvd09yRGVueT86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgVXNlckFjY2Vzc1J1bGVcbiAgICAgKi9cbiAgICBwcmlvcml0eT86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBtZW1iZXJvZiBVc2VyQWNjZXNzUnVsZVxuICAgICAqL1xuICAgIHVzZXJuYW1lOiBzdHJpbmc7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBVc2VyQWNjZXNzUnVsZUFsbE9mXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXNlckFjY2Vzc1J1bGVBbGxPZiB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAbWVtYmVyb2YgVXNlckFjY2Vzc1J1bGVBbGxPZlxuICAgICAqL1xuICAgIHVzZXJuYW1lOiBzdHJpbmc7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBWYXJpYWJsZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFZhcmlhYmxlIHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7VHN4fVxuICAgICAqIEBtZW1iZXJvZiBWYXJpYWJsZVxuICAgICAqL1xuICAgIGZpbHRlcj86IFRzeCB8IG51bGw7XG59XG4vKipcbiAqIFxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBWZXJzaW9uSW5mb1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFZlcnNpb25JbmZvIHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBtZW1iZXJvZiBWZXJzaW9uSW5mb1xuICAgICAqL1xuICAgIG1ham9yPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICogQG1lbWJlcm9mIFZlcnNpb25JbmZvXG4gICAgICovXG4gICAgbWlub3I/OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAbWVtYmVyb2YgVmVyc2lvbkluZm9cbiAgICAgKi9cbiAgICBwYXRjaD86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBBY2NvdW50QXBpIC0gYXhpb3MgcGFyYW1ldGVyIGNyZWF0b3JcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0IGNvbnN0IEFjY291bnRBcGlBeGlvc1BhcmFtQ3JlYXRvciA9IGZ1bmN0aW9uIChjb25maWd1cmF0aW9uPzogQ29uZmlndXJhdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgR2V0cyBhIGxpc3Qgb2YgaW52aXRhdGlvbnMgdG8gdGhlIG9yZ2FuaXNhdGlvbi5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtpZF0gVGhlIG9yZ2FuaXNhdGlvbiBpZC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFjY291bnRJbnZpdGF0aW9uc0ludml0YXRpb25zKGlkPzogc3RyaW5nLCBvcHRpb25zOiBhbnkgPSB7fSk6IFJlcXVlc3RBcmdzIHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL0FjY291bnQvSW52aXRhdGlvbnNgO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnR0VUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJRdWVyeVBhcmFtZXRlclsnaWQnXSA9IGlkO1xuICAgICAgICAgICAgfVxuXG5cbiAgICBcbiAgICAgICAgICAgIGxvY2FsVmFyVXJsT2JqLnF1ZXJ5ID0gey4uLmxvY2FsVmFyVXJsT2JqLnF1ZXJ5LCAuLi5sb2NhbFZhclF1ZXJ5UGFyYW1ldGVyLCAuLi5vcHRpb25zLnF1ZXJ5fTtcbiAgICAgICAgICAgIC8vIGZpeCBvdmVycmlkZSBxdWVyeSBzdHJpbmcgRGV0YWlsOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzUxNzY3My8xMDc3OTQzXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxWYXJVcmxPYmouc2VhcmNoO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gey4uLmxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCAuLi5vcHRpb25zLmhlYWRlcnN9O1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogZ2xvYmFsSW1wb3J0VXJsLmZvcm1hdChsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgR2V0cyBhbiBPcmdhbmlzYXRpb25cXCdzIGFjY291bnQgaW5mb3JtYXRpb24uXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBPcmdhbmlzYXRpb24gSWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhY2NvdW50UmVhZChpZDogc3RyaW5nLCBvcHRpb25zOiBhbnkgPSB7fSk6IFJlcXVlc3RBcmdzIHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2lkJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGlmIChpZCA9PT0gbnVsbCB8fCBpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVpcmVkRXJyb3IoJ2lkJywnUmVxdWlyZWQgcGFyYW1ldGVyIGlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgYWNjb3VudFJlYWQuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS9PcmdhbmlzYXRpb25zL3tpZH0vQWNjb3VudGBcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJpZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGlkKSkpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnR0VUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBnbG9iYWxJbXBvcnRVcmwuZm9ybWF0KGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIGFuIE9yZ2FuaXNhdGlvblxcJ3MgYWNjb3VudCBpbmZvcm1hdGlvbi5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIE9yZ2FuaXNhdGlvbiBJZC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFjY291bnRSZWFkMihpZDogc3RyaW5nLCBvcHRpb25zOiBhbnkgPSB7fSk6IFJlcXVlc3RBcmdzIHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2lkJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGlmIChpZCA9PT0gbnVsbCB8fCBpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVpcmVkRXJyb3IoJ2lkJywnUmVxdWlyZWQgcGFyYW1ldGVyIGlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgYWNjb3VudFJlYWQyLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9hcGkvQWNjb3VudGBcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJpZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGlkKSkpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnR0VUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBnbG9iYWxJbXBvcnRVcmwuZm9ybWF0KGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgbmV3IGludm9pY2UuIFJlc3RyaWN0ZWQgdG8gZ2xvYmFsIGFkbWluaXN0cmF0b3JzLlxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZUludm9pY2V9IGNyZWF0ZUludm9pY2UgVGhlIG9yZ2FuaXNhdGlvbiBmb3Igd2hpY2ggdG8gY3JlYXRlIHRoZSBpbnZvaWNlLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgaW52b2ljZXNDcmVhdGVJbnZvaWNlKGNyZWF0ZUludm9pY2U6IENyZWF0ZUludm9pY2UsIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnY3JlYXRlSW52b2ljZScgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAoY3JlYXRlSW52b2ljZSA9PT0gbnVsbCB8fCBjcmVhdGVJbnZvaWNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignY3JlYXRlSW52b2ljZScsJ1JlcXVpcmVkIHBhcmFtZXRlciBjcmVhdGVJbnZvaWNlIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgaW52b2ljZXNDcmVhdGVJbnZvaWNlLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9hcGkvYWNjb3VudC9pbnZvaWNlc2A7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IGdsb2JhbEltcG9ydFVybC5wYXJzZShsb2NhbFZhclBhdGgsIHRydWUpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0geyBtZXRob2Q6ICdQT1NUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcbiAgICAgICAgICAgIGNvbnN0IG5lZWRzU2VyaWFsaXphdGlvbiA9ICh0eXBlb2YgY3JlYXRlSW52b2ljZSAhPT0gXCJzdHJpbmdcIikgfHwgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5kYXRhID0gIG5lZWRzU2VyaWFsaXphdGlvbiA/IEpTT04uc3RyaW5naWZ5KGNyZWF0ZUludm9pY2UgIT09IHVuZGVmaW5lZCA/IGNyZWF0ZUludm9pY2UgOiB7fSkgOiAoY3JlYXRlSW52b2ljZSB8fCBcIlwiKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IERvd25sb2FkcyBhbiBpbnZvaWNlIGluIGEgc3BlY2lmaWVkIGZvcm1hdC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEludm9pY2UgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbZm9ybWF0XSBPbmx5IGNzdiBpcyBzdXBwb3J0ZWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBpbnZvaWNlc0Rvd25sb2FkSW52b2ljZShpZDogc3RyaW5nLCBmb3JtYXQ/OiBzdHJpbmcsIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnaWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGlkID09PSBudWxsIHx8IGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignaWQnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgaWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBpbnZvaWNlc0Rvd25sb2FkSW52b2ljZS4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL2FjY291bnQvaW52b2ljZXMve2lkfS9kb3dubG9hZGBcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJpZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGlkKSkpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnR0VUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChmb3JtYXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXJbJ2Zvcm1hdCddID0gZm9ybWF0O1xuICAgICAgICAgICAgfVxuXG5cbiAgICBcbiAgICAgICAgICAgIGxvY2FsVmFyVXJsT2JqLnF1ZXJ5ID0gey4uLmxvY2FsVmFyVXJsT2JqLnF1ZXJ5LCAuLi5sb2NhbFZhclF1ZXJ5UGFyYW1ldGVyLCAuLi5vcHRpb25zLnF1ZXJ5fTtcbiAgICAgICAgICAgIC8vIGZpeCBvdmVycmlkZSBxdWVyeSBzdHJpbmcgRGV0YWlsOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzUxNzY3My8xMDc3OTQzXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxWYXJVcmxPYmouc2VhcmNoO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gey4uLmxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCAuLi5vcHRpb25zLmhlYWRlcnN9O1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogZ2xvYmFsSW1wb3J0VXJsLmZvcm1hdChsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgUmV0dXJucyBhIGxpc3Qgb2YgaW52b2ljZXMgYXMgaXRlbXMuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBpbnZvaWNlc0dldEludm9pY2VzKG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9hcGkvYWNjb3VudC9pbnZvaWNlc2A7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IGdsb2JhbEltcG9ydFVybC5wYXJzZShsb2NhbFZhclBhdGgsIHRydWUpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0geyBtZXRob2Q6ICdHRVQnLCAuLi5iYXNlT3B0aW9ucywgLi4ub3B0aW9uc307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9IGFzIGFueTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG5cbiAgICAgICAgICAgIC8vIGF1dGhlbnRpY2F0aW9uIEJlYXJlciByZXF1aXJlZFxuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5hcGlLZXkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckFwaUtleVZhbHVlID0gdHlwZW9mIGNvbmZpZ3VyYXRpb24uYXBpS2V5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgID8gY29uZmlndXJhdGlvbi5hcGlLZXkoXCJBdXRob3JpemF0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgIDogY29uZmlndXJhdGlvbi5hcGlLZXk7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbXCJBdXRob3JpemF0aW9uXCJdID0gbG9jYWxWYXJBcGlLZXlWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IFJldHVybnMgYSBjb2xsZWN0aW9uIG9mIG1lbWJlcnMgb2YgYW4gb3JnYW5pc2F0aW9uYWwgYWNjb3VudC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtpZF0gT3JnYW5pc2F0aW9uIElkLiBEZWZhdWx0cyB0byB5b3VyIG9yZy5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIG1lbWJlcnNoaXBHZXRNZW1iZXJzaGlwcyhpZD86IHN0cmluZywgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS9hY2NvdW50L21lbWJlcnNoaXBzYDtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gZ2xvYmFsSW1wb3J0VXJsLnBhcnNlKGxvY2FsVmFyUGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSB7IG1ldGhvZDogJ0dFVCcsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXJbJ2lkJ10gPSBpZDtcbiAgICAgICAgICAgIH1cblxuXG4gICAgXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgYW4gT3JnYW5pc2F0aW9uXFwncyBwbGFuIGluZm9ybWF0aW9uLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgcGxhbkdldFBsYW4ob3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS9BY2NvdW50L1BsYW5gO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnR0VUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBnbG9iYWxJbXBvcnRVcmwuZm9ybWF0KGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBTZXRcXCdzIGFuIE9yZ2FuaXNhdGlvblxcJ3MgcGxhbi5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtwbGFuVHlwZV0gVGhlIFBsYW4gVHlwZS4gU2hvdWxkIGJlIFBBWUcgb3IgR2xhemUuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBwbGFuU2V0UGxhbihwbGFuVHlwZT86IHN0cmluZywgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS9BY2NvdW50L1BsYW5gO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnUE9TVCcsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocGxhblR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXJbJ3BsYW5UeXBlJ10gPSBwbGFuVHlwZTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgdGhlIG1vc3QgcmVjZW50IHRyYW5zYWN0aW9ucyBvZiB0aGUgYWNjb3VudC4gRGVmYXVsdHMgdG8gdGhlIGZpcnN0IDUwIGRlYml0cyBhbmQgNTAgY3JlZGl0cy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtpZF0gT3JnYW5pc2F0aW9uIElkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgdHJhbnNhY3Rpb25zR2V0VHJhbnNhY3Rpb25zKGlkPzogc3RyaW5nLCBvcHRpb25zOiBhbnkgPSB7fSk6IFJlcXVlc3RBcmdzIHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL0FjY291bnQvVHJhbnNhY3Rpb25zYDtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gZ2xvYmFsSW1wb3J0VXJsLnBhcnNlKGxvY2FsVmFyUGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSB7IG1ldGhvZDogJ0dFVCcsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXJbJ2lkJ10gPSBpZDtcbiAgICAgICAgICAgIH1cblxuXG4gICAgXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH1cbn07XG5cbi8qKlxuICogQWNjb3VudEFwaSAtIGZ1bmN0aW9uYWwgcHJvZ3JhbW1pbmcgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydCBjb25zdCBBY2NvdW50QXBpRnAgPSBmdW5jdGlvbihjb25maWd1cmF0aW9uPzogQ29uZmlndXJhdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgR2V0cyBhIGxpc3Qgb2YgaW52aXRhdGlvbnMgdG8gdGhlIG9yZ2FuaXNhdGlvbi5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtpZF0gVGhlIG9yZ2FuaXNhdGlvbiBpZC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFjY291bnRJbnZpdGF0aW9uc0ludml0YXRpb25zKGlkPzogc3RyaW5nLCBvcHRpb25zPzogYW55KTogKGF4aW9zPzogQXhpb3NJbnN0YW5jZSwgYmFzZVBhdGg/OiBzdHJpbmcpID0+IEF4aW9zUHJvbWlzZTxDb2xsZWN0aW9uUmVzcG9uc2VPZkludml0YXRpb24+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gQWNjb3VudEFwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLmFjY291bnRJbnZpdGF0aW9uc0ludml0YXRpb25zKGlkLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgYW4gT3JnYW5pc2F0aW9uXFwncyBhY2NvdW50IGluZm9ybWF0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgT3JnYW5pc2F0aW9uIElkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYWNjb3VudFJlYWQoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8QWNjb3VudEluZm9ybWF0aW9uPiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IEFjY291bnRBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS5hY2NvdW50UmVhZChpZCwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gKGF4aW9zOiBBeGlvc0luc3RhbmNlID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoOiBzdHJpbmcgPSBCQVNFX1BBVEgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlvc1JlcXVlc3RBcmdzID0gey4uLmxvY2FsVmFyQXhpb3NBcmdzLm9wdGlvbnMsIHVybDogYmFzZVBhdGggKyBsb2NhbFZhckF4aW9zQXJncy51cmx9O1xuICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5yZXF1ZXN0KGF4aW9zUmVxdWVzdEFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIGFuIE9yZ2FuaXNhdGlvblxcJ3MgYWNjb3VudCBpbmZvcm1hdGlvbi5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIE9yZ2FuaXNhdGlvbiBJZC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFjY291bnRSZWFkMihpZDogc3RyaW5nLCBvcHRpb25zPzogYW55KTogKGF4aW9zPzogQXhpb3NJbnN0YW5jZSwgYmFzZVBhdGg/OiBzdHJpbmcpID0+IEF4aW9zUHJvbWlzZTxBY2NvdW50SW5mb3JtYXRpb24+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gQWNjb3VudEFwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLmFjY291bnRSZWFkMihpZCwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gKGF4aW9zOiBBeGlvc0luc3RhbmNlID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoOiBzdHJpbmcgPSBCQVNFX1BBVEgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlvc1JlcXVlc3RBcmdzID0gey4uLmxvY2FsVmFyQXhpb3NBcmdzLm9wdGlvbnMsIHVybDogYmFzZVBhdGggKyBsb2NhbFZhckF4aW9zQXJncy51cmx9O1xuICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5yZXF1ZXN0KGF4aW9zUmVxdWVzdEFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgbmV3IGludm9pY2UuIFJlc3RyaWN0ZWQgdG8gZ2xvYmFsIGFkbWluaXN0cmF0b3JzLlxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZUludm9pY2V9IGNyZWF0ZUludm9pY2UgVGhlIG9yZ2FuaXNhdGlvbiBmb3Igd2hpY2ggdG8gY3JlYXRlIHRoZSBpbnZvaWNlLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgaW52b2ljZXNDcmVhdGVJbnZvaWNlKGNyZWF0ZUludm9pY2U6IENyZWF0ZUludm9pY2UsIG9wdGlvbnM/OiBhbnkpOiAoYXhpb3M/OiBBeGlvc0luc3RhbmNlLCBiYXNlUGF0aD86IHN0cmluZykgPT4gQXhpb3NQcm9taXNlPEl0ZW1SZXNwb25zZU9mSW52b2ljZT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSBBY2NvdW50QXBpQXhpb3NQYXJhbUNyZWF0b3IoY29uZmlndXJhdGlvbikuaW52b2ljZXNDcmVhdGVJbnZvaWNlKGNyZWF0ZUludm9pY2UsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgRG93bmxvYWRzIGFuIGludm9pY2UgaW4gYSBzcGVjaWZpZWQgZm9ybWF0LlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSW52b2ljZSBJZC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtmb3JtYXRdIE9ubHkgY3N2IGlzIHN1cHBvcnRlZC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGludm9pY2VzRG93bmxvYWRJbnZvaWNlKGlkOiBzdHJpbmcsIGZvcm1hdD86IHN0cmluZywgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8YW55PiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IEFjY291bnRBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS5pbnZvaWNlc0Rvd25sb2FkSW52b2ljZShpZCwgZm9ybWF0LCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IFJldHVybnMgYSBsaXN0IG9mIGludm9pY2VzIGFzIGl0ZW1zLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgaW52b2ljZXNHZXRJbnZvaWNlcyhvcHRpb25zPzogYW55KTogKGF4aW9zPzogQXhpb3NJbnN0YW5jZSwgYmFzZVBhdGg/OiBzdHJpbmcpID0+IEF4aW9zUHJvbWlzZTxDb2xsZWN0aW9uUmVzcG9uc2VPZkludm9pY2U+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gQWNjb3VudEFwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLmludm9pY2VzR2V0SW52b2ljZXMob3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gKGF4aW9zOiBBeGlvc0luc3RhbmNlID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoOiBzdHJpbmcgPSBCQVNFX1BBVEgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlvc1JlcXVlc3RBcmdzID0gey4uLmxvY2FsVmFyQXhpb3NBcmdzLm9wdGlvbnMsIHVybDogYmFzZVBhdGggKyBsb2NhbFZhckF4aW9zQXJncy51cmx9O1xuICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5yZXF1ZXN0KGF4aW9zUmVxdWVzdEFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBSZXR1cm5zIGEgY29sbGVjdGlvbiBvZiBtZW1iZXJzIG9mIGFuIG9yZ2FuaXNhdGlvbmFsIGFjY291bnQuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbaWRdIE9yZ2FuaXNhdGlvbiBJZC4gRGVmYXVsdHMgdG8geW91ciBvcmcuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBtZW1iZXJzaGlwR2V0TWVtYmVyc2hpcHMoaWQ/OiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpOiAoYXhpb3M/OiBBeGlvc0luc3RhbmNlLCBiYXNlUGF0aD86IHN0cmluZykgPT4gQXhpb3NQcm9taXNlPENvbGxlY3Rpb25SZXNwb25zZU9mTWVtYmVyc2hpcD4ge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSBBY2NvdW50QXBpQXhpb3NQYXJhbUNyZWF0b3IoY29uZmlndXJhdGlvbikubWVtYmVyc2hpcEdldE1lbWJlcnNoaXBzKGlkLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgYW4gT3JnYW5pc2F0aW9uXFwncyBwbGFuIGluZm9ybWF0aW9uLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgcGxhbkdldFBsYW4ob3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8UGxhbkluZm9ybWF0aW9uPiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IEFjY291bnRBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS5wbGFuR2V0UGxhbihvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IFNldFxcJ3MgYW4gT3JnYW5pc2F0aW9uXFwncyBwbGFuLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3BsYW5UeXBlXSBUaGUgUGxhbiBUeXBlLiBTaG91bGQgYmUgUEFZRyBvciBHbGF6ZS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHBsYW5TZXRQbGFuKHBsYW5UeXBlPzogc3RyaW5nLCBvcHRpb25zPzogYW55KTogKGF4aW9zPzogQXhpb3NJbnN0YW5jZSwgYmFzZVBhdGg/OiBzdHJpbmcpID0+IEF4aW9zUHJvbWlzZTxQbGFuSW5mb3JtYXRpb24+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gQWNjb3VudEFwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLnBsYW5TZXRQbGFuKHBsYW5UeXBlLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgdGhlIG1vc3QgcmVjZW50IHRyYW5zYWN0aW9ucyBvZiB0aGUgYWNjb3VudC4gRGVmYXVsdHMgdG8gdGhlIGZpcnN0IDUwIGRlYml0cyBhbmQgNTAgY3JlZGl0cy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtpZF0gT3JnYW5pc2F0aW9uIElkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgdHJhbnNhY3Rpb25zR2V0VHJhbnNhY3Rpb25zKGlkPzogc3RyaW5nLCBvcHRpb25zPzogYW55KTogKGF4aW9zPzogQXhpb3NJbnN0YW5jZSwgYmFzZVBhdGg/OiBzdHJpbmcpID0+IEF4aW9zUHJvbWlzZTxDb2xsZWN0aW9uUmVzcG9uc2VPZlRyYW5zYWN0aW9uPiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IEFjY291bnRBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS50cmFuc2FjdGlvbnNHZXRUcmFuc2FjdGlvbnMoaWQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfVxufTtcblxuLyoqXG4gKiBBY2NvdW50QXBpIC0gZmFjdG9yeSBpbnRlcmZhY2VcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0IGNvbnN0IEFjY291bnRBcGlGYWN0b3J5ID0gZnVuY3Rpb24gKGNvbmZpZ3VyYXRpb24/OiBDb25maWd1cmF0aW9uLCBiYXNlUGF0aD86IHN0cmluZywgYXhpb3M/OiBBeGlvc0luc3RhbmNlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIGEgbGlzdCBvZiBpbnZpdGF0aW9ucyB0byB0aGUgb3JnYW5pc2F0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2lkXSBUaGUgb3JnYW5pc2F0aW9uIGlkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYWNjb3VudEludml0YXRpb25zSW52aXRhdGlvbnMoaWQ/OiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBBY2NvdW50QXBpRnAoY29uZmlndXJhdGlvbikuYWNjb3VudEludml0YXRpb25zSW52aXRhdGlvbnMoaWQsIG9wdGlvbnMpKGF4aW9zLCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgR2V0cyBhbiBPcmdhbmlzYXRpb25cXCdzIGFjY291bnQgaW5mb3JtYXRpb24uXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBPcmdhbmlzYXRpb24gSWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhY2NvdW50UmVhZChpZDogc3RyaW5nLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gQWNjb3VudEFwaUZwKGNvbmZpZ3VyYXRpb24pLmFjY291bnRSZWFkKGlkLCBvcHRpb25zKShheGlvcywgYmFzZVBhdGgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgYW4gT3JnYW5pc2F0aW9uXFwncyBhY2NvdW50IGluZm9ybWF0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgT3JnYW5pc2F0aW9uIElkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYWNjb3VudFJlYWQyKGlkOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBBY2NvdW50QXBpRnAoY29uZmlndXJhdGlvbikuYWNjb3VudFJlYWQyKGlkLCBvcHRpb25zKShheGlvcywgYmFzZVBhdGgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYSBuZXcgaW52b2ljZS4gUmVzdHJpY3RlZCB0byBnbG9iYWwgYWRtaW5pc3RyYXRvcnMuXG4gICAgICAgICAqIEBwYXJhbSB7Q3JlYXRlSW52b2ljZX0gY3JlYXRlSW52b2ljZSBUaGUgb3JnYW5pc2F0aW9uIGZvciB3aGljaCB0byBjcmVhdGUgdGhlIGludm9pY2UuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBpbnZvaWNlc0NyZWF0ZUludm9pY2UoY3JlYXRlSW52b2ljZTogQ3JlYXRlSW52b2ljZSwgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIEFjY291bnRBcGlGcChjb25maWd1cmF0aW9uKS5pbnZvaWNlc0NyZWF0ZUludm9pY2UoY3JlYXRlSW52b2ljZSwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBEb3dubG9hZHMgYW4gaW52b2ljZSBpbiBhIHNwZWNpZmllZCBmb3JtYXQuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJbnZvaWNlIElkLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2Zvcm1hdF0gT25seSBjc3YgaXMgc3VwcG9ydGVkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgaW52b2ljZXNEb3dubG9hZEludm9pY2UoaWQ6IHN0cmluZywgZm9ybWF0Pzogc3RyaW5nLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gQWNjb3VudEFwaUZwKGNvbmZpZ3VyYXRpb24pLmludm9pY2VzRG93bmxvYWRJbnZvaWNlKGlkLCBmb3JtYXQsIG9wdGlvbnMpKGF4aW9zLCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgUmV0dXJucyBhIGxpc3Qgb2YgaW52b2ljZXMgYXMgaXRlbXMuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBpbnZvaWNlc0dldEludm9pY2VzKG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBBY2NvdW50QXBpRnAoY29uZmlndXJhdGlvbikuaW52b2ljZXNHZXRJbnZvaWNlcyhvcHRpb25zKShheGlvcywgYmFzZVBhdGgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IFJldHVybnMgYSBjb2xsZWN0aW9uIG9mIG1lbWJlcnMgb2YgYW4gb3JnYW5pc2F0aW9uYWwgYWNjb3VudC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtpZF0gT3JnYW5pc2F0aW9uIElkLiBEZWZhdWx0cyB0byB5b3VyIG9yZy5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIG1lbWJlcnNoaXBHZXRNZW1iZXJzaGlwcyhpZD86IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIEFjY291bnRBcGlGcChjb25maWd1cmF0aW9uKS5tZW1iZXJzaGlwR2V0TWVtYmVyc2hpcHMoaWQsIG9wdGlvbnMpKGF4aW9zLCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgR2V0cyBhbiBPcmdhbmlzYXRpb25cXCdzIHBsYW4gaW5mb3JtYXRpb24uXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBwbGFuR2V0UGxhbihvcHRpb25zPzogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gQWNjb3VudEFwaUZwKGNvbmZpZ3VyYXRpb24pLnBsYW5HZXRQbGFuKG9wdGlvbnMpKGF4aW9zLCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgU2V0XFwncyBhbiBPcmdhbmlzYXRpb25cXCdzIHBsYW4uXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcGxhblR5cGVdIFRoZSBQbGFuIFR5cGUuIFNob3VsZCBiZSBQQVlHIG9yIEdsYXplLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgcGxhblNldFBsYW4ocGxhblR5cGU/OiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBBY2NvdW50QXBpRnAoY29uZmlndXJhdGlvbikucGxhblNldFBsYW4ocGxhblR5cGUsIG9wdGlvbnMpKGF4aW9zLCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgR2V0cyB0aGUgbW9zdCByZWNlbnQgdHJhbnNhY3Rpb25zIG9mIHRoZSBhY2NvdW50LiBEZWZhdWx0cyB0byB0aGUgZmlyc3QgNTAgZGViaXRzIGFuZCA1MCBjcmVkaXRzLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2lkXSBPcmdhbmlzYXRpb24gSWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICB0cmFuc2FjdGlvbnNHZXRUcmFuc2FjdGlvbnMoaWQ/OiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBBY2NvdW50QXBpRnAoY29uZmlndXJhdGlvbikudHJhbnNhY3Rpb25zR2V0VHJhbnNhY3Rpb25zKGlkLCBvcHRpb25zKShheGlvcywgYmFzZVBhdGgpO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuXG4vKipcbiAqIEFjY291bnRBcGkgLSBvYmplY3Qtb3JpZW50ZWQgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgQWNjb3VudEFwaVxuICogQGV4dGVuZHMge0Jhc2VBUEl9XG4gKi9cbmV4cG9ydCBjbGFzcyBBY2NvdW50QXBpIGV4dGVuZHMgQmFzZUFQSSB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHN1bW1hcnkgR2V0cyBhIGxpc3Qgb2YgaW52aXRhdGlvbnMgdG8gdGhlIG9yZ2FuaXNhdGlvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2lkXSBUaGUgb3JnYW5pc2F0aW9uIGlkLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgQWNjb3VudEFwaVxuICAgICAqL1xuICAgIHB1YmxpYyBhY2NvdW50SW52aXRhdGlvbnNJbnZpdGF0aW9ucyhpZD86IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICByZXR1cm4gQWNjb3VudEFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuYWNjb3VudEludml0YXRpb25zSW52aXRhdGlvbnMoaWQsIG9wdGlvbnMpKHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBzdW1tYXJ5IEdldHMgYW4gT3JnYW5pc2F0aW9uXFwncyBhY2NvdW50IGluZm9ybWF0aW9uLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBPcmdhbmlzYXRpb24gSWQuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBBY2NvdW50QXBpXG4gICAgICovXG4gICAgcHVibGljIGFjY291bnRSZWFkKGlkOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIEFjY291bnRBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmFjY291bnRSZWFkKGlkLCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAc3VtbWFyeSBHZXRzIGFuIE9yZ2FuaXNhdGlvblxcJ3MgYWNjb3VudCBpbmZvcm1hdGlvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgT3JnYW5pc2F0aW9uIElkLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgQWNjb3VudEFwaVxuICAgICAqL1xuICAgIHB1YmxpYyBhY2NvdW50UmVhZDIoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICByZXR1cm4gQWNjb3VudEFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuYWNjb3VudFJlYWQyKGlkLCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgbmV3IGludm9pY2UuIFJlc3RyaWN0ZWQgdG8gZ2xvYmFsIGFkbWluaXN0cmF0b3JzLlxuICAgICAqIEBwYXJhbSB7Q3JlYXRlSW52b2ljZX0gY3JlYXRlSW52b2ljZSBUaGUgb3JnYW5pc2F0aW9uIGZvciB3aGljaCB0byBjcmVhdGUgdGhlIGludm9pY2UuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBBY2NvdW50QXBpXG4gICAgICovXG4gICAgcHVibGljIGludm9pY2VzQ3JlYXRlSW52b2ljZShjcmVhdGVJbnZvaWNlOiBDcmVhdGVJbnZvaWNlLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBBY2NvdW50QXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5pbnZvaWNlc0NyZWF0ZUludm9pY2UoY3JlYXRlSW52b2ljZSwgb3B0aW9ucykodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHN1bW1hcnkgRG93bmxvYWRzIGFuIGludm9pY2UgaW4gYSBzcGVjaWZpZWQgZm9ybWF0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJbnZvaWNlIElkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbZm9ybWF0XSBPbmx5IGNzdiBpcyBzdXBwb3J0ZWQuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBBY2NvdW50QXBpXG4gICAgICovXG4gICAgcHVibGljIGludm9pY2VzRG93bmxvYWRJbnZvaWNlKGlkOiBzdHJpbmcsIGZvcm1hdD86IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICByZXR1cm4gQWNjb3VudEFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuaW52b2ljZXNEb3dubG9hZEludm9pY2UoaWQsIGZvcm1hdCwgb3B0aW9ucykodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHN1bW1hcnkgUmV0dXJucyBhIGxpc3Qgb2YgaW52b2ljZXMgYXMgaXRlbXMuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBBY2NvdW50QXBpXG4gICAgICovXG4gICAgcHVibGljIGludm9pY2VzR2V0SW52b2ljZXMob3B0aW9ucz86IGFueSkge1xuICAgICAgICByZXR1cm4gQWNjb3VudEFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuaW52b2ljZXNHZXRJbnZvaWNlcyhvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAc3VtbWFyeSBSZXR1cm5zIGEgY29sbGVjdGlvbiBvZiBtZW1iZXJzIG9mIGFuIG9yZ2FuaXNhdGlvbmFsIGFjY291bnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtpZF0gT3JnYW5pc2F0aW9uIElkLiBEZWZhdWx0cyB0byB5b3VyIG9yZy5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIEFjY291bnRBcGlcbiAgICAgKi9cbiAgICBwdWJsaWMgbWVtYmVyc2hpcEdldE1lbWJlcnNoaXBzKGlkPzogc3RyaW5nLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBBY2NvdW50QXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5tZW1iZXJzaGlwR2V0TWVtYmVyc2hpcHMoaWQsIG9wdGlvbnMpKHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBzdW1tYXJ5IEdldHMgYW4gT3JnYW5pc2F0aW9uXFwncyBwbGFuIGluZm9ybWF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgQWNjb3VudEFwaVxuICAgICAqL1xuICAgIHB1YmxpYyBwbGFuR2V0UGxhbihvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBBY2NvdW50QXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5wbGFuR2V0UGxhbihvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAc3VtbWFyeSBTZXRcXCdzIGFuIE9yZ2FuaXNhdGlvblxcJ3MgcGxhbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3BsYW5UeXBlXSBUaGUgUGxhbiBUeXBlLiBTaG91bGQgYmUgUEFZRyBvciBHbGF6ZS5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIEFjY291bnRBcGlcbiAgICAgKi9cbiAgICBwdWJsaWMgcGxhblNldFBsYW4ocGxhblR5cGU/OiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIEFjY291bnRBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLnBsYW5TZXRQbGFuKHBsYW5UeXBlLCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAc3VtbWFyeSBHZXRzIHRoZSBtb3N0IHJlY2VudCB0cmFuc2FjdGlvbnMgb2YgdGhlIGFjY291bnQuIERlZmF1bHRzIHRvIHRoZSBmaXJzdCA1MCBkZWJpdHMgYW5kIDUwIGNyZWRpdHMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtpZF0gT3JnYW5pc2F0aW9uIElkLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgQWNjb3VudEFwaVxuICAgICAqL1xuICAgIHB1YmxpYyB0cmFuc2FjdGlvbnNHZXRUcmFuc2FjdGlvbnMoaWQ/OiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIEFjY291bnRBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLnRyYW5zYWN0aW9uc0dldFRyYW5zYWN0aW9ucyhpZCwgb3B0aW9ucykodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCk7XG4gICAgfVxuXG59XG5cblxuLyoqXG4gKiBBY3Rpdml0aWVzQXBpIC0gYXhpb3MgcGFyYW1ldGVyIGNyZWF0b3JcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0IGNvbnN0IEFjdGl2aXRpZXNBcGlBeGlvc1BhcmFtQ3JlYXRvciA9IGZ1bmN0aW9uIChjb25maWd1cmF0aW9uPzogQ29uZmlndXJhdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIG5ldyBhY3Rpdml0eS5cbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVBY3Rpdml0eX0gY3JlYXRlQWN0aXZpdHkgTWV0YWRhdGEgb2YgdGhlIG5ldyBhY3Rpdml0eS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFjdGl2aXRpZXNDcmVhdGVBY3Rpdml0eShjcmVhdGVBY3Rpdml0eTogQ3JlYXRlQWN0aXZpdHksIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnY3JlYXRlQWN0aXZpdHknIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGNyZWF0ZUFjdGl2aXR5ID09PSBudWxsIHx8IGNyZWF0ZUFjdGl2aXR5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignY3JlYXRlQWN0aXZpdHknLCdSZXF1aXJlZCBwYXJhbWV0ZXIgY3JlYXRlQWN0aXZpdHkgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhY3Rpdml0aWVzQ3JlYXRlQWN0aXZpdHkuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS9hY3Rpdml0aWVzYDtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gZ2xvYmFsSW1wb3J0VXJsLnBhcnNlKGxvY2FsVmFyUGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSB7IG1ldGhvZDogJ1BPU1QnLCAuLi5iYXNlT3B0aW9ucywgLi4ub3B0aW9uc307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9IGFzIGFueTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG5cbiAgICAgICAgICAgIC8vIGF1dGhlbnRpY2F0aW9uIEJlYXJlciByZXF1aXJlZFxuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5hcGlLZXkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckFwaUtleVZhbHVlID0gdHlwZW9mIGNvbmZpZ3VyYXRpb24uYXBpS2V5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgID8gY29uZmlndXJhdGlvbi5hcGlLZXkoXCJBdXRob3JpemF0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgIDogY29uZmlndXJhdGlvbi5hcGlLZXk7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbXCJBdXRob3JpemF0aW9uXCJdID0gbG9jYWxWYXJBcGlLZXlWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgXG4gICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlclsnQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7XG5cbiAgICAgICAgICAgIGxvY2FsVmFyVXJsT2JqLnF1ZXJ5ID0gey4uLmxvY2FsVmFyVXJsT2JqLnF1ZXJ5LCAuLi5sb2NhbFZhclF1ZXJ5UGFyYW1ldGVyLCAuLi5vcHRpb25zLnF1ZXJ5fTtcbiAgICAgICAgICAgIC8vIGZpeCBvdmVycmlkZSBxdWVyeSBzdHJpbmcgRGV0YWlsOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzUxNzY3My8xMDc3OTQzXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxWYXJVcmxPYmouc2VhcmNoO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gey4uLmxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCAuLi5vcHRpb25zLmhlYWRlcnN9O1xuICAgICAgICAgICAgY29uc3QgbmVlZHNTZXJpYWxpemF0aW9uID0gKHR5cGVvZiBjcmVhdGVBY3Rpdml0eSAhPT0gXCJzdHJpbmdcIikgfHwgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5kYXRhID0gIG5lZWRzU2VyaWFsaXphdGlvbiA/IEpTT04uc3RyaW5naWZ5KGNyZWF0ZUFjdGl2aXR5ICE9PSB1bmRlZmluZWQgPyBjcmVhdGVBY3Rpdml0eSA6IHt9KSA6IChjcmVhdGVBY3Rpdml0eSB8fCBcIlwiKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IERlbGV0ZXMgYW4gYWN0aXZpdHkuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgYWN0aXZpdHkgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhY3Rpdml0aWVzRGVsZXRlQWN0aXZpdHkoaWQ6IHN0cmluZywgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdpZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAoaWQgPT09IG51bGwgfHwgaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdpZCcsJ1JlcXVpcmVkIHBhcmFtZXRlciBpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFjdGl2aXRpZXNEZWxldGVBY3Rpdml0eS4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL2FjdGl2aXRpZXMve2lkfWBcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJpZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGlkKSkpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnREVMRVRFJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBnbG9iYWxJbXBvcnRVcmwuZm9ybWF0KGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIHRoZSBtZXRhZGF0YSBvZiBhbiBhY3Rpdml0eS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBhY3Rpdml0eSBJZC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFjdGl2aXRpZXNSZWFkQWN0aXZpdHkoaWQ6IHN0cmluZywgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdpZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAoaWQgPT09IG51bGwgfHwgaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdpZCcsJ1JlcXVpcmVkIHBhcmFtZXRlciBpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFjdGl2aXRpZXNSZWFkQWN0aXZpdHkuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS9hY3Rpdml0aWVzL3tpZH1gXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoYHske1wiaWRcIn19YCwgZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhpZCkpKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gZ2xvYmFsSW1wb3J0VXJsLnBhcnNlKGxvY2FsVmFyUGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSB7IG1ldGhvZDogJ0dFVCcsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG5cbiAgICBcbiAgICAgICAgICAgIGxvY2FsVmFyVXJsT2JqLnF1ZXJ5ID0gey4uLmxvY2FsVmFyVXJsT2JqLnF1ZXJ5LCAuLi5sb2NhbFZhclF1ZXJ5UGFyYW1ldGVyLCAuLi5vcHRpb25zLnF1ZXJ5fTtcbiAgICAgICAgICAgIC8vIGZpeCBvdmVycmlkZSBxdWVyeSBzdHJpbmcgRGV0YWlsOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzUxNzY3My8xMDc3OTQzXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxWYXJVcmxPYmouc2VhcmNoO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gey4uLmxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCAuLi5vcHRpb25zLmhlYWRlcnN9O1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogZ2xvYmFsSW1wb3J0VXJsLmZvcm1hdChsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgUmVmZXJlbmNlcyBhbiBBbXBob3JhIGR1cmluZyBhIHJ1bi5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBhY3Rpdml0eSBJZC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHJ1bklkIFRoZSBydW4gSWQuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhbXBob3JhSWQgVGhlIElkIG9mIHRoZSBBbXBob3JhIHRvIHJlZmVyZW5jZS5cbiAgICAgICAgICogQHBhcmFtIHtBbXBob3JhUmVmZXJlbmNlfSBhbXBob3JhUmVmZXJlbmNlIEluZm9ybWF0aW9uIGFib3V0IHRoZSByZWZlcmVuY2UuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhY3Rpdml0aWVzUmVmZXJlbmNlQW1waG9yYShpZDogc3RyaW5nLCBydW5JZDogc3RyaW5nLCBhbXBob3JhSWQ6IHN0cmluZywgYW1waG9yYVJlZmVyZW5jZTogQW1waG9yYVJlZmVyZW5jZSwgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdpZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAoaWQgPT09IG51bGwgfHwgaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdpZCcsJ1JlcXVpcmVkIHBhcmFtZXRlciBpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFjdGl2aXRpZXNSZWZlcmVuY2VBbXBob3JhLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAncnVuSWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKHJ1bklkID09PSBudWxsIHx8IHJ1bklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcigncnVuSWQnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgcnVuSWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhY3Rpdml0aWVzUmVmZXJlbmNlQW1waG9yYS4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2FtcGhvcmFJZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAoYW1waG9yYUlkID09PSBudWxsIHx8IGFtcGhvcmFJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVpcmVkRXJyb3IoJ2FtcGhvcmFJZCcsJ1JlcXVpcmVkIHBhcmFtZXRlciBhbXBob3JhSWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhY3Rpdml0aWVzUmVmZXJlbmNlQW1waG9yYS4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2FtcGhvcmFSZWZlcmVuY2UnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGFtcGhvcmFSZWZlcmVuY2UgPT09IG51bGwgfHwgYW1waG9yYVJlZmVyZW5jZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVpcmVkRXJyb3IoJ2FtcGhvcmFSZWZlcmVuY2UnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgYW1waG9yYVJlZmVyZW5jZSB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFjdGl2aXRpZXNSZWZlcmVuY2VBbXBob3JhLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9hcGkvYWN0aXZpdGllcy97aWR9L1J1bnMve3J1bklkfS9hbXBob3JhZS97YW1waG9yYUlkfWBcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJpZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGlkKSkpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoYHske1wicnVuSWRcIn19YCwgZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhydW5JZCkpKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcImFtcGhvcmFJZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGFtcGhvcmFJZCkpKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gZ2xvYmFsSW1wb3J0VXJsLnBhcnNlKGxvY2FsVmFyUGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSB7IG1ldGhvZDogJ1BVVCcsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG5cbiAgICBcbiAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcblxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG4gICAgICAgICAgICBjb25zdCBuZWVkc1NlcmlhbGl6YXRpb24gPSAodHlwZW9mIGFtcGhvcmFSZWZlcmVuY2UgIT09IFwic3RyaW5nXCIpIHx8IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPT09ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuZGF0YSA9ICBuZWVkc1NlcmlhbGl6YXRpb24gPyBKU09OLnN0cmluZ2lmeShhbXBob3JhUmVmZXJlbmNlICE9PSB1bmRlZmluZWQgPyBhbXBob3JhUmVmZXJlbmNlIDoge30pIDogKGFtcGhvcmFSZWZlcmVuY2UgfHwgXCJcIik7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBnbG9iYWxJbXBvcnRVcmwuZm9ybWF0KGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBTdGFydHMgYSBuZXcgcnVuIG9mIGFuIGFjdGl2aXR5LlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGFjdGl2aXR5IGlkIGluIHdoaWNoIHRvIHN0YXJ0IGEgcnVuLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYWN0aXZpdGllc1N0YXJ0UnVuKGlkOiBzdHJpbmcsIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnaWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGlkID09PSBudWxsIHx8IGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignaWQnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgaWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhY3Rpdml0aWVzU3RhcnRSdW4uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS9hY3Rpdml0aWVzL3tpZH0vUnVuc2BcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJpZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGlkKSkpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnUE9TVCcsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG5cbiAgICBcbiAgICAgICAgICAgIGxvY2FsVmFyVXJsT2JqLnF1ZXJ5ID0gey4uLmxvY2FsVmFyVXJsT2JqLnF1ZXJ5LCAuLi5sb2NhbFZhclF1ZXJ5UGFyYW1ldGVyLCAuLi5vcHRpb25zLnF1ZXJ5fTtcbiAgICAgICAgICAgIC8vIGZpeCBvdmVycmlkZSBxdWVyeSBzdHJpbmcgRGV0YWlsOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzUxNzY3My8xMDc3OTQzXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxWYXJVcmxPYmouc2VhcmNoO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gey4uLmxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCAuLi5vcHRpb25zLmhlYWRlcnN9O1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogZ2xvYmFsSW1wb3J0VXJsLmZvcm1hdChsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgVXBkYXRlcyBhbmQgY29tcGxldGVzIGEgcnVuLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGFjdGl2aXR5IElkLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcnVuSWQgVGhlIHJ1biBJZC5cbiAgICAgICAgICogQHBhcmFtIHtVcGRhdGVSdW59IHVwZGF0ZVJ1biBJbmZvcm1hdGlvbiBhYm91dCB0aGUgdXBkYXRlLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYWN0aXZpdGllc1VwZGF0ZVJ1bihpZDogc3RyaW5nLCBydW5JZDogc3RyaW5nLCB1cGRhdGVSdW46IFVwZGF0ZVJ1biwgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdpZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAoaWQgPT09IG51bGwgfHwgaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdpZCcsJ1JlcXVpcmVkIHBhcmFtZXRlciBpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFjdGl2aXRpZXNVcGRhdGVSdW4uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdydW5JZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAocnVuSWQgPT09IG51bGwgfHwgcnVuSWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdydW5JZCcsJ1JlcXVpcmVkIHBhcmFtZXRlciBydW5JZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFjdGl2aXRpZXNVcGRhdGVSdW4uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICd1cGRhdGVSdW4nIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKHVwZGF0ZVJ1biA9PT0gbnVsbCB8fCB1cGRhdGVSdW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCd1cGRhdGVSdW4nLCdSZXF1aXJlZCBwYXJhbWV0ZXIgdXBkYXRlUnVuIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgYWN0aXZpdGllc1VwZGF0ZVJ1bi4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL2FjdGl2aXRpZXMve2lkfS9SdW5zL3tydW5JZH1gXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoYHske1wiaWRcIn19YCwgZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhpZCkpKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcInJ1bklkXCJ9fWAsIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcocnVuSWQpKSk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IGdsb2JhbEltcG9ydFVybC5wYXJzZShsb2NhbFZhclBhdGgsIHRydWUpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0geyBtZXRob2Q6ICdQT1NUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcbiAgICAgICAgICAgIGNvbnN0IG5lZWRzU2VyaWFsaXphdGlvbiA9ICh0eXBlb2YgdXBkYXRlUnVuICE9PSBcInN0cmluZ1wiKSB8fCBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID09PSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmRhdGEgPSAgbmVlZHNTZXJpYWxpemF0aW9uID8gSlNPTi5zdHJpbmdpZnkodXBkYXRlUnVuICE9PSB1bmRlZmluZWQgPyB1cGRhdGVSdW4gOiB7fSkgOiAodXBkYXRlUnVuIHx8IFwiXCIpO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogZ2xvYmFsSW1wb3J0VXJsLmZvcm1hdChsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfVxufTtcblxuLyoqXG4gKiBBY3Rpdml0aWVzQXBpIC0gZnVuY3Rpb25hbCBwcm9ncmFtbWluZyBpbnRlcmZhY2VcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0IGNvbnN0IEFjdGl2aXRpZXNBcGlGcCA9IGZ1bmN0aW9uKGNvbmZpZ3VyYXRpb24/OiBDb25maWd1cmF0aW9uKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgbmV3IGFjdGl2aXR5LlxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZUFjdGl2aXR5fSBjcmVhdGVBY3Rpdml0eSBNZXRhZGF0YSBvZiB0aGUgbmV3IGFjdGl2aXR5LlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYWN0aXZpdGllc0NyZWF0ZUFjdGl2aXR5KGNyZWF0ZUFjdGl2aXR5OiBDcmVhdGVBY3Rpdml0eSwgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8QWN0aXZpdHk+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gQWN0aXZpdGllc0FwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLmFjdGl2aXRpZXNDcmVhdGVBY3Rpdml0eShjcmVhdGVBY3Rpdml0eSwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gKGF4aW9zOiBBeGlvc0luc3RhbmNlID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoOiBzdHJpbmcgPSBCQVNFX1BBVEgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlvc1JlcXVlc3RBcmdzID0gey4uLmxvY2FsVmFyQXhpb3NBcmdzLm9wdGlvbnMsIHVybDogYmFzZVBhdGggKyBsb2NhbFZhckF4aW9zQXJncy51cmx9O1xuICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5yZXF1ZXN0KGF4aW9zUmVxdWVzdEFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBEZWxldGVzIGFuIGFjdGl2aXR5LlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGFjdGl2aXR5IElkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYWN0aXZpdGllc0RlbGV0ZUFjdGl2aXR5KGlkOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpOiAoYXhpb3M/OiBBeGlvc0luc3RhbmNlLCBiYXNlUGF0aD86IHN0cmluZykgPT4gQXhpb3NQcm9taXNlPFJlc3BvbnNlPiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IEFjdGl2aXRpZXNBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS5hY3Rpdml0aWVzRGVsZXRlQWN0aXZpdHkoaWQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgR2V0cyB0aGUgbWV0YWRhdGEgb2YgYW4gYWN0aXZpdHkuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgYWN0aXZpdHkgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhY3Rpdml0aWVzUmVhZEFjdGl2aXR5KGlkOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpOiAoYXhpb3M/OiBBeGlvc0luc3RhbmNlLCBiYXNlUGF0aD86IHN0cmluZykgPT4gQXhpb3NQcm9taXNlPEFjdGl2aXR5PiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IEFjdGl2aXRpZXNBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS5hY3Rpdml0aWVzUmVhZEFjdGl2aXR5KGlkLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IFJlZmVyZW5jZXMgYW4gQW1waG9yYSBkdXJpbmcgYSBydW4uXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgYWN0aXZpdHkgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBydW5JZCBUaGUgcnVuIElkLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYW1waG9yYUlkIFRoZSBJZCBvZiB0aGUgQW1waG9yYSB0byByZWZlcmVuY2UuXG4gICAgICAgICAqIEBwYXJhbSB7QW1waG9yYVJlZmVyZW5jZX0gYW1waG9yYVJlZmVyZW5jZSBJbmZvcm1hdGlvbiBhYm91dCB0aGUgcmVmZXJlbmNlLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYWN0aXZpdGllc1JlZmVyZW5jZUFtcGhvcmEoaWQ6IHN0cmluZywgcnVuSWQ6IHN0cmluZywgYW1waG9yYUlkOiBzdHJpbmcsIGFtcGhvcmFSZWZlcmVuY2U6IEFtcGhvcmFSZWZlcmVuY2UsIG9wdGlvbnM/OiBhbnkpOiAoYXhpb3M/OiBBeGlvc0luc3RhbmNlLCBiYXNlUGF0aD86IHN0cmluZykgPT4gQXhpb3NQcm9taXNlPEFtcGhvcmFSZWZlcmVuY2U+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gQWN0aXZpdGllc0FwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLmFjdGl2aXRpZXNSZWZlcmVuY2VBbXBob3JhKGlkLCBydW5JZCwgYW1waG9yYUlkLCBhbXBob3JhUmVmZXJlbmNlLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IFN0YXJ0cyBhIG5ldyBydW4gb2YgYW4gYWN0aXZpdHkuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgYWN0aXZpdHkgaWQgaW4gd2hpY2ggdG8gc3RhcnQgYSBydW4uXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhY3Rpdml0aWVzU3RhcnRSdW4oaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8UnVuPiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IEFjdGl2aXRpZXNBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS5hY3Rpdml0aWVzU3RhcnRSdW4oaWQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgVXBkYXRlcyBhbmQgY29tcGxldGVzIGEgcnVuLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGFjdGl2aXR5IElkLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcnVuSWQgVGhlIHJ1biBJZC5cbiAgICAgICAgICogQHBhcmFtIHtVcGRhdGVSdW59IHVwZGF0ZVJ1biBJbmZvcm1hdGlvbiBhYm91dCB0aGUgdXBkYXRlLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYWN0aXZpdGllc1VwZGF0ZVJ1bihpZDogc3RyaW5nLCBydW5JZDogc3RyaW5nLCB1cGRhdGVSdW46IFVwZGF0ZVJ1biwgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8UnVuPiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IEFjdGl2aXRpZXNBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS5hY3Rpdml0aWVzVXBkYXRlUnVuKGlkLCBydW5JZCwgdXBkYXRlUnVuLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH1cbn07XG5cbi8qKlxuICogQWN0aXZpdGllc0FwaSAtIGZhY3RvcnkgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydCBjb25zdCBBY3Rpdml0aWVzQXBpRmFjdG9yeSA9IGZ1bmN0aW9uIChjb25maWd1cmF0aW9uPzogQ29uZmlndXJhdGlvbiwgYmFzZVBhdGg/OiBzdHJpbmcsIGF4aW9zPzogQXhpb3NJbnN0YW5jZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIG5ldyBhY3Rpdml0eS5cbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVBY3Rpdml0eX0gY3JlYXRlQWN0aXZpdHkgTWV0YWRhdGEgb2YgdGhlIG5ldyBhY3Rpdml0eS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFjdGl2aXRpZXNDcmVhdGVBY3Rpdml0eShjcmVhdGVBY3Rpdml0eTogQ3JlYXRlQWN0aXZpdHksIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBBY3Rpdml0aWVzQXBpRnAoY29uZmlndXJhdGlvbikuYWN0aXZpdGllc0NyZWF0ZUFjdGl2aXR5KGNyZWF0ZUFjdGl2aXR5LCBvcHRpb25zKShheGlvcywgYmFzZVBhdGgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IERlbGV0ZXMgYW4gYWN0aXZpdHkuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgYWN0aXZpdHkgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhY3Rpdml0aWVzRGVsZXRlQWN0aXZpdHkoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIEFjdGl2aXRpZXNBcGlGcChjb25maWd1cmF0aW9uKS5hY3Rpdml0aWVzRGVsZXRlQWN0aXZpdHkoaWQsIG9wdGlvbnMpKGF4aW9zLCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgR2V0cyB0aGUgbWV0YWRhdGEgb2YgYW4gYWN0aXZpdHkuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgYWN0aXZpdHkgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhY3Rpdml0aWVzUmVhZEFjdGl2aXR5KGlkOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBBY3Rpdml0aWVzQXBpRnAoY29uZmlndXJhdGlvbikuYWN0aXZpdGllc1JlYWRBY3Rpdml0eShpZCwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBSZWZlcmVuY2VzIGFuIEFtcGhvcmEgZHVyaW5nIGEgcnVuLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGFjdGl2aXR5IElkLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcnVuSWQgVGhlIHJ1biBJZC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGFtcGhvcmFJZCBUaGUgSWQgb2YgdGhlIEFtcGhvcmEgdG8gcmVmZXJlbmNlLlxuICAgICAgICAgKiBAcGFyYW0ge0FtcGhvcmFSZWZlcmVuY2V9IGFtcGhvcmFSZWZlcmVuY2UgSW5mb3JtYXRpb24gYWJvdXQgdGhlIHJlZmVyZW5jZS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFjdGl2aXRpZXNSZWZlcmVuY2VBbXBob3JhKGlkOiBzdHJpbmcsIHJ1bklkOiBzdHJpbmcsIGFtcGhvcmFJZDogc3RyaW5nLCBhbXBob3JhUmVmZXJlbmNlOiBBbXBob3JhUmVmZXJlbmNlLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gQWN0aXZpdGllc0FwaUZwKGNvbmZpZ3VyYXRpb24pLmFjdGl2aXRpZXNSZWZlcmVuY2VBbXBob3JhKGlkLCBydW5JZCwgYW1waG9yYUlkLCBhbXBob3JhUmVmZXJlbmNlLCBvcHRpb25zKShheGlvcywgYmFzZVBhdGgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IFN0YXJ0cyBhIG5ldyBydW4gb2YgYW4gYWN0aXZpdHkuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgYWN0aXZpdHkgaWQgaW4gd2hpY2ggdG8gc3RhcnQgYSBydW4uXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhY3Rpdml0aWVzU3RhcnRSdW4oaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIEFjdGl2aXRpZXNBcGlGcChjb25maWd1cmF0aW9uKS5hY3Rpdml0aWVzU3RhcnRSdW4oaWQsIG9wdGlvbnMpKGF4aW9zLCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgVXBkYXRlcyBhbmQgY29tcGxldGVzIGEgcnVuLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGFjdGl2aXR5IElkLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcnVuSWQgVGhlIHJ1biBJZC5cbiAgICAgICAgICogQHBhcmFtIHtVcGRhdGVSdW59IHVwZGF0ZVJ1biBJbmZvcm1hdGlvbiBhYm91dCB0aGUgdXBkYXRlLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYWN0aXZpdGllc1VwZGF0ZVJ1bihpZDogc3RyaW5nLCBydW5JZDogc3RyaW5nLCB1cGRhdGVSdW46IFVwZGF0ZVJ1biwgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIEFjdGl2aXRpZXNBcGlGcChjb25maWd1cmF0aW9uKS5hY3Rpdml0aWVzVXBkYXRlUnVuKGlkLCBydW5JZCwgdXBkYXRlUnVuLCBvcHRpb25zKShheGlvcywgYmFzZVBhdGgpO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuXG4vKipcbiAqIEFjdGl2aXRpZXNBcGkgLSBvYmplY3Qtb3JpZW50ZWQgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgQWN0aXZpdGllc0FwaVxuICogQGV4dGVuZHMge0Jhc2VBUEl9XG4gKi9cbmV4cG9ydCBjbGFzcyBBY3Rpdml0aWVzQXBpIGV4dGVuZHMgQmFzZUFQSSB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIG5ldyBhY3Rpdml0eS5cbiAgICAgKiBAcGFyYW0ge0NyZWF0ZUFjdGl2aXR5fSBjcmVhdGVBY3Rpdml0eSBNZXRhZGF0YSBvZiB0aGUgbmV3IGFjdGl2aXR5LlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgQWN0aXZpdGllc0FwaVxuICAgICAqL1xuICAgIHB1YmxpYyBhY3Rpdml0aWVzQ3JlYXRlQWN0aXZpdHkoY3JlYXRlQWN0aXZpdHk6IENyZWF0ZUFjdGl2aXR5LCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBBY3Rpdml0aWVzQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5hY3Rpdml0aWVzQ3JlYXRlQWN0aXZpdHkoY3JlYXRlQWN0aXZpdHksIG9wdGlvbnMpKHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBzdW1tYXJ5IERlbGV0ZXMgYW4gYWN0aXZpdHkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBhY3Rpdml0eSBJZC5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIEFjdGl2aXRpZXNBcGlcbiAgICAgKi9cbiAgICBwdWJsaWMgYWN0aXZpdGllc0RlbGV0ZUFjdGl2aXR5KGlkOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIEFjdGl2aXRpZXNBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmFjdGl2aXRpZXNEZWxldGVBY3Rpdml0eShpZCwgb3B0aW9ucykodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHN1bW1hcnkgR2V0cyB0aGUgbWV0YWRhdGEgb2YgYW4gYWN0aXZpdHkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBhY3Rpdml0eSBJZC5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIEFjdGl2aXRpZXNBcGlcbiAgICAgKi9cbiAgICBwdWJsaWMgYWN0aXZpdGllc1JlYWRBY3Rpdml0eShpZDogc3RyaW5nLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBBY3Rpdml0aWVzQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5hY3Rpdml0aWVzUmVhZEFjdGl2aXR5KGlkLCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAc3VtbWFyeSBSZWZlcmVuY2VzIGFuIEFtcGhvcmEgZHVyaW5nIGEgcnVuLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgYWN0aXZpdHkgSWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJ1bklkIFRoZSBydW4gSWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGFtcGhvcmFJZCBUaGUgSWQgb2YgdGhlIEFtcGhvcmEgdG8gcmVmZXJlbmNlLlxuICAgICAqIEBwYXJhbSB7QW1waG9yYVJlZmVyZW5jZX0gYW1waG9yYVJlZmVyZW5jZSBJbmZvcm1hdGlvbiBhYm91dCB0aGUgcmVmZXJlbmNlLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgQWN0aXZpdGllc0FwaVxuICAgICAqL1xuICAgIHB1YmxpYyBhY3Rpdml0aWVzUmVmZXJlbmNlQW1waG9yYShpZDogc3RyaW5nLCBydW5JZDogc3RyaW5nLCBhbXBob3JhSWQ6IHN0cmluZywgYW1waG9yYVJlZmVyZW5jZTogQW1waG9yYVJlZmVyZW5jZSwgb3B0aW9ucz86IGFueSkge1xuICAgICAgICByZXR1cm4gQWN0aXZpdGllc0FwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuYWN0aXZpdGllc1JlZmVyZW5jZUFtcGhvcmEoaWQsIHJ1bklkLCBhbXBob3JhSWQsIGFtcGhvcmFSZWZlcmVuY2UsIG9wdGlvbnMpKHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBzdW1tYXJ5IFN0YXJ0cyBhIG5ldyBydW4gb2YgYW4gYWN0aXZpdHkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBhY3Rpdml0eSBpZCBpbiB3aGljaCB0byBzdGFydCBhIHJ1bi5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIEFjdGl2aXRpZXNBcGlcbiAgICAgKi9cbiAgICBwdWJsaWMgYWN0aXZpdGllc1N0YXJ0UnVuKGlkOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIEFjdGl2aXRpZXNBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmFjdGl2aXRpZXNTdGFydFJ1bihpZCwgb3B0aW9ucykodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHN1bW1hcnkgVXBkYXRlcyBhbmQgY29tcGxldGVzIGEgcnVuLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgYWN0aXZpdHkgSWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJ1bklkIFRoZSBydW4gSWQuXG4gICAgICogQHBhcmFtIHtVcGRhdGVSdW59IHVwZGF0ZVJ1biBJbmZvcm1hdGlvbiBhYm91dCB0aGUgdXBkYXRlLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgQWN0aXZpdGllc0FwaVxuICAgICAqL1xuICAgIHB1YmxpYyBhY3Rpdml0aWVzVXBkYXRlUnVuKGlkOiBzdHJpbmcsIHJ1bklkOiBzdHJpbmcsIHVwZGF0ZVJ1bjogVXBkYXRlUnVuLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBBY3Rpdml0aWVzQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5hY3Rpdml0aWVzVXBkYXRlUnVuKGlkLCBydW5JZCwgdXBkYXRlUnVuLCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbn1cblxuXG4vKipcbiAqIEFtcGhvcmFlQXBpIC0gYXhpb3MgcGFyYW1ldGVyIGNyZWF0b3JcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0IGNvbnN0IEFtcGhvcmFlQXBpQXhpb3NQYXJhbUNyZWF0b3IgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbj86IENvbmZpZ3VyYXRpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgdGhlIGRhdGEgcXVhbGl0eSBtZXRyaWNzIGZvciB0aGlzIEFtcGhvcmEuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYVF1YWxpdHlHZXQoaWQ6IHN0cmluZywgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdpZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAoaWQgPT09IG51bGwgfHwgaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdpZCcsJ1JlcXVpcmVkIHBhcmFtZXRlciBpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFtcGhvcmFRdWFsaXR5R2V0LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9hcGkvYW1waG9yYWUve2lkfS9xdWFsaXR5YFxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcImlkXCJ9fWAsIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaWQpKSk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IGdsb2JhbEltcG9ydFVybC5wYXJzZShsb2NhbFZhclBhdGgsIHRydWUpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0geyBtZXRob2Q6ICdHRVQnLCAuLi5iYXNlT3B0aW9ucywgLi4ub3B0aW9uc307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9IGFzIGFueTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG5cbiAgICAgICAgICAgIC8vIGF1dGhlbnRpY2F0aW9uIEJlYXJlciByZXF1aXJlZFxuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5hcGlLZXkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckFwaUtleVZhbHVlID0gdHlwZW9mIGNvbmZpZ3VyYXRpb24uYXBpS2V5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgID8gY29uZmlndXJhdGlvbi5hcGlLZXkoXCJBdXRob3JpemF0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgIDogY29uZmlndXJhdGlvbi5hcGlLZXk7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbXCJBdXRob3JpemF0aW9uXCJdID0gbG9jYWxWYXJBcGlLZXlWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IFNldHMgdGhlIGRhdGEgcXVhbGl0eSBtZXRyaWNzIGZvciB0aGlzIEFtcGhvcmEuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0ge1F1YWxpdHl9IHF1YWxpdHkgVGhlIGRhdGEgcXVhbGl0eSBtZXRyaWNzLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYVF1YWxpdHlTZXQoaWQ6IHN0cmluZywgcXVhbGl0eTogUXVhbGl0eSwgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdpZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAoaWQgPT09IG51bGwgfHwgaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdpZCcsJ1JlcXVpcmVkIHBhcmFtZXRlciBpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFtcGhvcmFRdWFsaXR5U2V0LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAncXVhbGl0eScgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAocXVhbGl0eSA9PT0gbnVsbCB8fCBxdWFsaXR5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcigncXVhbGl0eScsJ1JlcXVpcmVkIHBhcmFtZXRlciBxdWFsaXR5IHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgYW1waG9yYVF1YWxpdHlTZXQuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS9hbXBob3JhZS97aWR9L3F1YWxpdHlgXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoYHske1wiaWRcIn19YCwgZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhpZCkpKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gZ2xvYmFsSW1wb3J0VXJsLnBhcnNlKGxvY2FsVmFyUGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSB7IG1ldGhvZDogJ1BPU1QnLCAuLi5iYXNlT3B0aW9ucywgLi4ub3B0aW9uc307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9IGFzIGFueTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG5cbiAgICAgICAgICAgIC8vIGF1dGhlbnRpY2F0aW9uIEJlYXJlciByZXF1aXJlZFxuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5hcGlLZXkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckFwaUtleVZhbHVlID0gdHlwZW9mIGNvbmZpZ3VyYXRpb24uYXBpS2V5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgID8gY29uZmlndXJhdGlvbi5hcGlLZXkoXCJBdXRob3JpemF0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgIDogY29uZmlndXJhdGlvbi5hcGlLZXk7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbXCJBdXRob3JpemF0aW9uXCJdID0gbG9jYWxWYXJBcGlLZXlWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgXG4gICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlclsnQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7XG5cbiAgICAgICAgICAgIGxvY2FsVmFyVXJsT2JqLnF1ZXJ5ID0gey4uLmxvY2FsVmFyVXJsT2JqLnF1ZXJ5LCAuLi5sb2NhbFZhclF1ZXJ5UGFyYW1ldGVyLCAuLi5vcHRpb25zLnF1ZXJ5fTtcbiAgICAgICAgICAgIC8vIGZpeCBvdmVycmlkZSBxdWVyeSBzdHJpbmcgRGV0YWlsOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzUxNzY3My8xMDc3OTQzXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxWYXJVcmxPYmouc2VhcmNoO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gey4uLmxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCAuLi5vcHRpb25zLmhlYWRlcnN9O1xuICAgICAgICAgICAgY29uc3QgbmVlZHNTZXJpYWxpemF0aW9uID0gKHR5cGVvZiBxdWFsaXR5ICE9PSBcInN0cmluZ1wiKSB8fCBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID09PSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmRhdGEgPSAgbmVlZHNTZXJpYWxpemF0aW9uID8gSlNPTi5zdHJpbmdpZnkocXVhbGl0eSAhPT0gdW5kZWZpbmVkID8gcXVhbGl0eSA6IHt9KSA6IChxdWFsaXR5IHx8IFwiXCIpO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogZ2xvYmFsSW1wb3J0VXJsLmZvcm1hdChsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhbiBBY2Nlc3MgQ29udHJvbCBSdWxlIGZvciBhbGwgb24gdGhpcyBBbXBob3JhLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW1waG9yYSBJZC5cbiAgICAgICAgICogQHBhcmFtIHtBbGxBY2Nlc3NSdWxlfSBhbGxBY2Nlc3NSdWxlIFRoZSBydWxlIHRvIGNyZWF0ZS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFtcGhvcmFlQWNjZXNzQ29udHJvbHNDcmVhdGVGb3JBbGwoaWQ6IHN0cmluZywgYWxsQWNjZXNzUnVsZTogQWxsQWNjZXNzUnVsZSwgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdpZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAoaWQgPT09IG51bGwgfHwgaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdpZCcsJ1JlcXVpcmVkIHBhcmFtZXRlciBpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFtcGhvcmFlQWNjZXNzQ29udHJvbHNDcmVhdGVGb3JBbGwuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdhbGxBY2Nlc3NSdWxlJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGlmIChhbGxBY2Nlc3NSdWxlID09PSBudWxsIHx8IGFsbEFjY2Vzc1J1bGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdhbGxBY2Nlc3NSdWxlJywnUmVxdWlyZWQgcGFyYW1ldGVyIGFsbEFjY2Vzc1J1bGUgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhbXBob3JhZUFjY2Vzc0NvbnRyb2xzQ3JlYXRlRm9yQWxsLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9hcGkvYW1waG9yYWUve2lkfS9BY2Nlc3NDb250cm9scy9Gb3JBbGxgXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoYHske1wiaWRcIn19YCwgZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhpZCkpKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gZ2xvYmFsSW1wb3J0VXJsLnBhcnNlKGxvY2FsVmFyUGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSB7IG1ldGhvZDogJ1BPU1QnLCAuLi5iYXNlT3B0aW9ucywgLi4ub3B0aW9uc307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9IGFzIGFueTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG5cbiAgICAgICAgICAgIC8vIGF1dGhlbnRpY2F0aW9uIEJlYXJlciByZXF1aXJlZFxuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5hcGlLZXkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckFwaUtleVZhbHVlID0gdHlwZW9mIGNvbmZpZ3VyYXRpb24uYXBpS2V5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgID8gY29uZmlndXJhdGlvbi5hcGlLZXkoXCJBdXRob3JpemF0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgIDogY29uZmlndXJhdGlvbi5hcGlLZXk7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbXCJBdXRob3JpemF0aW9uXCJdID0gbG9jYWxWYXJBcGlLZXlWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgXG4gICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlclsnQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7XG5cbiAgICAgICAgICAgIGxvY2FsVmFyVXJsT2JqLnF1ZXJ5ID0gey4uLmxvY2FsVmFyVXJsT2JqLnF1ZXJ5LCAuLi5sb2NhbFZhclF1ZXJ5UGFyYW1ldGVyLCAuLi5vcHRpb25zLnF1ZXJ5fTtcbiAgICAgICAgICAgIC8vIGZpeCBvdmVycmlkZSBxdWVyeSBzdHJpbmcgRGV0YWlsOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzUxNzY3My8xMDc3OTQzXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxWYXJVcmxPYmouc2VhcmNoO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gey4uLmxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCAuLi5vcHRpb25zLmhlYWRlcnN9O1xuICAgICAgICAgICAgY29uc3QgbmVlZHNTZXJpYWxpemF0aW9uID0gKHR5cGVvZiBhbGxBY2Nlc3NSdWxlICE9PSBcInN0cmluZ1wiKSB8fCBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID09PSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmRhdGEgPSAgbmVlZHNTZXJpYWxpemF0aW9uID8gSlNPTi5zdHJpbmdpZnkoYWxsQWNjZXNzUnVsZSAhPT0gdW5kZWZpbmVkID8gYWxsQWNjZXNzUnVsZSA6IHt9KSA6IChhbGxBY2Nlc3NSdWxlIHx8IFwiXCIpO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogZ2xvYmFsSW1wb3J0VXJsLmZvcm1hdChsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhbiBBY2Nlc3MgQ29udHJvbCBSdWxlIG9uIHRoaXMgQW1waG9yYS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7T3JnYW5pc2F0aW9uQWNjZXNzUnVsZX0gb3JnYW5pc2F0aW9uQWNjZXNzUnVsZSBUaGUgcnVsZSB0byBjcmVhdGUuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZUFjY2Vzc0NvbnRyb2xzQ3JlYXRlRm9yT3JnYW5pc2F0aW9uKGlkOiBzdHJpbmcsIG9yZ2FuaXNhdGlvbkFjY2Vzc1J1bGU6IE9yZ2FuaXNhdGlvbkFjY2Vzc1J1bGUsIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnaWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGlkID09PSBudWxsIHx8IGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignaWQnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgaWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhbXBob3JhZUFjY2Vzc0NvbnRyb2xzQ3JlYXRlRm9yT3JnYW5pc2F0aW9uLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnb3JnYW5pc2F0aW9uQWNjZXNzUnVsZScgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAob3JnYW5pc2F0aW9uQWNjZXNzUnVsZSA9PT0gbnVsbCB8fCBvcmdhbmlzYXRpb25BY2Nlc3NSdWxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignb3JnYW5pc2F0aW9uQWNjZXNzUnVsZScsJ1JlcXVpcmVkIHBhcmFtZXRlciBvcmdhbmlzYXRpb25BY2Nlc3NSdWxlIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgYW1waG9yYWVBY2Nlc3NDb250cm9sc0NyZWF0ZUZvck9yZ2FuaXNhdGlvbi4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL2FtcGhvcmFlL3tpZH0vQWNjZXNzQ29udHJvbHMvRm9yT3JnYW5pc2F0aW9uYFxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcImlkXCJ9fWAsIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaWQpKSk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IGdsb2JhbEltcG9ydFVybC5wYXJzZShsb2NhbFZhclBhdGgsIHRydWUpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0geyBtZXRob2Q6ICdQT1NUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcbiAgICAgICAgICAgIGNvbnN0IG5lZWRzU2VyaWFsaXphdGlvbiA9ICh0eXBlb2Ygb3JnYW5pc2F0aW9uQWNjZXNzUnVsZSAhPT0gXCJzdHJpbmdcIikgfHwgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5kYXRhID0gIG5lZWRzU2VyaWFsaXphdGlvbiA/IEpTT04uc3RyaW5naWZ5KG9yZ2FuaXNhdGlvbkFjY2Vzc1J1bGUgIT09IHVuZGVmaW5lZCA/IG9yZ2FuaXNhdGlvbkFjY2Vzc1J1bGUgOiB7fSkgOiAob3JnYW5pc2F0aW9uQWNjZXNzUnVsZSB8fCBcIlwiKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYW4gQWNjZXNzIENvbnRyb2wgcnVsZSBvbiB0aGlzIEFtcGhvcmEuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0ge1VzZXJBY2Nlc3NSdWxlfSB1c2VyQWNjZXNzUnVsZSBUaGUgcnVsZSB0byBjcmVhdGUuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZUFjY2Vzc0NvbnRyb2xzQ3JlYXRlRm9yVXNlcihpZDogc3RyaW5nLCB1c2VyQWNjZXNzUnVsZTogVXNlckFjY2Vzc1J1bGUsIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnaWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGlkID09PSBudWxsIHx8IGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignaWQnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgaWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhbXBob3JhZUFjY2Vzc0NvbnRyb2xzQ3JlYXRlRm9yVXNlci4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ3VzZXJBY2Nlc3NSdWxlJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGlmICh1c2VyQWNjZXNzUnVsZSA9PT0gbnVsbCB8fCB1c2VyQWNjZXNzUnVsZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVpcmVkRXJyb3IoJ3VzZXJBY2Nlc3NSdWxlJywnUmVxdWlyZWQgcGFyYW1ldGVyIHVzZXJBY2Nlc3NSdWxlIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgYW1waG9yYWVBY2Nlc3NDb250cm9sc0NyZWF0ZUZvclVzZXIuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS9hbXBob3JhZS97aWR9L0FjY2Vzc0NvbnRyb2xzL0ZvclVzZXJgXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoYHske1wiaWRcIn19YCwgZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhpZCkpKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gZ2xvYmFsSW1wb3J0VXJsLnBhcnNlKGxvY2FsVmFyUGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSB7IG1ldGhvZDogJ1BPU1QnLCAuLi5iYXNlT3B0aW9ucywgLi4ub3B0aW9uc307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9IGFzIGFueTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG5cbiAgICAgICAgICAgIC8vIGF1dGhlbnRpY2F0aW9uIEJlYXJlciByZXF1aXJlZFxuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5hcGlLZXkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckFwaUtleVZhbHVlID0gdHlwZW9mIGNvbmZpZ3VyYXRpb24uYXBpS2V5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgID8gY29uZmlndXJhdGlvbi5hcGlLZXkoXCJBdXRob3JpemF0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgIDogY29uZmlndXJhdGlvbi5hcGlLZXk7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbXCJBdXRob3JpemF0aW9uXCJdID0gbG9jYWxWYXJBcGlLZXlWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgXG4gICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlclsnQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7XG5cbiAgICAgICAgICAgIGxvY2FsVmFyVXJsT2JqLnF1ZXJ5ID0gey4uLmxvY2FsVmFyVXJsT2JqLnF1ZXJ5LCAuLi5sb2NhbFZhclF1ZXJ5UGFyYW1ldGVyLCAuLi5vcHRpb25zLnF1ZXJ5fTtcbiAgICAgICAgICAgIC8vIGZpeCBvdmVycmlkZSBxdWVyeSBzdHJpbmcgRGV0YWlsOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzUxNzY3My8xMDc3OTQzXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxWYXJVcmxPYmouc2VhcmNoO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gey4uLmxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCAuLi5vcHRpb25zLmhlYWRlcnN9O1xuICAgICAgICAgICAgY29uc3QgbmVlZHNTZXJpYWxpemF0aW9uID0gKHR5cGVvZiB1c2VyQWNjZXNzUnVsZSAhPT0gXCJzdHJpbmdcIikgfHwgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5kYXRhID0gIG5lZWRzU2VyaWFsaXphdGlvbiA/IEpTT04uc3RyaW5naWZ5KHVzZXJBY2Nlc3NSdWxlICE9PSB1bmRlZmluZWQgPyB1c2VyQWNjZXNzUnVsZSA6IHt9KSA6ICh1c2VyQWNjZXNzUnVsZSB8fCBcIlwiKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IERlbGV0ZXMgYW4gQWNjZXNzIENvbnRyb2wgb24gdGhpcyBBbXBob3JhLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW1waG9yYSBJZC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHJ1bGVJZCBUaGUgSWQgb2YgdGhlIHJ1bGUgdG8gZGVsZXRlLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYWVBY2Nlc3NDb250cm9sc0RlbGV0ZShpZDogc3RyaW5nLCBydWxlSWQ6IHN0cmluZywgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdpZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAoaWQgPT09IG51bGwgfHwgaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdpZCcsJ1JlcXVpcmVkIHBhcmFtZXRlciBpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFtcGhvcmFlQWNjZXNzQ29udHJvbHNEZWxldGUuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdydWxlSWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKHJ1bGVJZCA9PT0gbnVsbCB8fCBydWxlSWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdydWxlSWQnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgcnVsZUlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgYW1waG9yYWVBY2Nlc3NDb250cm9sc0RlbGV0ZS4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL2FtcGhvcmFlL3tpZH0vQWNjZXNzQ29udHJvbHMve3J1bGVJZH1gXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoYHske1wiaWRcIn19YCwgZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhpZCkpKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcInJ1bGVJZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHJ1bGVJZCkpKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gZ2xvYmFsSW1wb3J0VXJsLnBhcnNlKGxvY2FsVmFyUGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSB7IG1ldGhvZDogJ0RFTEVURScsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG5cbiAgICBcbiAgICAgICAgICAgIGxvY2FsVmFyVXJsT2JqLnF1ZXJ5ID0gey4uLmxvY2FsVmFyVXJsT2JqLnF1ZXJ5LCAuLi5sb2NhbFZhclF1ZXJ5UGFyYW1ldGVyLCAuLi5vcHRpb25zLnF1ZXJ5fTtcbiAgICAgICAgICAgIC8vIGZpeCBvdmVycmlkZSBxdWVyeSBzdHJpbmcgRGV0YWlsOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzUxNzY3My8xMDc3OTQzXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxWYXJVcmxPYmouc2VhcmNoO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gey4uLmxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCAuLi5vcHRpb25zLmhlYWRlcnN9O1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogZ2xvYmFsSW1wb3J0VXJsLmZvcm1hdChsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgR2V0cyB0aGUgXFwnZm9yIGFsbFxcJyBydWxlLCBpZiBpdCBleGlzdHMsIGVsc2UgYW4gZW1wdHkgMjAwLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW1waG9yYSBJZC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFtcGhvcmFlQWNjZXNzQ29udHJvbHNHZXRGb3JBbGxSdWxlKGlkOiBzdHJpbmcsIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnaWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGlkID09PSBudWxsIHx8IGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignaWQnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgaWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhbXBob3JhZUFjY2Vzc0NvbnRyb2xzR2V0Rm9yQWxsUnVsZS4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL2FtcGhvcmFlL3tpZH0vQWNjZXNzQ29udHJvbHMvRm9yQWxsYFxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcImlkXCJ9fWAsIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaWQpKSk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IGdsb2JhbEltcG9ydFVybC5wYXJzZShsb2NhbFZhclBhdGgsIHRydWUpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0geyBtZXRob2Q6ICdHRVQnLCAuLi5iYXNlT3B0aW9ucywgLi4ub3B0aW9uc307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9IGFzIGFueTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG5cbiAgICAgICAgICAgIC8vIGF1dGhlbnRpY2F0aW9uIEJlYXJlciByZXF1aXJlZFxuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5hcGlLZXkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckFwaUtleVZhbHVlID0gdHlwZW9mIGNvbmZpZ3VyYXRpb24uYXBpS2V5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgID8gY29uZmlndXJhdGlvbi5hcGlLZXkoXCJBdXRob3JpemF0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgIDogY29uZmlndXJhdGlvbi5hcGlLZXk7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbXCJBdXRob3JpemF0aW9uXCJdID0gbG9jYWxWYXJBcGlLZXlWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgdGhlIGxpc3Qgb2YgYWNjZXNzIHJ1bGVzIGFwcGxpZWQgdG8gb3JnYW5pc2F0aW9ucy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZUFjY2Vzc0NvbnRyb2xzR2V0T3JnYW5pc2F0aW9uUnVsZXMoaWQ6IHN0cmluZywgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdpZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAoaWQgPT09IG51bGwgfHwgaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdpZCcsJ1JlcXVpcmVkIHBhcmFtZXRlciBpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFtcGhvcmFlQWNjZXNzQ29udHJvbHNHZXRPcmdhbmlzYXRpb25SdWxlcy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL2FtcGhvcmFlL3tpZH0vQWNjZXNzQ29udHJvbHMvRm9yT3JnYW5pc2F0aW9uYFxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcImlkXCJ9fWAsIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaWQpKSk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IGdsb2JhbEltcG9ydFVybC5wYXJzZShsb2NhbFZhclBhdGgsIHRydWUpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0geyBtZXRob2Q6ICdHRVQnLCAuLi5iYXNlT3B0aW9ucywgLi4ub3B0aW9uc307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9IGFzIGFueTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG5cbiAgICAgICAgICAgIC8vIGF1dGhlbnRpY2F0aW9uIEJlYXJlciByZXF1aXJlZFxuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5hcGlLZXkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckFwaUtleVZhbHVlID0gdHlwZW9mIGNvbmZpZ3VyYXRpb24uYXBpS2V5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgID8gY29uZmlndXJhdGlvbi5hcGlLZXkoXCJBdXRob3JpemF0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgIDogY29uZmlndXJhdGlvbi5hcGlLZXk7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbXCJBdXRob3JpemF0aW9uXCJdID0gbG9jYWxWYXJBcGlLZXlWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgdGhlIGxpc3Qgb2YgYWNjZXNzIHJ1bGVzIGFwcGxpZWQgdG8gdXNlcnMuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYWVBY2Nlc3NDb250cm9sc0dldFVzZXJSdWxlcyhpZDogc3RyaW5nLCBvcHRpb25zOiBhbnkgPSB7fSk6IFJlcXVlc3RBcmdzIHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2lkJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGlmIChpZCA9PT0gbnVsbCB8fCBpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVpcmVkRXJyb3IoJ2lkJywnUmVxdWlyZWQgcGFyYW1ldGVyIGlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgYW1waG9yYWVBY2Nlc3NDb250cm9sc0dldFVzZXJSdWxlcy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL2FtcGhvcmFlL3tpZH0vQWNjZXNzQ29udHJvbHMvRm9yVXNlcmBcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJpZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGlkKSkpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnR0VUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBnbG9iYWxJbXBvcnRVcmwuZm9ybWF0KGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgbmV3IGVtcHR5IEFtcGhvcmEgaW4gdGhlIHVzZXJcXCdzIG9yZ2FuaXNhdGlvbi5cbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVBbXBob3JhfSBjcmVhdGVBbXBob3JhIEluZm9ybWF0aW9uIGZvciB0aGUgbmV3IEFtcGhvcmEuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZUNyZWF0ZShjcmVhdGVBbXBob3JhOiBDcmVhdGVBbXBob3JhLCBvcHRpb25zOiBhbnkgPSB7fSk6IFJlcXVlc3RBcmdzIHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2NyZWF0ZUFtcGhvcmEnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGNyZWF0ZUFtcGhvcmEgPT09IG51bGwgfHwgY3JlYXRlQW1waG9yYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVpcmVkRXJyb3IoJ2NyZWF0ZUFtcGhvcmEnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgY3JlYXRlQW1waG9yYSB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFtcGhvcmFlQ3JlYXRlLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9hcGkvYW1waG9yYWVgO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnUE9TVCcsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG5cbiAgICBcbiAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcblxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG4gICAgICAgICAgICBjb25zdCBuZWVkc1NlcmlhbGl6YXRpb24gPSAodHlwZW9mIGNyZWF0ZUFtcGhvcmEgIT09IFwic3RyaW5nXCIpIHx8IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPT09ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuZGF0YSA9ICBuZWVkc1NlcmlhbGl6YXRpb24gPyBKU09OLnN0cmluZ2lmeShjcmVhdGVBbXBob3JhICE9PSB1bmRlZmluZWQgPyBjcmVhdGVBbXBob3JhIDoge30pIDogKGNyZWF0ZUFtcGhvcmEgfHwgXCJcIik7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBnbG9iYWxJbXBvcnRVcmwuZm9ybWF0KGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBEZWxldGVzIGFuIEFtcGhvcmEuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYWVEZWxldGUoaWQ6IHN0cmluZywgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdpZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAoaWQgPT09IG51bGwgfHwgaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdpZCcsJ1JlcXVpcmVkIHBhcmFtZXRlciBpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFtcGhvcmFlRGVsZXRlLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9hcGkvYW1waG9yYWUve2lkfWBcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJpZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGlkKSkpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnREVMRVRFJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBnbG9iYWxJbXBvcnRVcmwuZm9ybWF0KGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgZmlsZS4gUmV0dXJucyBhIGJsb2IgVVJMIHRvIHVwbG9hZCB0by5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlIFRoZSBuYW1lIG9mIHRoZSBmaWxlLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYWVGaWxlc0NyZWF0ZUZpbGVSZXF1ZXN0KGlkOiBzdHJpbmcsIGZpbGU6IHN0cmluZywgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdpZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAoaWQgPT09IG51bGwgfHwgaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdpZCcsJ1JlcXVpcmVkIHBhcmFtZXRlciBpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFtcGhvcmFlRmlsZXNDcmVhdGVGaWxlUmVxdWVzdC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2ZpbGUnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGZpbGUgPT09IG51bGwgfHwgZmlsZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVpcmVkRXJyb3IoJ2ZpbGUnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgZmlsZSB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFtcGhvcmFlRmlsZXNDcmVhdGVGaWxlUmVxdWVzdC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL2FtcGhvcmFlL3tpZH0vZmlsZXMve2ZpbGV9YFxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcImlkXCJ9fWAsIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaWQpKSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJmaWxlXCJ9fWAsIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoZmlsZSkpKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gZ2xvYmFsSW1wb3J0VXJsLnBhcnNlKGxvY2FsVmFyUGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSB7IG1ldGhvZDogJ1BPU1QnLCAuLi5iYXNlT3B0aW9ucywgLi4ub3B0aW9uc307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9IGFzIGFueTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG5cbiAgICAgICAgICAgIC8vIGF1dGhlbnRpY2F0aW9uIEJlYXJlciByZXF1aXJlZFxuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5hcGlLZXkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckFwaUtleVZhbHVlID0gdHlwZW9mIGNvbmZpZ3VyYXRpb24uYXBpS2V5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgID8gY29uZmlndXJhdGlvbi5hcGlLZXkoXCJBdXRob3JpemF0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgIDogY29uZmlndXJhdGlvbi5hcGlLZXk7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbXCJBdXRob3JpemF0aW9uXCJdID0gbG9jYWxWYXJBcGlLZXlWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgdGhlIGNvbnRlbnRzIG9mIGEgZmlsZS4gUmV0dXJucyBhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0uXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZSBUaGUgbmFtZSBvZiB0aGUgZmlsZS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFtcGhvcmFlRmlsZXNEZWxldGVGaWxlKGlkOiBzdHJpbmcsIGZpbGU6IHN0cmluZywgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdpZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAoaWQgPT09IG51bGwgfHwgaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdpZCcsJ1JlcXVpcmVkIHBhcmFtZXRlciBpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFtcGhvcmFlRmlsZXNEZWxldGVGaWxlLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnZmlsZScgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAoZmlsZSA9PT0gbnVsbCB8fCBmaWxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignZmlsZScsJ1JlcXVpcmVkIHBhcmFtZXRlciBmaWxlIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgYW1waG9yYWVGaWxlc0RlbGV0ZUZpbGUuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS9hbXBob3JhZS97aWR9L2ZpbGVzL3tmaWxlfWBcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJpZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGlkKSkpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoYHske1wiZmlsZVwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGZpbGUpKSk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IGdsb2JhbEltcG9ydFVybC5wYXJzZShsb2NhbFZhclBhdGgsIHRydWUpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0geyBtZXRob2Q6ICdERUxFVEUnLCAuLi5iYXNlT3B0aW9ucywgLi4ub3B0aW9uc307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9IGFzIGFueTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG5cbiAgICAgICAgICAgIC8vIGF1dGhlbnRpY2F0aW9uIEJlYXJlciByZXF1aXJlZFxuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5hcGlLZXkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckFwaUtleVZhbHVlID0gdHlwZW9mIGNvbmZpZ3VyYXRpb24uYXBpS2V5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgID8gY29uZmlndXJhdGlvbi5hcGlLZXkoXCJBdXRob3JpemF0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgIDogY29uZmlndXJhdGlvbi5hcGlLZXk7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbXCJBdXRob3JpemF0aW9uXCJdID0gbG9jYWxWYXJBcGlLZXlWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgdGhlIGNvbnRlbnRzIG9mIGEgZmlsZS4gUmV0dXJucyBhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0uXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZSBUaGUgbmFtZSBvZiB0aGUgZmlsZS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFtcGhvcmFlRmlsZXNEb3dubG9hZEZpbGUoaWQ6IHN0cmluZywgZmlsZTogc3RyaW5nLCBvcHRpb25zOiBhbnkgPSB7fSk6IFJlcXVlc3RBcmdzIHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2lkJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGlmIChpZCA9PT0gbnVsbCB8fCBpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVpcmVkRXJyb3IoJ2lkJywnUmVxdWlyZWQgcGFyYW1ldGVyIGlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgYW1waG9yYWVGaWxlc0Rvd25sb2FkRmlsZS4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2ZpbGUnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGZpbGUgPT09IG51bGwgfHwgZmlsZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVpcmVkRXJyb3IoJ2ZpbGUnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgZmlsZSB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFtcGhvcmFlRmlsZXNEb3dubG9hZEZpbGUuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS9hbXBob3JhZS97aWR9L2ZpbGVzL3tmaWxlfWBcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJpZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGlkKSkpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoYHske1wiZmlsZVwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGZpbGUpKSk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IGdsb2JhbEltcG9ydFVybC5wYXJzZShsb2NhbFZhclBhdGgsIHRydWUpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0geyBtZXRob2Q6ICdHRVQnLCAuLi5iYXNlT3B0aW9ucywgLi4ub3B0aW9uc307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9IGFzIGFueTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG5cbiAgICAgICAgICAgIC8vIGF1dGhlbnRpY2F0aW9uIEJlYXJlciByZXF1aXJlZFxuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5hcGlLZXkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckFwaUtleVZhbHVlID0gdHlwZW9mIGNvbmZpZ3VyYXRpb24uYXBpS2V5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgID8gY29uZmlndXJhdGlvbi5hcGlLZXkoXCJBdXRob3JpemF0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgIDogY29uZmlndXJhdGlvbi5hcGlLZXk7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbXCJBdXRob3JpemF0aW9uXCJdID0gbG9jYWxWYXJBcGlLZXlWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IExpc3RzIGFuIEFtcGhvcmFcXCdzIGZpbGVzLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW1waG9yYSBJZC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcmRlckJ5XSBHZXRzIG9yIHNldHMgdGhlIHRoZSBvcmRlckJ5IHBhcmFtZXRlci4gT3B0aW9ucyBhcmUgQWxwaGFiZXRpY2FsIG9yIExhc3RNb2RpZmllZC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtwcmVmaXhdIEdldHMgb3Igc2V0cyBhIHByZWZpeCBmaWx0ZXIgZm9yIGFsbCBmaWxlIG5hbWVzLiBJcyBjYXNlIHNlbnNpdGl2ZS5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFt0YWtlXSBHZXRzIG9yIHNldHMgaG93IG1hbnkgaXRlbXMgdG8gcmV0dXJuLiBEZWZhdWx0cyB0byA2NC5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtza2lwXSBHZXRzIG9yIHNldHMgaG93IG1hbnkgaXRlbXMgdG8gc2tpcCBiZWZvcmUgcmV0dXJuaW5nLiBEZWZhdWx0cyB0byAwLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYWVGaWxlc0xpc3RGaWxlcyhpZDogc3RyaW5nLCBvcmRlckJ5Pzogc3RyaW5nLCBwcmVmaXg/OiBzdHJpbmcsIHRha2U/OiBudW1iZXIsIHNraXA/OiBudW1iZXIsIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnaWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGlkID09PSBudWxsIHx8IGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignaWQnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgaWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhbXBob3JhZUZpbGVzTGlzdEZpbGVzLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9hcGkvYW1waG9yYWUve2lkfS9maWxlc2BcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJpZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGlkKSkpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnR0VUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvcmRlckJ5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyWydPcmRlckJ5J10gPSBvcmRlckJ5O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocHJlZml4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyWydQcmVmaXgnXSA9IHByZWZpeDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRha2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXJbJ1Rha2UnXSA9IHRha2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChza2lwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyWydTa2lwJ10gPSBza2lwO1xuICAgICAgICAgICAgfVxuXG5cbiAgICBcbiAgICAgICAgICAgIGxvY2FsVmFyVXJsT2JqLnF1ZXJ5ID0gey4uLmxvY2FsVmFyVXJsT2JqLnF1ZXJ5LCAuLi5sb2NhbFZhclF1ZXJ5UGFyYW1ldGVyLCAuLi5vcHRpb25zLnF1ZXJ5fTtcbiAgICAgICAgICAgIC8vIGZpeCBvdmVycmlkZSBxdWVyeSBzdHJpbmcgRGV0YWlsOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzUxNzY3My8xMDc3OTQzXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxWYXJVcmxPYmouc2VhcmNoO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gey4uLmxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCAuLi5vcHRpb25zLmhlYWRlcnN9O1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogZ2xvYmFsSW1wb3J0VXJsLmZvcm1hdChsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgUXVlcmllcyBhbiBBbXBob3JhXFwncyBmaWxlcy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7RmlsZVF1ZXJ5T3B0aW9uc30gZmlsZVF1ZXJ5T3B0aW9ucyBPcHRpb24gZm9yIHF1ZXJ5aW5nIHRoZSBmaWxlcy5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFtcGhvcmFlRmlsZXNRdWVyeUZpbGVzKGlkOiBzdHJpbmcsIGZpbGVRdWVyeU9wdGlvbnM6IEZpbGVRdWVyeU9wdGlvbnMsIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnaWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGlkID09PSBudWxsIHx8IGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignaWQnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgaWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhbXBob3JhZUZpbGVzUXVlcnlGaWxlcy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2ZpbGVRdWVyeU9wdGlvbnMnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGZpbGVRdWVyeU9wdGlvbnMgPT09IG51bGwgfHwgZmlsZVF1ZXJ5T3B0aW9ucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVpcmVkRXJyb3IoJ2ZpbGVRdWVyeU9wdGlvbnMnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgZmlsZVF1ZXJ5T3B0aW9ucyB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFtcGhvcmFlRmlsZXNRdWVyeUZpbGVzLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9hcGkvYW1waG9yYWUve2lkfS9maWxlc2BcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJpZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGlkKSkpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnUE9TVCcsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG5cbiAgICBcbiAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcblxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG4gICAgICAgICAgICBjb25zdCBuZWVkc1NlcmlhbGl6YXRpb24gPSAodHlwZW9mIGZpbGVRdWVyeU9wdGlvbnMgIT09IFwic3RyaW5nXCIpIHx8IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPT09ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuZGF0YSA9ICBuZWVkc1NlcmlhbGl6YXRpb24gPyBKU09OLnN0cmluZ2lmeShmaWxlUXVlcnlPcHRpb25zICE9PSB1bmRlZmluZWQgPyBmaWxlUXVlcnlPcHRpb25zIDoge30pIDogKGZpbGVRdWVyeU9wdGlvbnMgfHwgXCJcIik7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBnbG9iYWxJbXBvcnRVcmwuZm9ybWF0KGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIHRoZSBhdHRyaWJ1dGVzIG9mIGEgZmlsZS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlIFRoZSBuYW1lIG9mIHRoZSBmaWxlLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYWVGaWxlc1JlYWRGaWxlQXR0cmlidXRlcyhpZDogc3RyaW5nLCBmaWxlOiBzdHJpbmcsIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnaWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGlkID09PSBudWxsIHx8IGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignaWQnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgaWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhbXBob3JhZUZpbGVzUmVhZEZpbGVBdHRyaWJ1dGVzLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnZmlsZScgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAoZmlsZSA9PT0gbnVsbCB8fCBmaWxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignZmlsZScsJ1JlcXVpcmVkIHBhcmFtZXRlciBmaWxlIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgYW1waG9yYWVGaWxlc1JlYWRGaWxlQXR0cmlidXRlcy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL2FtcGhvcmFlL3tpZH0vZmlsZXMve2ZpbGV9L2F0dHJpYnV0ZXNgXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoYHske1wiaWRcIn19YCwgZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhpZCkpKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcImZpbGVcIn19YCwgZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhmaWxlKSkpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnR0VUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBnbG9iYWxJbXBvcnRVcmwuZm9ybWF0KGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlIFxuICAgICAgICAgKiBAcGFyYW0ge3sgW2tleTogc3RyaW5nXTogc3RyaW5nOyB9fSByZXF1ZXN0Qm9keSBcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFtcGhvcmFlRmlsZXNXcml0ZUZpbGVBdHRyaWJ1dGVzKGlkOiBzdHJpbmcsIGZpbGU6IHN0cmluZywgcmVxdWVzdEJvZHk6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nOyB9LCBvcHRpb25zOiBhbnkgPSB7fSk6IFJlcXVlc3RBcmdzIHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2lkJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGlmIChpZCA9PT0gbnVsbCB8fCBpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVpcmVkRXJyb3IoJ2lkJywnUmVxdWlyZWQgcGFyYW1ldGVyIGlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgYW1waG9yYWVGaWxlc1dyaXRlRmlsZUF0dHJpYnV0ZXMuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdmaWxlJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGlmIChmaWxlID09PSBudWxsIHx8IGZpbGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdmaWxlJywnUmVxdWlyZWQgcGFyYW1ldGVyIGZpbGUgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhbXBob3JhZUZpbGVzV3JpdGVGaWxlQXR0cmlidXRlcy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ3JlcXVlc3RCb2R5JyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0Qm9keSA9PT0gbnVsbCB8fCByZXF1ZXN0Qm9keSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVpcmVkRXJyb3IoJ3JlcXVlc3RCb2R5JywnUmVxdWlyZWQgcGFyYW1ldGVyIHJlcXVlc3RCb2R5IHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgYW1waG9yYWVGaWxlc1dyaXRlRmlsZUF0dHJpYnV0ZXMuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS9hbXBob3JhZS97aWR9L2ZpbGVzL3tmaWxlfS9hdHRyaWJ1dGVzYFxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcImlkXCJ9fWAsIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaWQpKSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJmaWxlXCJ9fWAsIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoZmlsZSkpKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gZ2xvYmFsSW1wb3J0VXJsLnBhcnNlKGxvY2FsVmFyUGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSB7IG1ldGhvZDogJ1BPU1QnLCAuLi5iYXNlT3B0aW9ucywgLi4ub3B0aW9uc307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9IGFzIGFueTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG5cbiAgICAgICAgICAgIC8vIGF1dGhlbnRpY2F0aW9uIEJlYXJlciByZXF1aXJlZFxuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5hcGlLZXkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckFwaUtleVZhbHVlID0gdHlwZW9mIGNvbmZpZ3VyYXRpb24uYXBpS2V5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgID8gY29uZmlndXJhdGlvbi5hcGlLZXkoXCJBdXRob3JpemF0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgIDogY29uZmlndXJhdGlvbi5hcGlLZXk7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbXCJBdXRob3JpemF0aW9uXCJdID0gbG9jYWxWYXJBcGlLZXlWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgXG4gICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlclsnQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7XG5cbiAgICAgICAgICAgIGxvY2FsVmFyVXJsT2JqLnF1ZXJ5ID0gey4uLmxvY2FsVmFyVXJsT2JqLnF1ZXJ5LCAuLi5sb2NhbFZhclF1ZXJ5UGFyYW1ldGVyLCAuLi5vcHRpb25zLnF1ZXJ5fTtcbiAgICAgICAgICAgIC8vIGZpeCBvdmVycmlkZSBxdWVyeSBzdHJpbmcgRGV0YWlsOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzUxNzY3My8xMDc3OTQzXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxWYXJVcmxPYmouc2VhcmNoO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gey4uLmxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCAuLi5vcHRpb25zLmhlYWRlcnN9O1xuICAgICAgICAgICAgY29uc3QgbmVlZHNTZXJpYWxpemF0aW9uID0gKHR5cGVvZiByZXF1ZXN0Qm9keSAhPT0gXCJzdHJpbmdcIikgfHwgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5kYXRhID0gIG5lZWRzU2VyaWFsaXphdGlvbiA/IEpTT04uc3RyaW5naWZ5KHJlcXVlc3RCb2R5ICE9PSB1bmRlZmluZWQgPyByZXF1ZXN0Qm9keSA6IHt9KSA6IChyZXF1ZXN0Qm9keSB8fCBcIlwiKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgYSBsaXN0IG9mIEFtcGhvcmEgZm9yIHlvdXJzZWxmIG9yIHlvdXIgb3JnLCBjcmVhdGVkIG9yIHB1cmNoYXNlZCBieSB5b3UgKG9yIG9yZ2FuaXNhdGlvbikuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc2NvcGVdIFxcJiMzOTtzZWxmXFwmIzM5OyBvciBcXCYjMzk7b3JnYW5pc2F0aW9uXFwmIzM5Oy4gRGVmYXVsdHMgdG8gc2VsZi5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFthY2Nlc3NUeXBlXSBcXCYjMzk7Y3JlYXRlZFxcJiMzOTsgb3IgXFwmIzM5O3B1cmNoYXNlZFxcJiMzOTsuIERlZmF1bHRzIHRvIGNyZWF0ZWQuXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbdGFrZV0gR2V0cyBvciBzZXRzIGhvdyBtYW55IGl0ZW1zIHRvIHJldHVybi4gRGVmYXVsdHMgdG8gNjQuXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2tpcF0gR2V0cyBvciBzZXRzIGhvdyBtYW55IGl0ZW1zIHRvIHNraXAgYmVmb3JlIHJldHVybmluZy4gRGVmYXVsdHMgdG8gMC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFtcGhvcmFlTGlzdChzY29wZT86IHN0cmluZywgYWNjZXNzVHlwZT86IHN0cmluZywgdGFrZT86IG51bWJlciwgc2tpcD86IG51bWJlciwgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS9hbXBob3JhZWA7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IGdsb2JhbEltcG9ydFVybC5wYXJzZShsb2NhbFZhclBhdGgsIHRydWUpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0geyBtZXRob2Q6ICdHRVQnLCAuLi5iYXNlT3B0aW9ucywgLi4ub3B0aW9uc307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9IGFzIGFueTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG5cbiAgICAgICAgICAgIC8vIGF1dGhlbnRpY2F0aW9uIEJlYXJlciByZXF1aXJlZFxuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5hcGlLZXkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckFwaUtleVZhbHVlID0gdHlwZW9mIGNvbmZpZ3VyYXRpb24uYXBpS2V5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgID8gY29uZmlndXJhdGlvbi5hcGlLZXkoXCJBdXRob3JpemF0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgIDogY29uZmlndXJhdGlvbi5hcGlLZXk7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbXCJBdXRob3JpemF0aW9uXCJdID0gbG9jYWxWYXJBcGlLZXlWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNjb3BlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyWydzY29wZSddID0gc2NvcGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhY2Nlc3NUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyWydhY2Nlc3NUeXBlJ10gPSBhY2Nlc3NUeXBlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGFrZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJRdWVyeVBhcmFtZXRlclsnVGFrZSddID0gdGFrZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNraXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXJbJ1NraXAnXSA9IHNraXA7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBnbG9iYWxJbXBvcnRVcmwuZm9ybWF0KGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIGRldGFpbHMgb2YgYW4gQW1waG9yYSBieSBJZC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZVJlYWQoaWQ6IHN0cmluZywgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdpZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAoaWQgPT09IG51bGwgfHwgaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdpZCcsJ1JlcXVpcmVkIHBhcmFtZXRlciBpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFtcGhvcmFlUmVhZC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL2FtcGhvcmFlL3tpZH1gXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoYHske1wiaWRcIn19YCwgZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhpZCkpKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gZ2xvYmFsSW1wb3J0VXJsLnBhcnNlKGxvY2FsVmFyUGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSB7IG1ldGhvZDogJ0dFVCcsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG5cbiAgICBcbiAgICAgICAgICAgIGxvY2FsVmFyVXJsT2JqLnF1ZXJ5ID0gey4uLmxvY2FsVmFyVXJsT2JqLnF1ZXJ5LCAuLi5sb2NhbFZhclF1ZXJ5UGFyYW1ldGVyLCAuLi5vcHRpb25zLnF1ZXJ5fTtcbiAgICAgICAgICAgIC8vIGZpeCBvdmVycmlkZSBxdWVyeSBzdHJpbmcgRGV0YWlsOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzUxNzY3My8xMDc3OTQzXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxWYXJVcmxPYmouc2VhcmNoO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gey4uLmxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCAuLi5vcHRpb25zLmhlYWRlcnN9O1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogZ2xvYmFsSW1wb3J0VXJsLmZvcm1hdChsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgQXNzb2NpYXRlcyBhIHNpZ25hbCB3aXRoIGFuIEFtcGhvcmEuIFNpZ25hbCBpcyBjcmVhdGVkIGlmIG5vdCBleGlzdGluZy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7Q3JlYXRlU2lnbmFsfSBjcmVhdGVTaWduYWwgU2lnbmFsIERldGFpbHMuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZVNpZ25hbHNDcmVhdGVTaWduYWwoaWQ6IHN0cmluZywgY3JlYXRlU2lnbmFsOiBDcmVhdGVTaWduYWwsIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnaWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGlkID09PSBudWxsIHx8IGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignaWQnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgaWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhbXBob3JhZVNpZ25hbHNDcmVhdGVTaWduYWwuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdjcmVhdGVTaWduYWwnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGNyZWF0ZVNpZ25hbCA9PT0gbnVsbCB8fCBjcmVhdGVTaWduYWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdjcmVhdGVTaWduYWwnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgY3JlYXRlU2lnbmFsIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgYW1waG9yYWVTaWduYWxzQ3JlYXRlU2lnbmFsLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9hcGkvYW1waG9yYWUve2lkfS9zaWduYWxzYFxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcImlkXCJ9fWAsIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaWQpKSk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IGdsb2JhbEltcG9ydFVybC5wYXJzZShsb2NhbFZhclBhdGgsIHRydWUpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0geyBtZXRob2Q6ICdQT1NUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcbiAgICAgICAgICAgIGNvbnN0IG5lZWRzU2VyaWFsaXphdGlvbiA9ICh0eXBlb2YgY3JlYXRlU2lnbmFsICE9PSBcInN0cmluZ1wiKSB8fCBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID09PSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmRhdGEgPSAgbmVlZHNTZXJpYWxpemF0aW9uID8gSlNPTi5zdHJpbmdpZnkoY3JlYXRlU2lnbmFsICE9PSB1bmRlZmluZWQgPyBjcmVhdGVTaWduYWwgOiB7fSkgOiAoY3JlYXRlU2lnbmFsIHx8IFwiXCIpO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogZ2xvYmFsSW1wb3J0VXJsLmZvcm1hdChsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgR2V0cyB0aGUgc2lnbmFscyBhc3NvY2lhdGVkIHdpdGggYW4gQW1waG9yYS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBUaGUgbmFtZSBvciBpZCBvZiB0aGUgc2lnbmFsIHByb3BlcnR5LlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYWVTaWduYWxzR2V0U2lnbmFsKGlkOiBzdHJpbmcsIHByb3BlcnR5OiBzdHJpbmcsIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnaWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGlkID09PSBudWxsIHx8IGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignaWQnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgaWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhbXBob3JhZVNpZ25hbHNHZXRTaWduYWwuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdwcm9wZXJ0eScgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAocHJvcGVydHkgPT09IG51bGwgfHwgcHJvcGVydHkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdwcm9wZXJ0eScsJ1JlcXVpcmVkIHBhcmFtZXRlciBwcm9wZXJ0eSB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFtcGhvcmFlU2lnbmFsc0dldFNpZ25hbC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL2FtcGhvcmFlL3tpZH0vc2lnbmFscy97cHJvcGVydHl9YFxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcImlkXCJ9fWAsIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaWQpKSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJwcm9wZXJ0eVwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHByb3BlcnR5KSkpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnR0VUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBnbG9iYWxJbXBvcnRVcmwuZm9ybWF0KGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIHRoZSBzaWduYWxzIGFzc29jaWF0ZWQgd2l0aCBhbiBBbXBob3JhLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW1waG9yYSBJZC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFtcGhvcmFlU2lnbmFsc0dldFNpZ25hbHMoaWQ6IHN0cmluZywgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdpZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAoaWQgPT09IG51bGwgfHwgaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdpZCcsJ1JlcXVpcmVkIHBhcmFtZXRlciBpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFtcGhvcmFlU2lnbmFsc0dldFNpZ25hbHMuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS9hbXBob3JhZS97aWR9L3NpZ25hbHNgXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoYHske1wiaWRcIn19YCwgZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhpZCkpKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gZ2xvYmFsSW1wb3J0VXJsLnBhcnNlKGxvY2FsVmFyUGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSB7IG1ldGhvZDogJ0dFVCcsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG5cbiAgICBcbiAgICAgICAgICAgIGxvY2FsVmFyVXJsT2JqLnF1ZXJ5ID0gey4uLmxvY2FsVmFyVXJsT2JqLnF1ZXJ5LCAuLi5sb2NhbFZhclF1ZXJ5UGFyYW1ldGVyLCAuLi5vcHRpb25zLnF1ZXJ5fTtcbiAgICAgICAgICAgIC8vIGZpeCBvdmVycmlkZSBxdWVyeSBzdHJpbmcgRGV0YWlsOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzUxNzY3My8xMDc3OTQzXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxWYXJVcmxPYmouc2VhcmNoO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gey4uLmxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCAuLi5vcHRpb25zLmhlYWRlcnN9O1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogZ2xvYmFsSW1wb3J0VXJsLmZvcm1hdChsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgQXNzb2NpYXRlcyBhIHNpZ25hbCB3aXRoIGFuIEFtcGhvcmEuIFNpZ25hbCBpcyBjcmVhdGVkIGlmIG5vdCBleGlzdGluZy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzaWduYWxJZCBTaWduYWwgRGV0YWlscy5cbiAgICAgICAgICogQHBhcmFtIHtVcGRhdGVTaWduYWx9IHVwZGF0ZVNpZ25hbCBTaWduYWwgcHJvcGVydGllcyB0byB1cGRhdGUuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZVNpZ25hbHNVcGRhdGVTaWduYWwoaWQ6IHN0cmluZywgc2lnbmFsSWQ6IHN0cmluZywgdXBkYXRlU2lnbmFsOiBVcGRhdGVTaWduYWwsIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnaWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGlkID09PSBudWxsIHx8IGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignaWQnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgaWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhbXBob3JhZVNpZ25hbHNVcGRhdGVTaWduYWwuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdzaWduYWxJZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAoc2lnbmFsSWQgPT09IG51bGwgfHwgc2lnbmFsSWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdzaWduYWxJZCcsJ1JlcXVpcmVkIHBhcmFtZXRlciBzaWduYWxJZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFtcGhvcmFlU2lnbmFsc1VwZGF0ZVNpZ25hbC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ3VwZGF0ZVNpZ25hbCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAodXBkYXRlU2lnbmFsID09PSBudWxsIHx8IHVwZGF0ZVNpZ25hbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVpcmVkRXJyb3IoJ3VwZGF0ZVNpZ25hbCcsJ1JlcXVpcmVkIHBhcmFtZXRlciB1cGRhdGVTaWduYWwgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhbXBob3JhZVNpZ25hbHNVcGRhdGVTaWduYWwuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS9hbXBob3JhZS97aWR9L3NpZ25hbHMve3NpZ25hbElkfWBcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJpZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGlkKSkpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoYHske1wic2lnbmFsSWRcIn19YCwgZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhzaWduYWxJZCkpKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gZ2xvYmFsSW1wb3J0VXJsLnBhcnNlKGxvY2FsVmFyUGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSB7IG1ldGhvZDogJ1BVVCcsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG5cbiAgICBcbiAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcblxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG4gICAgICAgICAgICBjb25zdCBuZWVkc1NlcmlhbGl6YXRpb24gPSAodHlwZW9mIHVwZGF0ZVNpZ25hbCAhPT0gXCJzdHJpbmdcIikgfHwgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5kYXRhID0gIG5lZWRzU2VyaWFsaXphdGlvbiA/IEpTT04uc3RyaW5naWZ5KHVwZGF0ZVNpZ25hbCAhPT0gdW5kZWZpbmVkID8gdXBkYXRlU2lnbmFsIDoge30pIDogKHVwZGF0ZVNpZ25hbCB8fCBcIlwiKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBcbiAgICAgICAgICogQHBhcmFtIHt7IFtrZXk6IHN0cmluZ106IG9iamVjdDsgfX0gcmVxdWVzdEJvZHkgXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZVNpZ25hbHNVcGxvYWRTaWduYWwoaWQ6IHN0cmluZywgcmVxdWVzdEJvZHk6IHsgW2tleTogc3RyaW5nXTogb2JqZWN0OyB9LCBvcHRpb25zOiBhbnkgPSB7fSk6IFJlcXVlc3RBcmdzIHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2lkJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGlmIChpZCA9PT0gbnVsbCB8fCBpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVpcmVkRXJyb3IoJ2lkJywnUmVxdWlyZWQgcGFyYW1ldGVyIGlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgYW1waG9yYWVTaWduYWxzVXBsb2FkU2lnbmFsLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAncmVxdWVzdEJvZHknIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKHJlcXVlc3RCb2R5ID09PSBudWxsIHx8IHJlcXVlc3RCb2R5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcigncmVxdWVzdEJvZHknLCdSZXF1aXJlZCBwYXJhbWV0ZXIgcmVxdWVzdEJvZHkgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhbXBob3JhZVNpZ25hbHNVcGxvYWRTaWduYWwuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS9hbXBob3JhZS97aWR9L3NpZ25hbHMvdmFsdWVzYFxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcImlkXCJ9fWAsIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaWQpKSk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IGdsb2JhbEltcG9ydFVybC5wYXJzZShsb2NhbFZhclBhdGgsIHRydWUpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0geyBtZXRob2Q6ICdQT1NUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcbiAgICAgICAgICAgIGNvbnN0IG5lZWRzU2VyaWFsaXphdGlvbiA9ICh0eXBlb2YgcmVxdWVzdEJvZHkgIT09IFwic3RyaW5nXCIpIHx8IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPT09ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuZGF0YSA9ICBuZWVkc1NlcmlhbGl6YXRpb24gPyBKU09OLnN0cmluZ2lmeShyZXF1ZXN0Qm9keSAhPT0gdW5kZWZpbmVkID8gcmVxdWVzdEJvZHkgOiB7fSkgOiAocmVxdWVzdEJvZHkgfHwgXCJcIik7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBnbG9iYWxJbXBvcnRVcmwuZm9ybWF0KGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgXG4gICAgICAgICAqIEBwYXJhbSB7eyBba2V5OiBzdHJpbmddOiBvYmplY3Q7IH19IHJlcXVlc3RCb2R5IFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYWVTaWduYWxzVXBsb2FkU2lnbmFsMihpZDogc3RyaW5nLCByZXF1ZXN0Qm9keTogeyBba2V5OiBzdHJpbmddOiBvYmplY3Q7IH0sIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnaWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGlkID09PSBudWxsIHx8IGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignaWQnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgaWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhbXBob3JhZVNpZ25hbHNVcGxvYWRTaWduYWwyLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAncmVxdWVzdEJvZHknIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKHJlcXVlc3RCb2R5ID09PSBudWxsIHx8IHJlcXVlc3RCb2R5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcigncmVxdWVzdEJvZHknLCdSZXF1aXJlZCBwYXJhbWV0ZXIgcmVxdWVzdEJvZHkgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhbXBob3JhZVNpZ25hbHNVcGxvYWRTaWduYWwyLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9hcGkvYW1waG9yYWUve2lkfS9zaWduYWxWYWx1ZXNgXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoYHske1wiaWRcIn19YCwgZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhpZCkpKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gZ2xvYmFsSW1wb3J0VXJsLnBhcnNlKGxvY2FsVmFyUGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSB7IG1ldGhvZDogJ1BPU1QnLCAuLi5iYXNlT3B0aW9ucywgLi4ub3B0aW9uc307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9IGFzIGFueTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG5cbiAgICAgICAgICAgIC8vIGF1dGhlbnRpY2F0aW9uIEJlYXJlciByZXF1aXJlZFxuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5hcGlLZXkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckFwaUtleVZhbHVlID0gdHlwZW9mIGNvbmZpZ3VyYXRpb24uYXBpS2V5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgID8gY29uZmlndXJhdGlvbi5hcGlLZXkoXCJBdXRob3JpemF0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgIDogY29uZmlndXJhdGlvbi5hcGlLZXk7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbXCJBdXRob3JpemF0aW9uXCJdID0gbG9jYWxWYXJBcGlLZXlWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgXG4gICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlclsnQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7XG5cbiAgICAgICAgICAgIGxvY2FsVmFyVXJsT2JqLnF1ZXJ5ID0gey4uLmxvY2FsVmFyVXJsT2JqLnF1ZXJ5LCAuLi5sb2NhbFZhclF1ZXJ5UGFyYW1ldGVyLCAuLi5vcHRpb25zLnF1ZXJ5fTtcbiAgICAgICAgICAgIC8vIGZpeCBvdmVycmlkZSBxdWVyeSBzdHJpbmcgRGV0YWlsOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzUxNzY3My8xMDc3OTQzXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxWYXJVcmxPYmouc2VhcmNoO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gey4uLmxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCAuLi5vcHRpb25zLmhlYWRlcnN9O1xuICAgICAgICAgICAgY29uc3QgbmVlZHNTZXJpYWxpemF0aW9uID0gKHR5cGVvZiByZXF1ZXN0Qm9keSAhPT0gXCJzdHJpbmdcIikgfHwgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5kYXRhID0gIG5lZWRzU2VyaWFsaXphdGlvbiA/IEpTT04uc3RyaW5naWZ5KHJlcXVlc3RCb2R5ICE9PSB1bmRlZmluZWQgPyByZXF1ZXN0Qm9keSA6IHt9KSA6IChyZXF1ZXN0Qm9keSB8fCBcIlwiKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBcbiAgICAgICAgICogQHBhcmFtIHtBcnJheTx7IFtrZXk6IHN0cmluZ106IG9iamVjdDsgfT59IHJlcXVlc3RCb2R5IFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYWVTaWduYWxzVXBsb2FkU2lnbmFsQmF0Y2goaWQ6IHN0cmluZywgcmVxdWVzdEJvZHk6IEFycmF5PHsgW2tleTogc3RyaW5nXTogb2JqZWN0OyB9Piwgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdpZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAoaWQgPT09IG51bGwgfHwgaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdpZCcsJ1JlcXVpcmVkIHBhcmFtZXRlciBpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFtcGhvcmFlU2lnbmFsc1VwbG9hZFNpZ25hbEJhdGNoLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAncmVxdWVzdEJvZHknIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKHJlcXVlc3RCb2R5ID09PSBudWxsIHx8IHJlcXVlc3RCb2R5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcigncmVxdWVzdEJvZHknLCdSZXF1aXJlZCBwYXJhbWV0ZXIgcmVxdWVzdEJvZHkgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhbXBob3JhZVNpZ25hbHNVcGxvYWRTaWduYWxCYXRjaC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL2FtcGhvcmFlL3tpZH0vc2lnbmFscy9iYXRjaHZhbHVlc2BcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJpZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGlkKSkpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnUE9TVCcsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG5cbiAgICBcbiAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcblxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG4gICAgICAgICAgICBjb25zdCBuZWVkc1NlcmlhbGl6YXRpb24gPSAodHlwZW9mIHJlcXVlc3RCb2R5ICE9PSBcInN0cmluZ1wiKSB8fCBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID09PSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmRhdGEgPSAgbmVlZHNTZXJpYWxpemF0aW9uID8gSlNPTi5zdHJpbmdpZnkocmVxdWVzdEJvZHkgIT09IHVuZGVmaW5lZCA/IHJlcXVlc3RCb2R5IDoge30pIDogKHJlcXVlc3RCb2R5IHx8IFwiXCIpO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogZ2xvYmFsSW1wb3J0VXJsLmZvcm1hdChsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5PHsgW2tleTogc3RyaW5nXTogb2JqZWN0OyB9Pn0gcmVxdWVzdEJvZHkgXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZVNpZ25hbHNVcGxvYWRTaWduYWxCYXRjaDIoaWQ6IHN0cmluZywgcmVxdWVzdEJvZHk6IEFycmF5PHsgW2tleTogc3RyaW5nXTogb2JqZWN0OyB9Piwgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdpZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAoaWQgPT09IG51bGwgfHwgaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdpZCcsJ1JlcXVpcmVkIHBhcmFtZXRlciBpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFtcGhvcmFlU2lnbmFsc1VwbG9hZFNpZ25hbEJhdGNoMi4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ3JlcXVlc3RCb2R5JyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0Qm9keSA9PT0gbnVsbCB8fCByZXF1ZXN0Qm9keSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVpcmVkRXJyb3IoJ3JlcXVlc3RCb2R5JywnUmVxdWlyZWQgcGFyYW1ldGVyIHJlcXVlc3RCb2R5IHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgYW1waG9yYWVTaWduYWxzVXBsb2FkU2lnbmFsQmF0Y2gyLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9hcGkvYW1waG9yYWUve2lkfS9iYXRjaFNpZ25hbFZhbHVlc2BcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJpZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGlkKSkpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnUE9TVCcsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG5cbiAgICBcbiAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcblxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG4gICAgICAgICAgICBjb25zdCBuZWVkc1NlcmlhbGl6YXRpb24gPSAodHlwZW9mIHJlcXVlc3RCb2R5ICE9PSBcInN0cmluZ1wiKSB8fCBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID09PSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmRhdGEgPSAgbmVlZHNTZXJpYWxpemF0aW9uID8gSlNPTi5zdHJpbmdpZnkocmVxdWVzdEJvZHkgIT09IHVuZGVmaW5lZCA/IHJlcXVlc3RCb2R5IDoge30pIDogKHJlcXVlc3RCb2R5IHx8IFwiXCIpO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogZ2xvYmFsSW1wb3J0VXJsLmZvcm1hdChsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgVXBkYXRlcyB0aGUgZGV0YWlscyBvZiBhbiBBbXBob3JhIGJ5IElkLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW1waG9yYSBJZC5cbiAgICAgICAgICogQHBhcmFtIHtFZGl0QW1waG9yYX0gZWRpdEFtcGhvcmEgSW5mb3JtYXRpb24gdG8gdXBkYXRlLiBOdWxscyBhcmUgTk9UIGlnbm9yZWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZVVwZGF0ZShpZDogc3RyaW5nLCBlZGl0QW1waG9yYTogRWRpdEFtcGhvcmEsIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnaWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGlkID09PSBudWxsIHx8IGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignaWQnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgaWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhbXBob3JhZVVwZGF0ZS4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2VkaXRBbXBob3JhJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGlmIChlZGl0QW1waG9yYSA9PT0gbnVsbCB8fCBlZGl0QW1waG9yYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVpcmVkRXJyb3IoJ2VkaXRBbXBob3JhJywnUmVxdWlyZWQgcGFyYW1ldGVyIGVkaXRBbXBob3JhIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgYW1waG9yYWVVcGRhdGUuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS9hbXBob3JhZS97aWR9YFxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcImlkXCJ9fWAsIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaWQpKSk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IGdsb2JhbEltcG9ydFVybC5wYXJzZShsb2NhbFZhclBhdGgsIHRydWUpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0geyBtZXRob2Q6ICdQVVQnLCAuLi5iYXNlT3B0aW9ucywgLi4ub3B0aW9uc307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9IGFzIGFueTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG5cbiAgICAgICAgICAgIC8vIGF1dGhlbnRpY2F0aW9uIEJlYXJlciByZXF1aXJlZFxuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5hcGlLZXkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckFwaUtleVZhbHVlID0gdHlwZW9mIGNvbmZpZ3VyYXRpb24uYXBpS2V5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgID8gY29uZmlndXJhdGlvbi5hcGlLZXkoXCJBdXRob3JpemF0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgIDogY29uZmlndXJhdGlvbi5hcGlLZXk7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbXCJBdXRob3JpemF0aW9uXCJdID0gbG9jYWxWYXJBcGlLZXlWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgXG4gICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlclsnQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7XG5cbiAgICAgICAgICAgIGxvY2FsVmFyVXJsT2JqLnF1ZXJ5ID0gey4uLmxvY2FsVmFyVXJsT2JqLnF1ZXJ5LCAuLi5sb2NhbFZhclF1ZXJ5UGFyYW1ldGVyLCAuLi5vcHRpb25zLnF1ZXJ5fTtcbiAgICAgICAgICAgIC8vIGZpeCBvdmVycmlkZSBxdWVyeSBzdHJpbmcgRGV0YWlsOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzUxNzY3My8xMDc3OTQzXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxWYXJVcmxPYmouc2VhcmNoO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gey4uLmxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCAuLi5vcHRpb25zLmhlYWRlcnN9O1xuICAgICAgICAgICAgY29uc3QgbmVlZHNTZXJpYWxpemF0aW9uID0gKHR5cGVvZiBlZGl0QW1waG9yYSAhPT0gXCJzdHJpbmdcIikgfHwgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5kYXRhID0gIG5lZWRzU2VyaWFsaXphdGlvbiA/IEpTT04uc3RyaW5naWZ5KGVkaXRBbXBob3JhICE9PSB1bmRlZmluZWQgPyBlZGl0QW1waG9yYSA6IHt9KSA6IChlZGl0QW1waG9yYSB8fCBcIlwiKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IFB1cmNoYXNlcyBhbiBBbXBob3JhIGFzIHRoZSBsb2dnZWQgaW4gdXNlci5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBwdXJjaGFzZXNQdXJjaGFzZShpZDogc3RyaW5nLCBvcHRpb25zOiBhbnkgPSB7fSk6IFJlcXVlc3RBcmdzIHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2lkJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGlmIChpZCA9PT0gbnVsbCB8fCBpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVpcmVkRXJyb3IoJ2lkJywnUmVxdWlyZWQgcGFyYW1ldGVyIGlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgcHVyY2hhc2VzUHVyY2hhc2UuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS9BbXBob3JhZS97aWR9L1B1cmNoYXNlc2BcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJpZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGlkKSkpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnUE9TVCcsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG5cbiAgICBcbiAgICAgICAgICAgIGxvY2FsVmFyVXJsT2JqLnF1ZXJ5ID0gey4uLmxvY2FsVmFyVXJsT2JqLnF1ZXJ5LCAuLi5sb2NhbFZhclF1ZXJ5UGFyYW1ldGVyLCAuLi5vcHRpb25zLnF1ZXJ5fTtcbiAgICAgICAgICAgIC8vIGZpeCBvdmVycmlkZSBxdWVyeSBzdHJpbmcgRGV0YWlsOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzUxNzY3My8xMDc3OTQzXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxWYXJVcmxPYmouc2VhcmNoO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gey4uLmxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCAuLi5vcHRpb25zLmhlYWRlcnN9O1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogZ2xvYmFsSW1wb3J0VXJsLmZvcm1hdChsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfVxufTtcblxuLyoqXG4gKiBBbXBob3JhZUFwaSAtIGZ1bmN0aW9uYWwgcHJvZ3JhbW1pbmcgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydCBjb25zdCBBbXBob3JhZUFwaUZwID0gZnVuY3Rpb24oY29uZmlndXJhdGlvbj86IENvbmZpZ3VyYXRpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgdGhlIGRhdGEgcXVhbGl0eSBtZXRyaWNzIGZvciB0aGlzIEFtcGhvcmEuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYVF1YWxpdHlHZXQoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8UXVhbGl0eT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSBBbXBob3JhZUFwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLmFtcGhvcmFRdWFsaXR5R2V0KGlkLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IFNldHMgdGhlIGRhdGEgcXVhbGl0eSBtZXRyaWNzIGZvciB0aGlzIEFtcGhvcmEuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0ge1F1YWxpdHl9IHF1YWxpdHkgVGhlIGRhdGEgcXVhbGl0eSBtZXRyaWNzLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYVF1YWxpdHlTZXQoaWQ6IHN0cmluZywgcXVhbGl0eTogUXVhbGl0eSwgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8UXVhbGl0eT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSBBbXBob3JhZUFwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLmFtcGhvcmFRdWFsaXR5U2V0KGlkLCBxdWFsaXR5LCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYW4gQWNjZXNzIENvbnRyb2wgUnVsZSBmb3IgYWxsIG9uIHRoaXMgQW1waG9yYS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7QWxsQWNjZXNzUnVsZX0gYWxsQWNjZXNzUnVsZSBUaGUgcnVsZSB0byBjcmVhdGUuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZUFjY2Vzc0NvbnRyb2xzQ3JlYXRlRm9yQWxsKGlkOiBzdHJpbmcsIGFsbEFjY2Vzc1J1bGU6IEFsbEFjY2Vzc1J1bGUsIG9wdGlvbnM/OiBhbnkpOiAoYXhpb3M/OiBBeGlvc0luc3RhbmNlLCBiYXNlUGF0aD86IHN0cmluZykgPT4gQXhpb3NQcm9taXNlPEFsbEFjY2Vzc1J1bGU+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gQW1waG9yYWVBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS5hbXBob3JhZUFjY2Vzc0NvbnRyb2xzQ3JlYXRlRm9yQWxsKGlkLCBhbGxBY2Nlc3NSdWxlLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYW4gQWNjZXNzIENvbnRyb2wgUnVsZSBvbiB0aGlzIEFtcGhvcmEuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0ge09yZ2FuaXNhdGlvbkFjY2Vzc1J1bGV9IG9yZ2FuaXNhdGlvbkFjY2Vzc1J1bGUgVGhlIHJ1bGUgdG8gY3JlYXRlLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYWVBY2Nlc3NDb250cm9sc0NyZWF0ZUZvck9yZ2FuaXNhdGlvbihpZDogc3RyaW5nLCBvcmdhbmlzYXRpb25BY2Nlc3NSdWxlOiBPcmdhbmlzYXRpb25BY2Nlc3NSdWxlLCBvcHRpb25zPzogYW55KTogKGF4aW9zPzogQXhpb3NJbnN0YW5jZSwgYmFzZVBhdGg/OiBzdHJpbmcpID0+IEF4aW9zUHJvbWlzZTxVc2VyQWNjZXNzUnVsZT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSBBbXBob3JhZUFwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlQWNjZXNzQ29udHJvbHNDcmVhdGVGb3JPcmdhbmlzYXRpb24oaWQsIG9yZ2FuaXNhdGlvbkFjY2Vzc1J1bGUsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhbiBBY2Nlc3MgQ29udHJvbCBydWxlIG9uIHRoaXMgQW1waG9yYS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7VXNlckFjY2Vzc1J1bGV9IHVzZXJBY2Nlc3NSdWxlIFRoZSBydWxlIHRvIGNyZWF0ZS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFtcGhvcmFlQWNjZXNzQ29udHJvbHNDcmVhdGVGb3JVc2VyKGlkOiBzdHJpbmcsIHVzZXJBY2Nlc3NSdWxlOiBVc2VyQWNjZXNzUnVsZSwgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8VXNlckFjY2Vzc1J1bGU+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gQW1waG9yYWVBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS5hbXBob3JhZUFjY2Vzc0NvbnRyb2xzQ3JlYXRlRm9yVXNlcihpZCwgdXNlckFjY2Vzc1J1bGUsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgRGVsZXRlcyBhbiBBY2Nlc3MgQ29udHJvbCBvbiB0aGlzIEFtcGhvcmEuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcnVsZUlkIFRoZSBJZCBvZiB0aGUgcnVsZSB0byBkZWxldGUuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZUFjY2Vzc0NvbnRyb2xzRGVsZXRlKGlkOiBzdHJpbmcsIHJ1bGVJZDogc3RyaW5nLCBvcHRpb25zPzogYW55KTogKGF4aW9zPzogQXhpb3NJbnN0YW5jZSwgYmFzZVBhdGg/OiBzdHJpbmcpID0+IEF4aW9zUHJvbWlzZTxSZXNwb25zZT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSBBbXBob3JhZUFwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlQWNjZXNzQ29udHJvbHNEZWxldGUoaWQsIHJ1bGVJZCwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gKGF4aW9zOiBBeGlvc0luc3RhbmNlID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoOiBzdHJpbmcgPSBCQVNFX1BBVEgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlvc1JlcXVlc3RBcmdzID0gey4uLmxvY2FsVmFyQXhpb3NBcmdzLm9wdGlvbnMsIHVybDogYmFzZVBhdGggKyBsb2NhbFZhckF4aW9zQXJncy51cmx9O1xuICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5yZXF1ZXN0KGF4aW9zUmVxdWVzdEFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIHRoZSBcXCdmb3IgYWxsXFwnIHJ1bGUsIGlmIGl0IGV4aXN0cywgZWxzZSBhbiBlbXB0eSAyMDAuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYWVBY2Nlc3NDb250cm9sc0dldEZvckFsbFJ1bGUoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8QWxsQWNjZXNzUnVsZT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSBBbXBob3JhZUFwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlQWNjZXNzQ29udHJvbHNHZXRGb3JBbGxSdWxlKGlkLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgdGhlIGxpc3Qgb2YgYWNjZXNzIHJ1bGVzIGFwcGxpZWQgdG8gb3JnYW5pc2F0aW9ucy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZUFjY2Vzc0NvbnRyb2xzR2V0T3JnYW5pc2F0aW9uUnVsZXMoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8QXJyYXk8T3JnYW5pc2F0aW9uQWNjZXNzUnVsZT4+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gQW1waG9yYWVBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS5hbXBob3JhZUFjY2Vzc0NvbnRyb2xzR2V0T3JnYW5pc2F0aW9uUnVsZXMoaWQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgR2V0cyB0aGUgbGlzdCBvZiBhY2Nlc3MgcnVsZXMgYXBwbGllZCB0byB1c2Vycy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZUFjY2Vzc0NvbnRyb2xzR2V0VXNlclJ1bGVzKGlkOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpOiAoYXhpb3M/OiBBeGlvc0luc3RhbmNlLCBiYXNlUGF0aD86IHN0cmluZykgPT4gQXhpb3NQcm9taXNlPEFycmF5PFVzZXJBY2Nlc3NSdWxlPj4ge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSBBbXBob3JhZUFwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlQWNjZXNzQ29udHJvbHNHZXRVc2VyUnVsZXMoaWQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIG5ldyBlbXB0eSBBbXBob3JhIGluIHRoZSB1c2VyXFwncyBvcmdhbmlzYXRpb24uXG4gICAgICAgICAqIEBwYXJhbSB7Q3JlYXRlQW1waG9yYX0gY3JlYXRlQW1waG9yYSBJbmZvcm1hdGlvbiBmb3IgdGhlIG5ldyBBbXBob3JhLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYWVDcmVhdGUoY3JlYXRlQW1waG9yYTogQ3JlYXRlQW1waG9yYSwgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8RGV0YWlsZWRBbXBob3JhPiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IEFtcGhvcmFlQXBpQXhpb3NQYXJhbUNyZWF0b3IoY29uZmlndXJhdGlvbikuYW1waG9yYWVDcmVhdGUoY3JlYXRlQW1waG9yYSwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gKGF4aW9zOiBBeGlvc0luc3RhbmNlID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoOiBzdHJpbmcgPSBCQVNFX1BBVEgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlvc1JlcXVlc3RBcmdzID0gey4uLmxvY2FsVmFyQXhpb3NBcmdzLm9wdGlvbnMsIHVybDogYmFzZVBhdGggKyBsb2NhbFZhckF4aW9zQXJncy51cmx9O1xuICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5yZXF1ZXN0KGF4aW9zUmVxdWVzdEFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBEZWxldGVzIGFuIEFtcGhvcmEuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYWVEZWxldGUoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8c3RyaW5nPiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IEFtcGhvcmFlQXBpQXhpb3NQYXJhbUNyZWF0b3IoY29uZmlndXJhdGlvbikuYW1waG9yYWVEZWxldGUoaWQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIGZpbGUuIFJldHVybnMgYSBibG9iIFVSTCB0byB1cGxvYWQgdG8uXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZSBUaGUgbmFtZSBvZiB0aGUgZmlsZS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFtcGhvcmFlRmlsZXNDcmVhdGVGaWxlUmVxdWVzdChpZDogc3RyaW5nLCBmaWxlOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpOiAoYXhpb3M/OiBBeGlvc0luc3RhbmNlLCBiYXNlUGF0aD86IHN0cmluZykgPT4gQXhpb3NQcm9taXNlPFVwbG9hZFJlc3BvbnNlPiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IEFtcGhvcmFlQXBpQXhpb3NQYXJhbUNyZWF0b3IoY29uZmlndXJhdGlvbikuYW1waG9yYWVGaWxlc0NyZWF0ZUZpbGVSZXF1ZXN0KGlkLCBmaWxlLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgdGhlIGNvbnRlbnRzIG9mIGEgZmlsZS4gUmV0dXJucyBhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0uXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZSBUaGUgbmFtZSBvZiB0aGUgZmlsZS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFtcGhvcmFlRmlsZXNEZWxldGVGaWxlKGlkOiBzdHJpbmcsIGZpbGU6IHN0cmluZywgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8UmVzcG9uc2U+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gQW1waG9yYWVBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS5hbXBob3JhZUZpbGVzRGVsZXRlRmlsZShpZCwgZmlsZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gKGF4aW9zOiBBeGlvc0luc3RhbmNlID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoOiBzdHJpbmcgPSBCQVNFX1BBVEgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlvc1JlcXVlc3RBcmdzID0gey4uLmxvY2FsVmFyQXhpb3NBcmdzLm9wdGlvbnMsIHVybDogYmFzZVBhdGggKyBsb2NhbFZhckF4aW9zQXJncy51cmx9O1xuICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5yZXF1ZXN0KGF4aW9zUmVxdWVzdEFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIHRoZSBjb250ZW50cyBvZiBhIGZpbGUuIFJldHVybnMgYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW1waG9yYSBJZC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGUgVGhlIG5hbWUgb2YgdGhlIGZpbGUuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZUZpbGVzRG93bmxvYWRGaWxlKGlkOiBzdHJpbmcsIGZpbGU6IHN0cmluZywgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8YW55PiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IEFtcGhvcmFlQXBpQXhpb3NQYXJhbUNyZWF0b3IoY29uZmlndXJhdGlvbikuYW1waG9yYWVGaWxlc0Rvd25sb2FkRmlsZShpZCwgZmlsZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gKGF4aW9zOiBBeGlvc0luc3RhbmNlID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoOiBzdHJpbmcgPSBCQVNFX1BBVEgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlvc1JlcXVlc3RBcmdzID0gey4uLmxvY2FsVmFyQXhpb3NBcmdzLm9wdGlvbnMsIHVybDogYmFzZVBhdGggKyBsb2NhbFZhckF4aW9zQXJncy51cmx9O1xuICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5yZXF1ZXN0KGF4aW9zUmVxdWVzdEFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBMaXN0cyBhbiBBbXBob3JhXFwncyBmaWxlcy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3JkZXJCeV0gR2V0cyBvciBzZXRzIHRoZSB0aGUgb3JkZXJCeSBwYXJhbWV0ZXIuIE9wdGlvbnMgYXJlIEFscGhhYmV0aWNhbCBvciBMYXN0TW9kaWZpZWQuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcHJlZml4XSBHZXRzIG9yIHNldHMgYSBwcmVmaXggZmlsdGVyIGZvciBhbGwgZmlsZSBuYW1lcy4gSXMgY2FzZSBzZW5zaXRpdmUuXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbdGFrZV0gR2V0cyBvciBzZXRzIGhvdyBtYW55IGl0ZW1zIHRvIHJldHVybi4gRGVmYXVsdHMgdG8gNjQuXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2tpcF0gR2V0cyBvciBzZXRzIGhvdyBtYW55IGl0ZW1zIHRvIHNraXAgYmVmb3JlIHJldHVybmluZy4gRGVmYXVsdHMgdG8gMC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFtcGhvcmFlRmlsZXNMaXN0RmlsZXMoaWQ6IHN0cmluZywgb3JkZXJCeT86IHN0cmluZywgcHJlZml4Pzogc3RyaW5nLCB0YWtlPzogbnVtYmVyLCBza2lwPzogbnVtYmVyLCBvcHRpb25zPzogYW55KTogKGF4aW9zPzogQXhpb3NJbnN0YW5jZSwgYmFzZVBhdGg/OiBzdHJpbmcpID0+IEF4aW9zUHJvbWlzZTxBcnJheTxzdHJpbmc+PiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IEFtcGhvcmFlQXBpQXhpb3NQYXJhbUNyZWF0b3IoY29uZmlndXJhdGlvbikuYW1waG9yYWVGaWxlc0xpc3RGaWxlcyhpZCwgb3JkZXJCeSwgcHJlZml4LCB0YWtlLCBza2lwLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IFF1ZXJpZXMgYW4gQW1waG9yYVxcJ3MgZmlsZXMuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0ge0ZpbGVRdWVyeU9wdGlvbnN9IGZpbGVRdWVyeU9wdGlvbnMgT3B0aW9uIGZvciBxdWVyeWluZyB0aGUgZmlsZXMuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZUZpbGVzUXVlcnlGaWxlcyhpZDogc3RyaW5nLCBmaWxlUXVlcnlPcHRpb25zOiBGaWxlUXVlcnlPcHRpb25zLCBvcHRpb25zPzogYW55KTogKGF4aW9zPzogQXhpb3NJbnN0YW5jZSwgYmFzZVBhdGg/OiBzdHJpbmcpID0+IEF4aW9zUHJvbWlzZTxBcnJheTxzdHJpbmc+PiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IEFtcGhvcmFlQXBpQXhpb3NQYXJhbUNyZWF0b3IoY29uZmlndXJhdGlvbikuYW1waG9yYWVGaWxlc1F1ZXJ5RmlsZXMoaWQsIGZpbGVRdWVyeU9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgR2V0cyB0aGUgYXR0cmlidXRlcyBvZiBhIGZpbGUuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZSBUaGUgbmFtZSBvZiB0aGUgZmlsZS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFtcGhvcmFlRmlsZXNSZWFkRmlsZUF0dHJpYnV0ZXMoaWQ6IHN0cmluZywgZmlsZTogc3RyaW5nLCBvcHRpb25zPzogYW55KTogKGF4aW9zPzogQXhpb3NJbnN0YW5jZSwgYmFzZVBhdGg/OiBzdHJpbmcpID0+IEF4aW9zUHJvbWlzZTx7IFtrZXk6IHN0cmluZ106IHN0cmluZzsgfT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSBBbXBob3JhZUFwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlRmlsZXNSZWFkRmlsZUF0dHJpYnV0ZXMoaWQsIGZpbGUsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZSBcbiAgICAgICAgICogQHBhcmFtIHt7IFtrZXk6IHN0cmluZ106IHN0cmluZzsgfX0gcmVxdWVzdEJvZHkgXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZUZpbGVzV3JpdGVGaWxlQXR0cmlidXRlcyhpZDogc3RyaW5nLCBmaWxlOiBzdHJpbmcsIHJlcXVlc3RCb2R5OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZzsgfSwgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8eyBba2V5OiBzdHJpbmddOiBzdHJpbmc7IH0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gQW1waG9yYWVBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS5hbXBob3JhZUZpbGVzV3JpdGVGaWxlQXR0cmlidXRlcyhpZCwgZmlsZSwgcmVxdWVzdEJvZHksIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgR2V0cyBhIGxpc3Qgb2YgQW1waG9yYSBmb3IgeW91cnNlbGYgb3IgeW91ciBvcmcsIGNyZWF0ZWQgb3IgcHVyY2hhc2VkIGJ5IHlvdSAob3Igb3JnYW5pc2F0aW9uKS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtzY29wZV0gXFwmIzM5O3NlbGZcXCYjMzk7IG9yIFxcJiMzOTtvcmdhbmlzYXRpb25cXCYjMzk7LiBEZWZhdWx0cyB0byBzZWxmLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2FjY2Vzc1R5cGVdIFxcJiMzOTtjcmVhdGVkXFwmIzM5OyBvciBcXCYjMzk7cHVyY2hhc2VkXFwmIzM5Oy4gRGVmYXVsdHMgdG8gY3JlYXRlZC5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFt0YWtlXSBHZXRzIG9yIHNldHMgaG93IG1hbnkgaXRlbXMgdG8gcmV0dXJuLiBEZWZhdWx0cyB0byA2NC5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtza2lwXSBHZXRzIG9yIHNldHMgaG93IG1hbnkgaXRlbXMgdG8gc2tpcCBiZWZvcmUgcmV0dXJuaW5nLiBEZWZhdWx0cyB0byAwLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYWVMaXN0KHNjb3BlPzogc3RyaW5nLCBhY2Nlc3NUeXBlPzogc3RyaW5nLCB0YWtlPzogbnVtYmVyLCBza2lwPzogbnVtYmVyLCBvcHRpb25zPzogYW55KTogKGF4aW9zPzogQXhpb3NJbnN0YW5jZSwgYmFzZVBhdGg/OiBzdHJpbmcpID0+IEF4aW9zUHJvbWlzZTxBcnJheTxEZXRhaWxlZEFtcGhvcmE+PiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IEFtcGhvcmFlQXBpQXhpb3NQYXJhbUNyZWF0b3IoY29uZmlndXJhdGlvbikuYW1waG9yYWVMaXN0KHNjb3BlLCBhY2Nlc3NUeXBlLCB0YWtlLCBza2lwLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgZGV0YWlscyBvZiBhbiBBbXBob3JhIGJ5IElkLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW1waG9yYSBJZC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFtcGhvcmFlUmVhZChpZDogc3RyaW5nLCBvcHRpb25zPzogYW55KTogKGF4aW9zPzogQXhpb3NJbnN0YW5jZSwgYmFzZVBhdGg/OiBzdHJpbmcpID0+IEF4aW9zUHJvbWlzZTxEZXRhaWxlZEFtcGhvcmE+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gQW1waG9yYWVBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS5hbXBob3JhZVJlYWQoaWQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgQXNzb2NpYXRlcyBhIHNpZ25hbCB3aXRoIGFuIEFtcGhvcmEuIFNpZ25hbCBpcyBjcmVhdGVkIGlmIG5vdCBleGlzdGluZy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7Q3JlYXRlU2lnbmFsfSBjcmVhdGVTaWduYWwgU2lnbmFsIERldGFpbHMuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZVNpZ25hbHNDcmVhdGVTaWduYWwoaWQ6IHN0cmluZywgY3JlYXRlU2lnbmFsOiBDcmVhdGVTaWduYWwsIG9wdGlvbnM/OiBhbnkpOiAoYXhpb3M/OiBBeGlvc0luc3RhbmNlLCBiYXNlUGF0aD86IHN0cmluZykgPT4gQXhpb3NQcm9taXNlPFNpZ25hbD4ge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSBBbXBob3JhZUFwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlU2lnbmFsc0NyZWF0ZVNpZ25hbChpZCwgY3JlYXRlU2lnbmFsLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgdGhlIHNpZ25hbHMgYXNzb2NpYXRlZCB3aXRoIGFuIEFtcGhvcmEuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgVGhlIG5hbWUgb3IgaWQgb2YgdGhlIHNpZ25hbCBwcm9wZXJ0eS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFtcGhvcmFlU2lnbmFsc0dldFNpZ25hbChpZDogc3RyaW5nLCBwcm9wZXJ0eTogc3RyaW5nLCBvcHRpb25zPzogYW55KTogKGF4aW9zPzogQXhpb3NJbnN0YW5jZSwgYmFzZVBhdGg/OiBzdHJpbmcpID0+IEF4aW9zUHJvbWlzZTxTaWduYWw+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gQW1waG9yYWVBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS5hbXBob3JhZVNpZ25hbHNHZXRTaWduYWwoaWQsIHByb3BlcnR5LCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgdGhlIHNpZ25hbHMgYXNzb2NpYXRlZCB3aXRoIGFuIEFtcGhvcmEuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYWVTaWduYWxzR2V0U2lnbmFscyhpZDogc3RyaW5nLCBvcHRpb25zPzogYW55KTogKGF4aW9zPzogQXhpb3NJbnN0YW5jZSwgYmFzZVBhdGg/OiBzdHJpbmcpID0+IEF4aW9zUHJvbWlzZTxBcnJheTxTaWduYWw+PiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IEFtcGhvcmFlQXBpQXhpb3NQYXJhbUNyZWF0b3IoY29uZmlndXJhdGlvbikuYW1waG9yYWVTaWduYWxzR2V0U2lnbmFscyhpZCwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gKGF4aW9zOiBBeGlvc0luc3RhbmNlID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoOiBzdHJpbmcgPSBCQVNFX1BBVEgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlvc1JlcXVlc3RBcmdzID0gey4uLmxvY2FsVmFyQXhpb3NBcmdzLm9wdGlvbnMsIHVybDogYmFzZVBhdGggKyBsb2NhbFZhckF4aW9zQXJncy51cmx9O1xuICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5yZXF1ZXN0KGF4aW9zUmVxdWVzdEFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBBc3NvY2lhdGVzIGEgc2lnbmFsIHdpdGggYW4gQW1waG9yYS4gU2lnbmFsIGlzIGNyZWF0ZWQgaWYgbm90IGV4aXN0aW5nLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW1waG9yYSBJZC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHNpZ25hbElkIFNpZ25hbCBEZXRhaWxzLlxuICAgICAgICAgKiBAcGFyYW0ge1VwZGF0ZVNpZ25hbH0gdXBkYXRlU2lnbmFsIFNpZ25hbCBwcm9wZXJ0aWVzIHRvIHVwZGF0ZS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFtcGhvcmFlU2lnbmFsc1VwZGF0ZVNpZ25hbChpZDogc3RyaW5nLCBzaWduYWxJZDogc3RyaW5nLCB1cGRhdGVTaWduYWw6IFVwZGF0ZVNpZ25hbCwgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8U2lnbmFsPiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IEFtcGhvcmFlQXBpQXhpb3NQYXJhbUNyZWF0b3IoY29uZmlndXJhdGlvbikuYW1waG9yYWVTaWduYWxzVXBkYXRlU2lnbmFsKGlkLCBzaWduYWxJZCwgdXBkYXRlU2lnbmFsLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBcbiAgICAgICAgICogQHBhcmFtIHt7IFtrZXk6IHN0cmluZ106IG9iamVjdDsgfX0gcmVxdWVzdEJvZHkgXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZVNpZ25hbHNVcGxvYWRTaWduYWwoaWQ6IHN0cmluZywgcmVxdWVzdEJvZHk6IHsgW2tleTogc3RyaW5nXTogb2JqZWN0OyB9LCBvcHRpb25zPzogYW55KTogKGF4aW9zPzogQXhpb3NJbnN0YW5jZSwgYmFzZVBhdGg/OiBzdHJpbmcpID0+IEF4aW9zUHJvbWlzZTx7IFtrZXk6IHN0cmluZ106IG9iamVjdDsgfT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSBBbXBob3JhZUFwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlU2lnbmFsc1VwbG9hZFNpZ25hbChpZCwgcmVxdWVzdEJvZHksIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFxuICAgICAgICAgKiBAcGFyYW0ge3sgW2tleTogc3RyaW5nXTogb2JqZWN0OyB9fSByZXF1ZXN0Qm9keSBcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFtcGhvcmFlU2lnbmFsc1VwbG9hZFNpZ25hbDIoaWQ6IHN0cmluZywgcmVxdWVzdEJvZHk6IHsgW2tleTogc3RyaW5nXTogb2JqZWN0OyB9LCBvcHRpb25zPzogYW55KTogKGF4aW9zPzogQXhpb3NJbnN0YW5jZSwgYmFzZVBhdGg/OiBzdHJpbmcpID0+IEF4aW9zUHJvbWlzZTx7IFtrZXk6IHN0cmluZ106IG9iamVjdDsgfT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSBBbXBob3JhZUFwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlU2lnbmFsc1VwbG9hZFNpZ25hbDIoaWQsIHJlcXVlc3RCb2R5LCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBcbiAgICAgICAgICogQHBhcmFtIHtBcnJheTx7IFtrZXk6IHN0cmluZ106IG9iamVjdDsgfT59IHJlcXVlc3RCb2R5IFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYWVTaWduYWxzVXBsb2FkU2lnbmFsQmF0Y2goaWQ6IHN0cmluZywgcmVxdWVzdEJvZHk6IEFycmF5PHsgW2tleTogc3RyaW5nXTogb2JqZWN0OyB9Piwgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8eyBba2V5OiBzdHJpbmddOiBvYmplY3Q7IH0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gQW1waG9yYWVBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS5hbXBob3JhZVNpZ25hbHNVcGxvYWRTaWduYWxCYXRjaChpZCwgcmVxdWVzdEJvZHksIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5PHsgW2tleTogc3RyaW5nXTogb2JqZWN0OyB9Pn0gcmVxdWVzdEJvZHkgXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZVNpZ25hbHNVcGxvYWRTaWduYWxCYXRjaDIoaWQ6IHN0cmluZywgcmVxdWVzdEJvZHk6IEFycmF5PHsgW2tleTogc3RyaW5nXTogb2JqZWN0OyB9Piwgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8eyBba2V5OiBzdHJpbmddOiBvYmplY3Q7IH0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gQW1waG9yYWVBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS5hbXBob3JhZVNpZ25hbHNVcGxvYWRTaWduYWxCYXRjaDIoaWQsIHJlcXVlc3RCb2R5LCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IFVwZGF0ZXMgdGhlIGRldGFpbHMgb2YgYW4gQW1waG9yYSBieSBJZC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7RWRpdEFtcGhvcmF9IGVkaXRBbXBob3JhIEluZm9ybWF0aW9uIHRvIHVwZGF0ZS4gTnVsbHMgYXJlIE5PVCBpZ25vcmVkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYWVVcGRhdGUoaWQ6IHN0cmluZywgZWRpdEFtcGhvcmE6IEVkaXRBbXBob3JhLCBvcHRpb25zPzogYW55KTogKGF4aW9zPzogQXhpb3NJbnN0YW5jZSwgYmFzZVBhdGg/OiBzdHJpbmcpID0+IEF4aW9zUHJvbWlzZTxEZXRhaWxlZEFtcGhvcmE+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gQW1waG9yYWVBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS5hbXBob3JhZVVwZGF0ZShpZCwgZWRpdEFtcGhvcmEsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgUHVyY2hhc2VzIGFuIEFtcGhvcmEgYXMgdGhlIGxvZ2dlZCBpbiB1c2VyLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW1waG9yYSBJZC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHB1cmNoYXNlc1B1cmNoYXNlKGlkOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpOiAoYXhpb3M/OiBBeGlvc0luc3RhbmNlLCBiYXNlUGF0aD86IHN0cmluZykgPT4gQXhpb3NQcm9taXNlPFJlc3BvbnNlPiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IEFtcGhvcmFlQXBpQXhpb3NQYXJhbUNyZWF0b3IoY29uZmlndXJhdGlvbikucHVyY2hhc2VzUHVyY2hhc2UoaWQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfVxufTtcblxuLyoqXG4gKiBBbXBob3JhZUFwaSAtIGZhY3RvcnkgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydCBjb25zdCBBbXBob3JhZUFwaUZhY3RvcnkgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbj86IENvbmZpZ3VyYXRpb24sIGJhc2VQYXRoPzogc3RyaW5nLCBheGlvcz86IEF4aW9zSW5zdGFuY2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgdGhlIGRhdGEgcXVhbGl0eSBtZXRyaWNzIGZvciB0aGlzIEFtcGhvcmEuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYVF1YWxpdHlHZXQoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIEFtcGhvcmFlQXBpRnAoY29uZmlndXJhdGlvbikuYW1waG9yYVF1YWxpdHlHZXQoaWQsIG9wdGlvbnMpKGF4aW9zLCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgU2V0cyB0aGUgZGF0YSBxdWFsaXR5IG1ldHJpY3MgZm9yIHRoaXMgQW1waG9yYS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7UXVhbGl0eX0gcXVhbGl0eSBUaGUgZGF0YSBxdWFsaXR5IG1ldHJpY3MuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhUXVhbGl0eVNldChpZDogc3RyaW5nLCBxdWFsaXR5OiBRdWFsaXR5LCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gQW1waG9yYWVBcGlGcChjb25maWd1cmF0aW9uKS5hbXBob3JhUXVhbGl0eVNldChpZCwgcXVhbGl0eSwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGFuIEFjY2VzcyBDb250cm9sIFJ1bGUgZm9yIGFsbCBvbiB0aGlzIEFtcGhvcmEuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0ge0FsbEFjY2Vzc1J1bGV9IGFsbEFjY2Vzc1J1bGUgVGhlIHJ1bGUgdG8gY3JlYXRlLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYWVBY2Nlc3NDb250cm9sc0NyZWF0ZUZvckFsbChpZDogc3RyaW5nLCBhbGxBY2Nlc3NSdWxlOiBBbGxBY2Nlc3NSdWxlLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gQW1waG9yYWVBcGlGcChjb25maWd1cmF0aW9uKS5hbXBob3JhZUFjY2Vzc0NvbnRyb2xzQ3JlYXRlRm9yQWxsKGlkLCBhbGxBY2Nlc3NSdWxlLCBvcHRpb25zKShheGlvcywgYmFzZVBhdGgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYW4gQWNjZXNzIENvbnRyb2wgUnVsZSBvbiB0aGlzIEFtcGhvcmEuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0ge09yZ2FuaXNhdGlvbkFjY2Vzc1J1bGV9IG9yZ2FuaXNhdGlvbkFjY2Vzc1J1bGUgVGhlIHJ1bGUgdG8gY3JlYXRlLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYWVBY2Nlc3NDb250cm9sc0NyZWF0ZUZvck9yZ2FuaXNhdGlvbihpZDogc3RyaW5nLCBvcmdhbmlzYXRpb25BY2Nlc3NSdWxlOiBPcmdhbmlzYXRpb25BY2Nlc3NSdWxlLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gQW1waG9yYWVBcGlGcChjb25maWd1cmF0aW9uKS5hbXBob3JhZUFjY2Vzc0NvbnRyb2xzQ3JlYXRlRm9yT3JnYW5pc2F0aW9uKGlkLCBvcmdhbmlzYXRpb25BY2Nlc3NSdWxlLCBvcHRpb25zKShheGlvcywgYmFzZVBhdGgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYW4gQWNjZXNzIENvbnRyb2wgcnVsZSBvbiB0aGlzIEFtcGhvcmEuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0ge1VzZXJBY2Nlc3NSdWxlfSB1c2VyQWNjZXNzUnVsZSBUaGUgcnVsZSB0byBjcmVhdGUuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZUFjY2Vzc0NvbnRyb2xzQ3JlYXRlRm9yVXNlcihpZDogc3RyaW5nLCB1c2VyQWNjZXNzUnVsZTogVXNlckFjY2Vzc1J1bGUsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBBbXBob3JhZUFwaUZwKGNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlQWNjZXNzQ29udHJvbHNDcmVhdGVGb3JVc2VyKGlkLCB1c2VyQWNjZXNzUnVsZSwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBEZWxldGVzIGFuIEFjY2VzcyBDb250cm9sIG9uIHRoaXMgQW1waG9yYS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBydWxlSWQgVGhlIElkIG9mIHRoZSBydWxlIHRvIGRlbGV0ZS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFtcGhvcmFlQWNjZXNzQ29udHJvbHNEZWxldGUoaWQ6IHN0cmluZywgcnVsZUlkOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBBbXBob3JhZUFwaUZwKGNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlQWNjZXNzQ29udHJvbHNEZWxldGUoaWQsIHJ1bGVJZCwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIHRoZSBcXCdmb3IgYWxsXFwnIHJ1bGUsIGlmIGl0IGV4aXN0cywgZWxzZSBhbiBlbXB0eSAyMDAuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYWVBY2Nlc3NDb250cm9sc0dldEZvckFsbFJ1bGUoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIEFtcGhvcmFlQXBpRnAoY29uZmlndXJhdGlvbikuYW1waG9yYWVBY2Nlc3NDb250cm9sc0dldEZvckFsbFJ1bGUoaWQsIG9wdGlvbnMpKGF4aW9zLCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgR2V0cyB0aGUgbGlzdCBvZiBhY2Nlc3MgcnVsZXMgYXBwbGllZCB0byBvcmdhbmlzYXRpb25zLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW1waG9yYSBJZC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFtcGhvcmFlQWNjZXNzQ29udHJvbHNHZXRPcmdhbmlzYXRpb25SdWxlcyhpZDogc3RyaW5nLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gQW1waG9yYWVBcGlGcChjb25maWd1cmF0aW9uKS5hbXBob3JhZUFjY2Vzc0NvbnRyb2xzR2V0T3JnYW5pc2F0aW9uUnVsZXMoaWQsIG9wdGlvbnMpKGF4aW9zLCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgR2V0cyB0aGUgbGlzdCBvZiBhY2Nlc3MgcnVsZXMgYXBwbGllZCB0byB1c2Vycy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZUFjY2Vzc0NvbnRyb2xzR2V0VXNlclJ1bGVzKGlkOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBBbXBob3JhZUFwaUZwKGNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlQWNjZXNzQ29udHJvbHNHZXRVc2VyUnVsZXMoaWQsIG9wdGlvbnMpKGF4aW9zLCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIG5ldyBlbXB0eSBBbXBob3JhIGluIHRoZSB1c2VyXFwncyBvcmdhbmlzYXRpb24uXG4gICAgICAgICAqIEBwYXJhbSB7Q3JlYXRlQW1waG9yYX0gY3JlYXRlQW1waG9yYSBJbmZvcm1hdGlvbiBmb3IgdGhlIG5ldyBBbXBob3JhLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYWVDcmVhdGUoY3JlYXRlQW1waG9yYTogQ3JlYXRlQW1waG9yYSwgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIEFtcGhvcmFlQXBpRnAoY29uZmlndXJhdGlvbikuYW1waG9yYWVDcmVhdGUoY3JlYXRlQW1waG9yYSwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBEZWxldGVzIGFuIEFtcGhvcmEuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYWVEZWxldGUoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIEFtcGhvcmFlQXBpRnAoY29uZmlndXJhdGlvbikuYW1waG9yYWVEZWxldGUoaWQsIG9wdGlvbnMpKGF4aW9zLCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIGZpbGUuIFJldHVybnMgYSBibG9iIFVSTCB0byB1cGxvYWQgdG8uXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZSBUaGUgbmFtZSBvZiB0aGUgZmlsZS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFtcGhvcmFlRmlsZXNDcmVhdGVGaWxlUmVxdWVzdChpZDogc3RyaW5nLCBmaWxlOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBBbXBob3JhZUFwaUZwKGNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlRmlsZXNDcmVhdGVGaWxlUmVxdWVzdChpZCwgZmlsZSwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIHRoZSBjb250ZW50cyBvZiBhIGZpbGUuIFJldHVybnMgYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW1waG9yYSBJZC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGUgVGhlIG5hbWUgb2YgdGhlIGZpbGUuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZUZpbGVzRGVsZXRlRmlsZShpZDogc3RyaW5nLCBmaWxlOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBBbXBob3JhZUFwaUZwKGNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlRmlsZXNEZWxldGVGaWxlKGlkLCBmaWxlLCBvcHRpb25zKShheGlvcywgYmFzZVBhdGgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgdGhlIGNvbnRlbnRzIG9mIGEgZmlsZS4gUmV0dXJucyBhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0uXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZSBUaGUgbmFtZSBvZiB0aGUgZmlsZS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFtcGhvcmFlRmlsZXNEb3dubG9hZEZpbGUoaWQ6IHN0cmluZywgZmlsZTogc3RyaW5nLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gQW1waG9yYWVBcGlGcChjb25maWd1cmF0aW9uKS5hbXBob3JhZUZpbGVzRG93bmxvYWRGaWxlKGlkLCBmaWxlLCBvcHRpb25zKShheGlvcywgYmFzZVBhdGgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IExpc3RzIGFuIEFtcGhvcmFcXCdzIGZpbGVzLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW1waG9yYSBJZC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcmRlckJ5XSBHZXRzIG9yIHNldHMgdGhlIHRoZSBvcmRlckJ5IHBhcmFtZXRlci4gT3B0aW9ucyBhcmUgQWxwaGFiZXRpY2FsIG9yIExhc3RNb2RpZmllZC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtwcmVmaXhdIEdldHMgb3Igc2V0cyBhIHByZWZpeCBmaWx0ZXIgZm9yIGFsbCBmaWxlIG5hbWVzLiBJcyBjYXNlIHNlbnNpdGl2ZS5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFt0YWtlXSBHZXRzIG9yIHNldHMgaG93IG1hbnkgaXRlbXMgdG8gcmV0dXJuLiBEZWZhdWx0cyB0byA2NC5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtza2lwXSBHZXRzIG9yIHNldHMgaG93IG1hbnkgaXRlbXMgdG8gc2tpcCBiZWZvcmUgcmV0dXJuaW5nLiBEZWZhdWx0cyB0byAwLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYWVGaWxlc0xpc3RGaWxlcyhpZDogc3RyaW5nLCBvcmRlckJ5Pzogc3RyaW5nLCBwcmVmaXg/OiBzdHJpbmcsIHRha2U/OiBudW1iZXIsIHNraXA/OiBudW1iZXIsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBBbXBob3JhZUFwaUZwKGNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlRmlsZXNMaXN0RmlsZXMoaWQsIG9yZGVyQnksIHByZWZpeCwgdGFrZSwgc2tpcCwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBRdWVyaWVzIGFuIEFtcGhvcmFcXCdzIGZpbGVzLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW1waG9yYSBJZC5cbiAgICAgICAgICogQHBhcmFtIHtGaWxlUXVlcnlPcHRpb25zfSBmaWxlUXVlcnlPcHRpb25zIE9wdGlvbiBmb3IgcXVlcnlpbmcgdGhlIGZpbGVzLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYWVGaWxlc1F1ZXJ5RmlsZXMoaWQ6IHN0cmluZywgZmlsZVF1ZXJ5T3B0aW9uczogRmlsZVF1ZXJ5T3B0aW9ucywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIEFtcGhvcmFlQXBpRnAoY29uZmlndXJhdGlvbikuYW1waG9yYWVGaWxlc1F1ZXJ5RmlsZXMoaWQsIGZpbGVRdWVyeU9wdGlvbnMsIG9wdGlvbnMpKGF4aW9zLCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgR2V0cyB0aGUgYXR0cmlidXRlcyBvZiBhIGZpbGUuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZSBUaGUgbmFtZSBvZiB0aGUgZmlsZS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFtcGhvcmFlRmlsZXNSZWFkRmlsZUF0dHJpYnV0ZXMoaWQ6IHN0cmluZywgZmlsZTogc3RyaW5nLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gQW1waG9yYWVBcGlGcChjb25maWd1cmF0aW9uKS5hbXBob3JhZUZpbGVzUmVhZEZpbGVBdHRyaWJ1dGVzKGlkLCBmaWxlLCBvcHRpb25zKShheGlvcywgYmFzZVBhdGgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGUgXG4gICAgICAgICAqIEBwYXJhbSB7eyBba2V5OiBzdHJpbmddOiBzdHJpbmc7IH19IHJlcXVlc3RCb2R5IFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYWVGaWxlc1dyaXRlRmlsZUF0dHJpYnV0ZXMoaWQ6IHN0cmluZywgZmlsZTogc3RyaW5nLCByZXF1ZXN0Qm9keTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmc7IH0sIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBBbXBob3JhZUFwaUZwKGNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlRmlsZXNXcml0ZUZpbGVBdHRyaWJ1dGVzKGlkLCBmaWxlLCByZXF1ZXN0Qm9keSwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIGEgbGlzdCBvZiBBbXBob3JhIGZvciB5b3Vyc2VsZiBvciB5b3VyIG9yZywgY3JlYXRlZCBvciBwdXJjaGFzZWQgYnkgeW91IChvciBvcmdhbmlzYXRpb24pLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3Njb3BlXSBcXCYjMzk7c2VsZlxcJiMzOTsgb3IgXFwmIzM5O29yZ2FuaXNhdGlvblxcJiMzOTsuIERlZmF1bHRzIHRvIHNlbGYuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbYWNjZXNzVHlwZV0gXFwmIzM5O2NyZWF0ZWRcXCYjMzk7IG9yIFxcJiMzOTtwdXJjaGFzZWRcXCYjMzk7LiBEZWZhdWx0cyB0byBjcmVhdGVkLlxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Rha2VdIEdldHMgb3Igc2V0cyBob3cgbWFueSBpdGVtcyB0byByZXR1cm4uIERlZmF1bHRzIHRvIDY0LlxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NraXBdIEdldHMgb3Igc2V0cyBob3cgbWFueSBpdGVtcyB0byBza2lwIGJlZm9yZSByZXR1cm5pbmcuIERlZmF1bHRzIHRvIDAuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZUxpc3Qoc2NvcGU/OiBzdHJpbmcsIGFjY2Vzc1R5cGU/OiBzdHJpbmcsIHRha2U/OiBudW1iZXIsIHNraXA/OiBudW1iZXIsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBBbXBob3JhZUFwaUZwKGNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlTGlzdChzY29wZSwgYWNjZXNzVHlwZSwgdGFrZSwgc2tpcCwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIGRldGFpbHMgb2YgYW4gQW1waG9yYSBieSBJZC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZVJlYWQoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIEFtcGhvcmFlQXBpRnAoY29uZmlndXJhdGlvbikuYW1waG9yYWVSZWFkKGlkLCBvcHRpb25zKShheGlvcywgYmFzZVBhdGgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEFzc29jaWF0ZXMgYSBzaWduYWwgd2l0aCBhbiBBbXBob3JhLiBTaWduYWwgaXMgY3JlYXRlZCBpZiBub3QgZXhpc3RpbmcuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZVNpZ25hbH0gY3JlYXRlU2lnbmFsIFNpZ25hbCBEZXRhaWxzLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYW1waG9yYWVTaWduYWxzQ3JlYXRlU2lnbmFsKGlkOiBzdHJpbmcsIGNyZWF0ZVNpZ25hbDogQ3JlYXRlU2lnbmFsLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gQW1waG9yYWVBcGlGcChjb25maWd1cmF0aW9uKS5hbXBob3JhZVNpZ25hbHNDcmVhdGVTaWduYWwoaWQsIGNyZWF0ZVNpZ25hbCwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIHRoZSBzaWduYWxzIGFzc29jaWF0ZWQgd2l0aCBhbiBBbXBob3JhLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW1waG9yYSBJZC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFRoZSBuYW1lIG9yIGlkIG9mIHRoZSBzaWduYWwgcHJvcGVydHkuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZVNpZ25hbHNHZXRTaWduYWwoaWQ6IHN0cmluZywgcHJvcGVydHk6IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIEFtcGhvcmFlQXBpRnAoY29uZmlndXJhdGlvbikuYW1waG9yYWVTaWduYWxzR2V0U2lnbmFsKGlkLCBwcm9wZXJ0eSwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIHRoZSBzaWduYWxzIGFzc29jaWF0ZWQgd2l0aCBhbiBBbXBob3JhLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW1waG9yYSBJZC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFtcGhvcmFlU2lnbmFsc0dldFNpZ25hbHMoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIEFtcGhvcmFlQXBpRnAoY29uZmlndXJhdGlvbikuYW1waG9yYWVTaWduYWxzR2V0U2lnbmFscyhpZCwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBBc3NvY2lhdGVzIGEgc2lnbmFsIHdpdGggYW4gQW1waG9yYS4gU2lnbmFsIGlzIGNyZWF0ZWQgaWYgbm90IGV4aXN0aW5nLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW1waG9yYSBJZC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHNpZ25hbElkIFNpZ25hbCBEZXRhaWxzLlxuICAgICAgICAgKiBAcGFyYW0ge1VwZGF0ZVNpZ25hbH0gdXBkYXRlU2lnbmFsIFNpZ25hbCBwcm9wZXJ0aWVzIHRvIHVwZGF0ZS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFtcGhvcmFlU2lnbmFsc1VwZGF0ZVNpZ25hbChpZDogc3RyaW5nLCBzaWduYWxJZDogc3RyaW5nLCB1cGRhdGVTaWduYWw6IFVwZGF0ZVNpZ25hbCwgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIEFtcGhvcmFlQXBpRnAoY29uZmlndXJhdGlvbikuYW1waG9yYWVTaWduYWxzVXBkYXRlU2lnbmFsKGlkLCBzaWduYWxJZCwgdXBkYXRlU2lnbmFsLCBvcHRpb25zKShheGlvcywgYmFzZVBhdGgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBcbiAgICAgICAgICogQHBhcmFtIHt7IFtrZXk6IHN0cmluZ106IG9iamVjdDsgfX0gcmVxdWVzdEJvZHkgXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZVNpZ25hbHNVcGxvYWRTaWduYWwoaWQ6IHN0cmluZywgcmVxdWVzdEJvZHk6IHsgW2tleTogc3RyaW5nXTogb2JqZWN0OyB9LCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gQW1waG9yYWVBcGlGcChjb25maWd1cmF0aW9uKS5hbXBob3JhZVNpZ25hbHNVcGxvYWRTaWduYWwoaWQsIHJlcXVlc3RCb2R5LCBvcHRpb25zKShheGlvcywgYmFzZVBhdGgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBcbiAgICAgICAgICogQHBhcmFtIHt7IFtrZXk6IHN0cmluZ106IG9iamVjdDsgfX0gcmVxdWVzdEJvZHkgXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZVNpZ25hbHNVcGxvYWRTaWduYWwyKGlkOiBzdHJpbmcsIHJlcXVlc3RCb2R5OiB7IFtrZXk6IHN0cmluZ106IG9iamVjdDsgfSwgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIEFtcGhvcmFlQXBpRnAoY29uZmlndXJhdGlvbikuYW1waG9yYWVTaWduYWxzVXBsb2FkU2lnbmFsMihpZCwgcmVxdWVzdEJvZHksIG9wdGlvbnMpKGF4aW9zLCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5PHsgW2tleTogc3RyaW5nXTogb2JqZWN0OyB9Pn0gcmVxdWVzdEJvZHkgXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZVNpZ25hbHNVcGxvYWRTaWduYWxCYXRjaChpZDogc3RyaW5nLCByZXF1ZXN0Qm9keTogQXJyYXk8eyBba2V5OiBzdHJpbmddOiBvYmplY3Q7IH0+LCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gQW1waG9yYWVBcGlGcChjb25maWd1cmF0aW9uKS5hbXBob3JhZVNpZ25hbHNVcGxvYWRTaWduYWxCYXRjaChpZCwgcmVxdWVzdEJvZHksIG9wdGlvbnMpKGF4aW9zLCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5PHsgW2tleTogc3RyaW5nXTogb2JqZWN0OyB9Pn0gcmVxdWVzdEJvZHkgXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhbXBob3JhZVNpZ25hbHNVcGxvYWRTaWduYWxCYXRjaDIoaWQ6IHN0cmluZywgcmVxdWVzdEJvZHk6IEFycmF5PHsgW2tleTogc3RyaW5nXTogb2JqZWN0OyB9Piwgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIEFtcGhvcmFlQXBpRnAoY29uZmlndXJhdGlvbikuYW1waG9yYWVTaWduYWxzVXBsb2FkU2lnbmFsQmF0Y2gyKGlkLCByZXF1ZXN0Qm9keSwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBVcGRhdGVzIHRoZSBkZXRhaWxzIG9mIGFuIEFtcGhvcmEgYnkgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAgICAgKiBAcGFyYW0ge0VkaXRBbXBob3JhfSBlZGl0QW1waG9yYSBJbmZvcm1hdGlvbiB0byB1cGRhdGUuIE51bGxzIGFyZSBOT1QgaWdub3JlZC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFtcGhvcmFlVXBkYXRlKGlkOiBzdHJpbmcsIGVkaXRBbXBob3JhOiBFZGl0QW1waG9yYSwgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIEFtcGhvcmFlQXBpRnAoY29uZmlndXJhdGlvbikuYW1waG9yYWVVcGRhdGUoaWQsIGVkaXRBbXBob3JhLCBvcHRpb25zKShheGlvcywgYmFzZVBhdGgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IFB1cmNoYXNlcyBhbiBBbXBob3JhIGFzIHRoZSBsb2dnZWQgaW4gdXNlci5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBwdXJjaGFzZXNQdXJjaGFzZShpZDogc3RyaW5nLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gQW1waG9yYWVBcGlGcChjb25maWd1cmF0aW9uKS5wdXJjaGFzZXNQdXJjaGFzZShpZCwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICB9O1xufTtcblxuLyoqXG4gKiBBbXBob3JhZUFwaSAtIG9iamVjdC1vcmllbnRlZCBpbnRlcmZhY2VcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBBbXBob3JhZUFwaVxuICogQGV4dGVuZHMge0Jhc2VBUEl9XG4gKi9cbmV4cG9ydCBjbGFzcyBBbXBob3JhZUFwaSBleHRlbmRzIEJhc2VBUEkge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBzdW1tYXJ5IEdldHMgdGhlIGRhdGEgcXVhbGl0eSBtZXRyaWNzIGZvciB0aGlzIEFtcGhvcmEuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBBbXBob3JhZUFwaVxuICAgICAqL1xuICAgIHB1YmxpYyBhbXBob3JhUXVhbGl0eUdldChpZDogc3RyaW5nLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBBbXBob3JhZUFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuYW1waG9yYVF1YWxpdHlHZXQoaWQsIG9wdGlvbnMpKHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBzdW1tYXJ5IFNldHMgdGhlIGRhdGEgcXVhbGl0eSBtZXRyaWNzIGZvciB0aGlzIEFtcGhvcmEuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICogQHBhcmFtIHtRdWFsaXR5fSBxdWFsaXR5IFRoZSBkYXRhIHF1YWxpdHkgbWV0cmljcy5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIEFtcGhvcmFlQXBpXG4gICAgICovXG4gICAgcHVibGljIGFtcGhvcmFRdWFsaXR5U2V0KGlkOiBzdHJpbmcsIHF1YWxpdHk6IFF1YWxpdHksIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIEFtcGhvcmFlQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5hbXBob3JhUXVhbGl0eVNldChpZCwgcXVhbGl0eSwgb3B0aW9ucykodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhbiBBY2Nlc3MgQ29udHJvbCBSdWxlIGZvciBhbGwgb24gdGhpcyBBbXBob3JhLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAqIEBwYXJhbSB7QWxsQWNjZXNzUnVsZX0gYWxsQWNjZXNzUnVsZSBUaGUgcnVsZSB0byBjcmVhdGUuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBBbXBob3JhZUFwaVxuICAgICAqL1xuICAgIHB1YmxpYyBhbXBob3JhZUFjY2Vzc0NvbnRyb2xzQ3JlYXRlRm9yQWxsKGlkOiBzdHJpbmcsIGFsbEFjY2Vzc1J1bGU6IEFsbEFjY2Vzc1J1bGUsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIEFtcGhvcmFlQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5hbXBob3JhZUFjY2Vzc0NvbnRyb2xzQ3JlYXRlRm9yQWxsKGlkLCBhbGxBY2Nlc3NSdWxlLCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGFuIEFjY2VzcyBDb250cm9sIFJ1bGUgb24gdGhpcyBBbXBob3JhLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAqIEBwYXJhbSB7T3JnYW5pc2F0aW9uQWNjZXNzUnVsZX0gb3JnYW5pc2F0aW9uQWNjZXNzUnVsZSBUaGUgcnVsZSB0byBjcmVhdGUuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBBbXBob3JhZUFwaVxuICAgICAqL1xuICAgIHB1YmxpYyBhbXBob3JhZUFjY2Vzc0NvbnRyb2xzQ3JlYXRlRm9yT3JnYW5pc2F0aW9uKGlkOiBzdHJpbmcsIG9yZ2FuaXNhdGlvbkFjY2Vzc1J1bGU6IE9yZ2FuaXNhdGlvbkFjY2Vzc1J1bGUsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIEFtcGhvcmFlQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5hbXBob3JhZUFjY2Vzc0NvbnRyb2xzQ3JlYXRlRm9yT3JnYW5pc2F0aW9uKGlkLCBvcmdhbmlzYXRpb25BY2Nlc3NSdWxlLCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGFuIEFjY2VzcyBDb250cm9sIHJ1bGUgb24gdGhpcyBBbXBob3JhLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAqIEBwYXJhbSB7VXNlckFjY2Vzc1J1bGV9IHVzZXJBY2Nlc3NSdWxlIFRoZSBydWxlIHRvIGNyZWF0ZS5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIEFtcGhvcmFlQXBpXG4gICAgICovXG4gICAgcHVibGljIGFtcGhvcmFlQWNjZXNzQ29udHJvbHNDcmVhdGVGb3JVc2VyKGlkOiBzdHJpbmcsIHVzZXJBY2Nlc3NSdWxlOiBVc2VyQWNjZXNzUnVsZSwgb3B0aW9ucz86IGFueSkge1xuICAgICAgICByZXR1cm4gQW1waG9yYWVBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlQWNjZXNzQ29udHJvbHNDcmVhdGVGb3JVc2VyKGlkLCB1c2VyQWNjZXNzUnVsZSwgb3B0aW9ucykodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHN1bW1hcnkgRGVsZXRlcyBhbiBBY2Nlc3MgQ29udHJvbCBvbiB0aGlzIEFtcGhvcmEuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJ1bGVJZCBUaGUgSWQgb2YgdGhlIHJ1bGUgdG8gZGVsZXRlLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgQW1waG9yYWVBcGlcbiAgICAgKi9cbiAgICBwdWJsaWMgYW1waG9yYWVBY2Nlc3NDb250cm9sc0RlbGV0ZShpZDogc3RyaW5nLCBydWxlSWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICByZXR1cm4gQW1waG9yYWVBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlQWNjZXNzQ29udHJvbHNEZWxldGUoaWQsIHJ1bGVJZCwgb3B0aW9ucykodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHN1bW1hcnkgR2V0cyB0aGUgXFwnZm9yIGFsbFxcJyBydWxlLCBpZiBpdCBleGlzdHMsIGVsc2UgYW4gZW1wdHkgMjAwLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgQW1waG9yYWVBcGlcbiAgICAgKi9cbiAgICBwdWJsaWMgYW1waG9yYWVBY2Nlc3NDb250cm9sc0dldEZvckFsbFJ1bGUoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICByZXR1cm4gQW1waG9yYWVBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlQWNjZXNzQ29udHJvbHNHZXRGb3JBbGxSdWxlKGlkLCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAc3VtbWFyeSBHZXRzIHRoZSBsaXN0IG9mIGFjY2VzcyBydWxlcyBhcHBsaWVkIHRvIG9yZ2FuaXNhdGlvbnMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBBbXBob3JhZUFwaVxuICAgICAqL1xuICAgIHB1YmxpYyBhbXBob3JhZUFjY2Vzc0NvbnRyb2xzR2V0T3JnYW5pc2F0aW9uUnVsZXMoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICByZXR1cm4gQW1waG9yYWVBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlQWNjZXNzQ29udHJvbHNHZXRPcmdhbmlzYXRpb25SdWxlcyhpZCwgb3B0aW9ucykodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHN1bW1hcnkgR2V0cyB0aGUgbGlzdCBvZiBhY2Nlc3MgcnVsZXMgYXBwbGllZCB0byB1c2Vycy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW1waG9yYSBJZC5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIEFtcGhvcmFlQXBpXG4gICAgICovXG4gICAgcHVibGljIGFtcGhvcmFlQWNjZXNzQ29udHJvbHNHZXRVc2VyUnVsZXMoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICByZXR1cm4gQW1waG9yYWVBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlQWNjZXNzQ29udHJvbHNHZXRVc2VyUnVsZXMoaWQsIG9wdGlvbnMpKHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYSBuZXcgZW1wdHkgQW1waG9yYSBpbiB0aGUgdXNlclxcJ3Mgb3JnYW5pc2F0aW9uLlxuICAgICAqIEBwYXJhbSB7Q3JlYXRlQW1waG9yYX0gY3JlYXRlQW1waG9yYSBJbmZvcm1hdGlvbiBmb3IgdGhlIG5ldyBBbXBob3JhLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgQW1waG9yYWVBcGlcbiAgICAgKi9cbiAgICBwdWJsaWMgYW1waG9yYWVDcmVhdGUoY3JlYXRlQW1waG9yYTogQ3JlYXRlQW1waG9yYSwgb3B0aW9ucz86IGFueSkge1xuICAgICAgICByZXR1cm4gQW1waG9yYWVBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlQ3JlYXRlKGNyZWF0ZUFtcGhvcmEsIG9wdGlvbnMpKHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBzdW1tYXJ5IERlbGV0ZXMgYW4gQW1waG9yYS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW1waG9yYSBJZC5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIEFtcGhvcmFlQXBpXG4gICAgICovXG4gICAgcHVibGljIGFtcGhvcmFlRGVsZXRlKGlkOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIEFtcGhvcmFlQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5hbXBob3JhZURlbGV0ZShpZCwgb3B0aW9ucykodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIGZpbGUuIFJldHVybnMgYSBibG9iIFVSTCB0byB1cGxvYWQgdG8uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGUgVGhlIG5hbWUgb2YgdGhlIGZpbGUuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBBbXBob3JhZUFwaVxuICAgICAqL1xuICAgIHB1YmxpYyBhbXBob3JhZUZpbGVzQ3JlYXRlRmlsZVJlcXVlc3QoaWQ6IHN0cmluZywgZmlsZTogc3RyaW5nLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBBbXBob3JhZUFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuYW1waG9yYWVGaWxlc0NyZWF0ZUZpbGVSZXF1ZXN0KGlkLCBmaWxlLCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAc3VtbWFyeSBHZXRzIHRoZSBjb250ZW50cyBvZiBhIGZpbGUuIFJldHVybnMgYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlIFRoZSBuYW1lIG9mIHRoZSBmaWxlLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgQW1waG9yYWVBcGlcbiAgICAgKi9cbiAgICBwdWJsaWMgYW1waG9yYWVGaWxlc0RlbGV0ZUZpbGUoaWQ6IHN0cmluZywgZmlsZTogc3RyaW5nLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBBbXBob3JhZUFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuYW1waG9yYWVGaWxlc0RlbGV0ZUZpbGUoaWQsIGZpbGUsIG9wdGlvbnMpKHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBzdW1tYXJ5IEdldHMgdGhlIGNvbnRlbnRzIG9mIGEgZmlsZS4gUmV0dXJucyBhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGUgVGhlIG5hbWUgb2YgdGhlIGZpbGUuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBBbXBob3JhZUFwaVxuICAgICAqL1xuICAgIHB1YmxpYyBhbXBob3JhZUZpbGVzRG93bmxvYWRGaWxlKGlkOiBzdHJpbmcsIGZpbGU6IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICByZXR1cm4gQW1waG9yYWVBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlRmlsZXNEb3dubG9hZEZpbGUoaWQsIGZpbGUsIG9wdGlvbnMpKHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBzdW1tYXJ5IExpc3RzIGFuIEFtcGhvcmFcXCdzIGZpbGVzLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3JkZXJCeV0gR2V0cyBvciBzZXRzIHRoZSB0aGUgb3JkZXJCeSBwYXJhbWV0ZXIuIE9wdGlvbnMgYXJlIEFscGhhYmV0aWNhbCBvciBMYXN0TW9kaWZpZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtwcmVmaXhdIEdldHMgb3Igc2V0cyBhIHByZWZpeCBmaWx0ZXIgZm9yIGFsbCBmaWxlIG5hbWVzLiBJcyBjYXNlIHNlbnNpdGl2ZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Rha2VdIEdldHMgb3Igc2V0cyBob3cgbWFueSBpdGVtcyB0byByZXR1cm4uIERlZmF1bHRzIHRvIDY0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2tpcF0gR2V0cyBvciBzZXRzIGhvdyBtYW55IGl0ZW1zIHRvIHNraXAgYmVmb3JlIHJldHVybmluZy4gRGVmYXVsdHMgdG8gMC5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIEFtcGhvcmFlQXBpXG4gICAgICovXG4gICAgcHVibGljIGFtcGhvcmFlRmlsZXNMaXN0RmlsZXMoaWQ6IHN0cmluZywgb3JkZXJCeT86IHN0cmluZywgcHJlZml4Pzogc3RyaW5nLCB0YWtlPzogbnVtYmVyLCBza2lwPzogbnVtYmVyLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBBbXBob3JhZUFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuYW1waG9yYWVGaWxlc0xpc3RGaWxlcyhpZCwgb3JkZXJCeSwgcHJlZml4LCB0YWtlLCBza2lwLCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAc3VtbWFyeSBRdWVyaWVzIGFuIEFtcGhvcmFcXCdzIGZpbGVzLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAqIEBwYXJhbSB7RmlsZVF1ZXJ5T3B0aW9uc30gZmlsZVF1ZXJ5T3B0aW9ucyBPcHRpb24gZm9yIHF1ZXJ5aW5nIHRoZSBmaWxlcy5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIEFtcGhvcmFlQXBpXG4gICAgICovXG4gICAgcHVibGljIGFtcGhvcmFlRmlsZXNRdWVyeUZpbGVzKGlkOiBzdHJpbmcsIGZpbGVRdWVyeU9wdGlvbnM6IEZpbGVRdWVyeU9wdGlvbnMsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIEFtcGhvcmFlQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5hbXBob3JhZUZpbGVzUXVlcnlGaWxlcyhpZCwgZmlsZVF1ZXJ5T3B0aW9ucywgb3B0aW9ucykodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHN1bW1hcnkgR2V0cyB0aGUgYXR0cmlidXRlcyBvZiBhIGZpbGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGUgVGhlIG5hbWUgb2YgdGhlIGZpbGUuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBBbXBob3JhZUFwaVxuICAgICAqL1xuICAgIHB1YmxpYyBhbXBob3JhZUZpbGVzUmVhZEZpbGVBdHRyaWJ1dGVzKGlkOiBzdHJpbmcsIGZpbGU6IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICByZXR1cm4gQW1waG9yYWVBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlRmlsZXNSZWFkRmlsZUF0dHJpYnV0ZXMoaWQsIGZpbGUsIG9wdGlvbnMpKHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZSBcbiAgICAgKiBAcGFyYW0ge3sgW2tleTogc3RyaW5nXTogc3RyaW5nOyB9fSByZXF1ZXN0Qm9keSBcbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIEFtcGhvcmFlQXBpXG4gICAgICovXG4gICAgcHVibGljIGFtcGhvcmFlRmlsZXNXcml0ZUZpbGVBdHRyaWJ1dGVzKGlkOiBzdHJpbmcsIGZpbGU6IHN0cmluZywgcmVxdWVzdEJvZHk6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nOyB9LCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBBbXBob3JhZUFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuYW1waG9yYWVGaWxlc1dyaXRlRmlsZUF0dHJpYnV0ZXMoaWQsIGZpbGUsIHJlcXVlc3RCb2R5LCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAc3VtbWFyeSBHZXRzIGEgbGlzdCBvZiBBbXBob3JhIGZvciB5b3Vyc2VsZiBvciB5b3VyIG9yZywgY3JlYXRlZCBvciBwdXJjaGFzZWQgYnkgeW91IChvciBvcmdhbmlzYXRpb24pLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc2NvcGVdIFxcJiMzOTtzZWxmXFwmIzM5OyBvciBcXCYjMzk7b3JnYW5pc2F0aW9uXFwmIzM5Oy4gRGVmYXVsdHMgdG8gc2VsZi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2FjY2Vzc1R5cGVdIFxcJiMzOTtjcmVhdGVkXFwmIzM5OyBvciBcXCYjMzk7cHVyY2hhc2VkXFwmIzM5Oy4gRGVmYXVsdHMgdG8gY3JlYXRlZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Rha2VdIEdldHMgb3Igc2V0cyBob3cgbWFueSBpdGVtcyB0byByZXR1cm4uIERlZmF1bHRzIHRvIDY0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2tpcF0gR2V0cyBvciBzZXRzIGhvdyBtYW55IGl0ZW1zIHRvIHNraXAgYmVmb3JlIHJldHVybmluZy4gRGVmYXVsdHMgdG8gMC5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIEFtcGhvcmFlQXBpXG4gICAgICovXG4gICAgcHVibGljIGFtcGhvcmFlTGlzdChzY29wZT86IHN0cmluZywgYWNjZXNzVHlwZT86IHN0cmluZywgdGFrZT86IG51bWJlciwgc2tpcD86IG51bWJlciwgb3B0aW9ucz86IGFueSkge1xuICAgICAgICByZXR1cm4gQW1waG9yYWVBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlTGlzdChzY29wZSwgYWNjZXNzVHlwZSwgdGFrZSwgc2tpcCwgb3B0aW9ucykodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHN1bW1hcnkgR2V0cyBkZXRhaWxzIG9mIGFuIEFtcGhvcmEgYnkgSWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBBbXBob3JhZUFwaVxuICAgICAqL1xuICAgIHB1YmxpYyBhbXBob3JhZVJlYWQoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICByZXR1cm4gQW1waG9yYWVBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlUmVhZChpZCwgb3B0aW9ucykodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHN1bW1hcnkgQXNzb2NpYXRlcyBhIHNpZ25hbCB3aXRoIGFuIEFtcGhvcmEuIFNpZ25hbCBpcyBjcmVhdGVkIGlmIG5vdCBleGlzdGluZy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW1waG9yYSBJZC5cbiAgICAgKiBAcGFyYW0ge0NyZWF0ZVNpZ25hbH0gY3JlYXRlU2lnbmFsIFNpZ25hbCBEZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgQW1waG9yYWVBcGlcbiAgICAgKi9cbiAgICBwdWJsaWMgYW1waG9yYWVTaWduYWxzQ3JlYXRlU2lnbmFsKGlkOiBzdHJpbmcsIGNyZWF0ZVNpZ25hbDogQ3JlYXRlU2lnbmFsLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBBbXBob3JhZUFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuYW1waG9yYWVTaWduYWxzQ3JlYXRlU2lnbmFsKGlkLCBjcmVhdGVTaWduYWwsIG9wdGlvbnMpKHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBzdW1tYXJ5IEdldHMgdGhlIHNpZ25hbHMgYXNzb2NpYXRlZCB3aXRoIGFuIEFtcGhvcmEuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5IFRoZSBuYW1lIG9yIGlkIG9mIHRoZSBzaWduYWwgcHJvcGVydHkuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBBbXBob3JhZUFwaVxuICAgICAqL1xuICAgIHB1YmxpYyBhbXBob3JhZVNpZ25hbHNHZXRTaWduYWwoaWQ6IHN0cmluZywgcHJvcGVydHk6IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICByZXR1cm4gQW1waG9yYWVBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlU2lnbmFsc0dldFNpZ25hbChpZCwgcHJvcGVydHksIG9wdGlvbnMpKHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBzdW1tYXJ5IEdldHMgdGhlIHNpZ25hbHMgYXNzb2NpYXRlZCB3aXRoIGFuIEFtcGhvcmEuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBBbXBob3JhZUFwaVxuICAgICAqL1xuICAgIHB1YmxpYyBhbXBob3JhZVNpZ25hbHNHZXRTaWduYWxzKGlkOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIEFtcGhvcmFlQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5hbXBob3JhZVNpZ25hbHNHZXRTaWduYWxzKGlkLCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAc3VtbWFyeSBBc3NvY2lhdGVzIGEgc2lnbmFsIHdpdGggYW4gQW1waG9yYS4gU2lnbmFsIGlzIGNyZWF0ZWQgaWYgbm90IGV4aXN0aW5nLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBBbXBob3JhIElkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzaWduYWxJZCBTaWduYWwgRGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge1VwZGF0ZVNpZ25hbH0gdXBkYXRlU2lnbmFsIFNpZ25hbCBwcm9wZXJ0aWVzIHRvIHVwZGF0ZS5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIEFtcGhvcmFlQXBpXG4gICAgICovXG4gICAgcHVibGljIGFtcGhvcmFlU2lnbmFsc1VwZGF0ZVNpZ25hbChpZDogc3RyaW5nLCBzaWduYWxJZDogc3RyaW5nLCB1cGRhdGVTaWduYWw6IFVwZGF0ZVNpZ25hbCwgb3B0aW9ucz86IGFueSkge1xuICAgICAgICByZXR1cm4gQW1waG9yYWVBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlU2lnbmFsc1VwZGF0ZVNpZ25hbChpZCwgc2lnbmFsSWQsIHVwZGF0ZVNpZ25hbCwgb3B0aW9ucykodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFxuICAgICAqIEBwYXJhbSB7eyBba2V5OiBzdHJpbmddOiBvYmplY3Q7IH19IHJlcXVlc3RCb2R5IFxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgQW1waG9yYWVBcGlcbiAgICAgKi9cbiAgICBwdWJsaWMgYW1waG9yYWVTaWduYWxzVXBsb2FkU2lnbmFsKGlkOiBzdHJpbmcsIHJlcXVlc3RCb2R5OiB7IFtrZXk6IHN0cmluZ106IG9iamVjdDsgfSwgb3B0aW9ucz86IGFueSkge1xuICAgICAgICByZXR1cm4gQW1waG9yYWVBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmFtcGhvcmFlU2lnbmFsc1VwbG9hZFNpZ25hbChpZCwgcmVxdWVzdEJvZHksIG9wdGlvbnMpKHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBcbiAgICAgKiBAcGFyYW0ge3sgW2tleTogc3RyaW5nXTogb2JqZWN0OyB9fSByZXF1ZXN0Qm9keSBcbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIEFtcGhvcmFlQXBpXG4gICAgICovXG4gICAgcHVibGljIGFtcGhvcmFlU2lnbmFsc1VwbG9hZFNpZ25hbDIoaWQ6IHN0cmluZywgcmVxdWVzdEJvZHk6IHsgW2tleTogc3RyaW5nXTogb2JqZWN0OyB9LCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBBbXBob3JhZUFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuYW1waG9yYWVTaWduYWxzVXBsb2FkU2lnbmFsMihpZCwgcmVxdWVzdEJvZHksIG9wdGlvbnMpKHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBcbiAgICAgKiBAcGFyYW0ge0FycmF5PHsgW2tleTogc3RyaW5nXTogb2JqZWN0OyB9Pn0gcmVxdWVzdEJvZHkgXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBBbXBob3JhZUFwaVxuICAgICAqL1xuICAgIHB1YmxpYyBhbXBob3JhZVNpZ25hbHNVcGxvYWRTaWduYWxCYXRjaChpZDogc3RyaW5nLCByZXF1ZXN0Qm9keTogQXJyYXk8eyBba2V5OiBzdHJpbmddOiBvYmplY3Q7IH0+LCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBBbXBob3JhZUFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuYW1waG9yYWVTaWduYWxzVXBsb2FkU2lnbmFsQmF0Y2goaWQsIHJlcXVlc3RCb2R5LCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgXG4gICAgICogQHBhcmFtIHtBcnJheTx7IFtrZXk6IHN0cmluZ106IG9iamVjdDsgfT59IHJlcXVlc3RCb2R5IFxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgQW1waG9yYWVBcGlcbiAgICAgKi9cbiAgICBwdWJsaWMgYW1waG9yYWVTaWduYWxzVXBsb2FkU2lnbmFsQmF0Y2gyKGlkOiBzdHJpbmcsIHJlcXVlc3RCb2R5OiBBcnJheTx7IFtrZXk6IHN0cmluZ106IG9iamVjdDsgfT4sIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIEFtcGhvcmFlQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5hbXBob3JhZVNpZ25hbHNVcGxvYWRTaWduYWxCYXRjaDIoaWQsIHJlcXVlc3RCb2R5LCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAc3VtbWFyeSBVcGRhdGVzIHRoZSBkZXRhaWxzIG9mIGFuIEFtcGhvcmEgYnkgSWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIEFtcGhvcmEgSWQuXG4gICAgICogQHBhcmFtIHtFZGl0QW1waG9yYX0gZWRpdEFtcGhvcmEgSW5mb3JtYXRpb24gdG8gdXBkYXRlLiBOdWxscyBhcmUgTk9UIGlnbm9yZWQuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBBbXBob3JhZUFwaVxuICAgICAqL1xuICAgIHB1YmxpYyBhbXBob3JhZVVwZGF0ZShpZDogc3RyaW5nLCBlZGl0QW1waG9yYTogRWRpdEFtcGhvcmEsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIEFtcGhvcmFlQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5hbXBob3JhZVVwZGF0ZShpZCwgZWRpdEFtcGhvcmEsIG9wdGlvbnMpKHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBzdW1tYXJ5IFB1cmNoYXNlcyBhbiBBbXBob3JhIGFzIHRoZSBsb2dnZWQgaW4gdXNlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW1waG9yYSBJZC5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIEFtcGhvcmFlQXBpXG4gICAgICovXG4gICAgcHVibGljIHB1cmNoYXNlc1B1cmNoYXNlKGlkOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIEFtcGhvcmFlQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5wdXJjaGFzZXNQdXJjaGFzZShpZCwgb3B0aW9ucykodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCk7XG4gICAgfVxuXG59XG5cblxuLyoqXG4gKiBBcHBsaWNhdGlvbnNBcGkgLSBheGlvcyBwYXJhbWV0ZXIgY3JlYXRvclxuICogQGV4cG9ydFxuICovXG5leHBvcnQgY29uc3QgQXBwbGljYXRpb25zQXBpQXhpb3NQYXJhbUNyZWF0b3IgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbj86IENvbmZpZ3VyYXRpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYSBuZXcgYXBwbGljYXRpb24uIEFwcGxpY2F0aW9ucyBhcmUgZXh0ZXJuYWwgd2Vic2l0ZXMgdGhhdCBBbXBob3JhIHVzZXJzIGNhbiBzaWduIGluIHRvLlxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZUFwcGxpY2F0aW9ufSBjcmVhdGVBcHBsaWNhdGlvbiBBbiBhcHBsaWNhdGlvbiB0byBjcmVhdGUuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhcHBsaWNhdGlvbnNDcmVhdGVBcHBsaWNhdGlvbihjcmVhdGVBcHBsaWNhdGlvbjogQ3JlYXRlQXBwbGljYXRpb24sIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnY3JlYXRlQXBwbGljYXRpb24nIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGNyZWF0ZUFwcGxpY2F0aW9uID09PSBudWxsIHx8IGNyZWF0ZUFwcGxpY2F0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignY3JlYXRlQXBwbGljYXRpb24nLCdSZXF1aXJlZCBwYXJhbWV0ZXIgY3JlYXRlQXBwbGljYXRpb24gd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhcHBsaWNhdGlvbnNDcmVhdGVBcHBsaWNhdGlvbi4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL2FwcGxpY2F0aW9uc2A7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IGdsb2JhbEltcG9ydFVybC5wYXJzZShsb2NhbFZhclBhdGgsIHRydWUpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0geyBtZXRob2Q6ICdQT1NUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcbiAgICAgICAgICAgIGNvbnN0IG5lZWRzU2VyaWFsaXphdGlvbiA9ICh0eXBlb2YgY3JlYXRlQXBwbGljYXRpb24gIT09IFwic3RyaW5nXCIpIHx8IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPT09ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuZGF0YSA9ICBuZWVkc1NlcmlhbGl6YXRpb24gPyBKU09OLnN0cmluZ2lmeShjcmVhdGVBcHBsaWNhdGlvbiAhPT0gdW5kZWZpbmVkID8gY3JlYXRlQXBwbGljYXRpb24gOiB7fSkgOiAoY3JlYXRlQXBwbGljYXRpb24gfHwgXCJcIik7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBnbG9iYWxJbXBvcnRVcmwuZm9ybWF0KGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBEZWxldGVzIGFuIGFwcGxpY2F0aW9uLiBNdXN0IGJlIGRvbmUgYnkgYW4gT3JnYW5pc2F0aW9uIGFkbWluaXN0cmF0b3IuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgYXBwbGljYXRpb24gaWQgdG8gZGVsZXRlLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYXBwbGljYXRpb25zRGVsZXRlQXBwbGljYXRpb24oaWQ6IHN0cmluZywgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdpZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAoaWQgPT09IG51bGwgfHwgaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdpZCcsJ1JlcXVpcmVkIHBhcmFtZXRlciBpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFwcGxpY2F0aW9uc0RlbGV0ZUFwcGxpY2F0aW9uLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9hcGkvYXBwbGljYXRpb25zL3tpZH1gXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoYHske1wiaWRcIn19YCwgZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhpZCkpKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gZ2xvYmFsSW1wb3J0VXJsLnBhcnNlKGxvY2FsVmFyUGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSB7IG1ldGhvZDogJ0RFTEVURScsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG5cbiAgICBcbiAgICAgICAgICAgIGxvY2FsVmFyVXJsT2JqLnF1ZXJ5ID0gey4uLmxvY2FsVmFyVXJsT2JqLnF1ZXJ5LCAuLi5sb2NhbFZhclF1ZXJ5UGFyYW1ldGVyLCAuLi5vcHRpb25zLnF1ZXJ5fTtcbiAgICAgICAgICAgIC8vIGZpeCBvdmVycmlkZSBxdWVyeSBzdHJpbmcgRGV0YWlsOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzUxNzY3My8xMDc3OTQzXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxWYXJVcmxPYmouc2VhcmNoO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gey4uLmxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCAuLi5vcHRpb25zLmhlYWRlcnN9O1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogZ2xvYmFsSW1wb3J0VXJsLmZvcm1hdChsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgR2V0cyBhbGwgYXBwbGljYXRpb25zIGEgdXNlciBoYXMgYWNjZXNzIHRvLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYXBwbGljYXRpb25zR2V0QXBwbGljYXRpb25zKG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9hcGkvYXBwbGljYXRpb25zYDtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gZ2xvYmFsSW1wb3J0VXJsLnBhcnNlKGxvY2FsVmFyUGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSB7IG1ldGhvZDogJ0dFVCcsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG5cbiAgICBcbiAgICAgICAgICAgIGxvY2FsVmFyVXJsT2JqLnF1ZXJ5ID0gey4uLmxvY2FsVmFyVXJsT2JqLnF1ZXJ5LCAuLi5sb2NhbFZhclF1ZXJ5UGFyYW1ldGVyLCAuLi5vcHRpb25zLnF1ZXJ5fTtcbiAgICAgICAgICAgIC8vIGZpeCBvdmVycmlkZSBxdWVyeSBzdHJpbmcgRGV0YWlsOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzUxNzY3My8xMDc3OTQzXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxWYXJVcmxPYmouc2VhcmNoO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gey4uLmxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCAuLi5vcHRpb25zLmhlYWRlcnN9O1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogZ2xvYmFsSW1wb3J0VXJsLmZvcm1hdChsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgR2V0cyBhbiBhcHBsaWNhdGlvbiBieSBJZCwgaWYgaXQgZXhpc3RzLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGlkIG9mIHRoZSBhcHBsaWNhdGlvbiB0byBnZXQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhcHBsaWNhdGlvbnNSZWFkQXBwbGljYXRpb24oaWQ6IHN0cmluZywgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdpZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAoaWQgPT09IG51bGwgfHwgaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdpZCcsJ1JlcXVpcmVkIHBhcmFtZXRlciBpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGFwcGxpY2F0aW9uc1JlYWRBcHBsaWNhdGlvbi4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL2FwcGxpY2F0aW9ucy97aWR9YFxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcImlkXCJ9fWAsIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaWQpKSk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IGdsb2JhbEltcG9ydFVybC5wYXJzZShsb2NhbFZhclBhdGgsIHRydWUpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0geyBtZXRob2Q6ICdHRVQnLCAuLi5iYXNlT3B0aW9ucywgLi4ub3B0aW9uc307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9IGFzIGFueTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG5cbiAgICAgICAgICAgIC8vIGF1dGhlbnRpY2F0aW9uIEJlYXJlciByZXF1aXJlZFxuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5hcGlLZXkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckFwaUtleVZhbHVlID0gdHlwZW9mIGNvbmZpZ3VyYXRpb24uYXBpS2V5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgID8gY29uZmlndXJhdGlvbi5hcGlLZXkoXCJBdXRob3JpemF0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgIDogY29uZmlndXJhdGlvbi5hcGlLZXk7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbXCJBdXRob3JpemF0aW9uXCJdID0gbG9jYWxWYXJBcGlLZXlWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IFVwZGF0ZXMgYW4gYXBwbGljYXRpb24gYnkgSWQsIGlmIGl0IGV4aXN0cy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBpZCBvZiB0aGUgYXBwbGljYXRpb24gdG8gdXBkYXRlLlxuICAgICAgICAgKiBAcGFyYW0ge1VwZGF0ZUFwcGxpY2F0aW9ufSB1cGRhdGVBcHBsaWNhdGlvbiBUaGUgaW5mb3JtYXRpb24gdG8gdXBkYXRlIChvbGQgbG9jYXRpb25zIHdpbGwgYmUgZGVsZXRlZCkuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhcHBsaWNhdGlvbnNVcGRhdGVBcHBsaWNhdGlvbihpZDogc3RyaW5nLCB1cGRhdGVBcHBsaWNhdGlvbjogVXBkYXRlQXBwbGljYXRpb24sIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnaWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGlkID09PSBudWxsIHx8IGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignaWQnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgaWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhcHBsaWNhdGlvbnNVcGRhdGVBcHBsaWNhdGlvbi4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ3VwZGF0ZUFwcGxpY2F0aW9uJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGlmICh1cGRhdGVBcHBsaWNhdGlvbiA9PT0gbnVsbCB8fCB1cGRhdGVBcHBsaWNhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVpcmVkRXJyb3IoJ3VwZGF0ZUFwcGxpY2F0aW9uJywnUmVxdWlyZWQgcGFyYW1ldGVyIHVwZGF0ZUFwcGxpY2F0aW9uIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgYXBwbGljYXRpb25zVXBkYXRlQXBwbGljYXRpb24uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS9hcHBsaWNhdGlvbnMve2lkfWBcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJpZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGlkKSkpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnUFVUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcbiAgICAgICAgICAgIGNvbnN0IG5lZWRzU2VyaWFsaXphdGlvbiA9ICh0eXBlb2YgdXBkYXRlQXBwbGljYXRpb24gIT09IFwic3RyaW5nXCIpIHx8IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPT09ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuZGF0YSA9ICBuZWVkc1NlcmlhbGl6YXRpb24gPyBKU09OLnN0cmluZ2lmeSh1cGRhdGVBcHBsaWNhdGlvbiAhPT0gdW5kZWZpbmVkID8gdXBkYXRlQXBwbGljYXRpb24gOiB7fSkgOiAodXBkYXRlQXBwbGljYXRpb24gfHwgXCJcIik7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBnbG9iYWxJbXBvcnRVcmwuZm9ybWF0KGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9XG59O1xuXG4vKipcbiAqIEFwcGxpY2F0aW9uc0FwaSAtIGZ1bmN0aW9uYWwgcHJvZ3JhbW1pbmcgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydCBjb25zdCBBcHBsaWNhdGlvbnNBcGlGcCA9IGZ1bmN0aW9uKGNvbmZpZ3VyYXRpb24/OiBDb25maWd1cmF0aW9uKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgbmV3IGFwcGxpY2F0aW9uLiBBcHBsaWNhdGlvbnMgYXJlIGV4dGVybmFsIHdlYnNpdGVzIHRoYXQgQW1waG9yYSB1c2VycyBjYW4gc2lnbiBpbiB0by5cbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVBcHBsaWNhdGlvbn0gY3JlYXRlQXBwbGljYXRpb24gQW4gYXBwbGljYXRpb24gdG8gY3JlYXRlLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYXBwbGljYXRpb25zQ3JlYXRlQXBwbGljYXRpb24oY3JlYXRlQXBwbGljYXRpb246IENyZWF0ZUFwcGxpY2F0aW9uLCBvcHRpb25zPzogYW55KTogKGF4aW9zPzogQXhpb3NJbnN0YW5jZSwgYmFzZVBhdGg/OiBzdHJpbmcpID0+IEF4aW9zUHJvbWlzZTxBcHBsaWNhdGlvbj4ge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSBBcHBsaWNhdGlvbnNBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS5hcHBsaWNhdGlvbnNDcmVhdGVBcHBsaWNhdGlvbihjcmVhdGVBcHBsaWNhdGlvbiwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gKGF4aW9zOiBBeGlvc0luc3RhbmNlID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoOiBzdHJpbmcgPSBCQVNFX1BBVEgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlvc1JlcXVlc3RBcmdzID0gey4uLmxvY2FsVmFyQXhpb3NBcmdzLm9wdGlvbnMsIHVybDogYmFzZVBhdGggKyBsb2NhbFZhckF4aW9zQXJncy51cmx9O1xuICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5yZXF1ZXN0KGF4aW9zUmVxdWVzdEFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBEZWxldGVzIGFuIGFwcGxpY2F0aW9uLiBNdXN0IGJlIGRvbmUgYnkgYW4gT3JnYW5pc2F0aW9uIGFkbWluaXN0cmF0b3IuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgYXBwbGljYXRpb24gaWQgdG8gZGVsZXRlLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYXBwbGljYXRpb25zRGVsZXRlQXBwbGljYXRpb24oaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8QXBwbGljYXRpb24+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gQXBwbGljYXRpb25zQXBpQXhpb3NQYXJhbUNyZWF0b3IoY29uZmlndXJhdGlvbikuYXBwbGljYXRpb25zRGVsZXRlQXBwbGljYXRpb24oaWQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgR2V0cyBhbGwgYXBwbGljYXRpb25zIGEgdXNlciBoYXMgYWNjZXNzIHRvLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYXBwbGljYXRpb25zR2V0QXBwbGljYXRpb25zKG9wdGlvbnM/OiBhbnkpOiAoYXhpb3M/OiBBeGlvc0luc3RhbmNlLCBiYXNlUGF0aD86IHN0cmluZykgPT4gQXhpb3NQcm9taXNlPENvbGxlY3Rpb25SZXNwb25zZU9mQXBwbGljYXRpb24+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gQXBwbGljYXRpb25zQXBpQXhpb3NQYXJhbUNyZWF0b3IoY29uZmlndXJhdGlvbikuYXBwbGljYXRpb25zR2V0QXBwbGljYXRpb25zKG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgR2V0cyBhbiBhcHBsaWNhdGlvbiBieSBJZCwgaWYgaXQgZXhpc3RzLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGlkIG9mIHRoZSBhcHBsaWNhdGlvbiB0byBnZXQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhcHBsaWNhdGlvbnNSZWFkQXBwbGljYXRpb24oaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8QXBwbGljYXRpb24+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gQXBwbGljYXRpb25zQXBpQXhpb3NQYXJhbUNyZWF0b3IoY29uZmlndXJhdGlvbikuYXBwbGljYXRpb25zUmVhZEFwcGxpY2F0aW9uKGlkLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IFVwZGF0ZXMgYW4gYXBwbGljYXRpb24gYnkgSWQsIGlmIGl0IGV4aXN0cy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBpZCBvZiB0aGUgYXBwbGljYXRpb24gdG8gdXBkYXRlLlxuICAgICAgICAgKiBAcGFyYW0ge1VwZGF0ZUFwcGxpY2F0aW9ufSB1cGRhdGVBcHBsaWNhdGlvbiBUaGUgaW5mb3JtYXRpb24gdG8gdXBkYXRlIChvbGQgbG9jYXRpb25zIHdpbGwgYmUgZGVsZXRlZCkuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhcHBsaWNhdGlvbnNVcGRhdGVBcHBsaWNhdGlvbihpZDogc3RyaW5nLCB1cGRhdGVBcHBsaWNhdGlvbjogVXBkYXRlQXBwbGljYXRpb24sIG9wdGlvbnM/OiBhbnkpOiAoYXhpb3M/OiBBeGlvc0luc3RhbmNlLCBiYXNlUGF0aD86IHN0cmluZykgPT4gQXhpb3NQcm9taXNlPEFwcGxpY2F0aW9uPiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IEFwcGxpY2F0aW9uc0FwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLmFwcGxpY2F0aW9uc1VwZGF0ZUFwcGxpY2F0aW9uKGlkLCB1cGRhdGVBcHBsaWNhdGlvbiwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gKGF4aW9zOiBBeGlvc0luc3RhbmNlID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoOiBzdHJpbmcgPSBCQVNFX1BBVEgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlvc1JlcXVlc3RBcmdzID0gey4uLmxvY2FsVmFyQXhpb3NBcmdzLm9wdGlvbnMsIHVybDogYmFzZVBhdGggKyBsb2NhbFZhckF4aW9zQXJncy51cmx9O1xuICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5yZXF1ZXN0KGF4aW9zUmVxdWVzdEFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9XG59O1xuXG4vKipcbiAqIEFwcGxpY2F0aW9uc0FwaSAtIGZhY3RvcnkgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydCBjb25zdCBBcHBsaWNhdGlvbnNBcGlGYWN0b3J5ID0gZnVuY3Rpb24gKGNvbmZpZ3VyYXRpb24/OiBDb25maWd1cmF0aW9uLCBiYXNlUGF0aD86IHN0cmluZywgYXhpb3M/OiBBeGlvc0luc3RhbmNlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgbmV3IGFwcGxpY2F0aW9uLiBBcHBsaWNhdGlvbnMgYXJlIGV4dGVybmFsIHdlYnNpdGVzIHRoYXQgQW1waG9yYSB1c2VycyBjYW4gc2lnbiBpbiB0by5cbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVBcHBsaWNhdGlvbn0gY3JlYXRlQXBwbGljYXRpb24gQW4gYXBwbGljYXRpb24gdG8gY3JlYXRlLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYXBwbGljYXRpb25zQ3JlYXRlQXBwbGljYXRpb24oY3JlYXRlQXBwbGljYXRpb246IENyZWF0ZUFwcGxpY2F0aW9uLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gQXBwbGljYXRpb25zQXBpRnAoY29uZmlndXJhdGlvbikuYXBwbGljYXRpb25zQ3JlYXRlQXBwbGljYXRpb24oY3JlYXRlQXBwbGljYXRpb24sIG9wdGlvbnMpKGF4aW9zLCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgRGVsZXRlcyBhbiBhcHBsaWNhdGlvbi4gTXVzdCBiZSBkb25lIGJ5IGFuIE9yZ2FuaXNhdGlvbiBhZG1pbmlzdHJhdG9yLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGFwcGxpY2F0aW9uIGlkIHRvIGRlbGV0ZS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFwcGxpY2F0aW9uc0RlbGV0ZUFwcGxpY2F0aW9uKGlkOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBBcHBsaWNhdGlvbnNBcGlGcChjb25maWd1cmF0aW9uKS5hcHBsaWNhdGlvbnNEZWxldGVBcHBsaWNhdGlvbihpZCwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIGFsbCBhcHBsaWNhdGlvbnMgYSB1c2VyIGhhcyBhY2Nlc3MgdG8uXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhcHBsaWNhdGlvbnNHZXRBcHBsaWNhdGlvbnMob3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIEFwcGxpY2F0aW9uc0FwaUZwKGNvbmZpZ3VyYXRpb24pLmFwcGxpY2F0aW9uc0dldEFwcGxpY2F0aW9ucyhvcHRpb25zKShheGlvcywgYmFzZVBhdGgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgYW4gYXBwbGljYXRpb24gYnkgSWQsIGlmIGl0IGV4aXN0cy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBpZCBvZiB0aGUgYXBwbGljYXRpb24gdG8gZ2V0LlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYXBwbGljYXRpb25zUmVhZEFwcGxpY2F0aW9uKGlkOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBBcHBsaWNhdGlvbnNBcGlGcChjb25maWd1cmF0aW9uKS5hcHBsaWNhdGlvbnNSZWFkQXBwbGljYXRpb24oaWQsIG9wdGlvbnMpKGF4aW9zLCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgVXBkYXRlcyBhbiBhcHBsaWNhdGlvbiBieSBJZCwgaWYgaXQgZXhpc3RzLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGlkIG9mIHRoZSBhcHBsaWNhdGlvbiB0byB1cGRhdGUuXG4gICAgICAgICAqIEBwYXJhbSB7VXBkYXRlQXBwbGljYXRpb259IHVwZGF0ZUFwcGxpY2F0aW9uIFRoZSBpbmZvcm1hdGlvbiB0byB1cGRhdGUgKG9sZCBsb2NhdGlvbnMgd2lsbCBiZSBkZWxldGVkKS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFwcGxpY2F0aW9uc1VwZGF0ZUFwcGxpY2F0aW9uKGlkOiBzdHJpbmcsIHVwZGF0ZUFwcGxpY2F0aW9uOiBVcGRhdGVBcHBsaWNhdGlvbiwgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIEFwcGxpY2F0aW9uc0FwaUZwKGNvbmZpZ3VyYXRpb24pLmFwcGxpY2F0aW9uc1VwZGF0ZUFwcGxpY2F0aW9uKGlkLCB1cGRhdGVBcHBsaWNhdGlvbiwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICB9O1xufTtcblxuLyoqXG4gKiBBcHBsaWNhdGlvbnNBcGkgLSBvYmplY3Qtb3JpZW50ZWQgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgQXBwbGljYXRpb25zQXBpXG4gKiBAZXh0ZW5kcyB7QmFzZUFQSX1cbiAqL1xuZXhwb3J0IGNsYXNzIEFwcGxpY2F0aW9uc0FwaSBleHRlbmRzIEJhc2VBUEkge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYSBuZXcgYXBwbGljYXRpb24uIEFwcGxpY2F0aW9ucyBhcmUgZXh0ZXJuYWwgd2Vic2l0ZXMgdGhhdCBBbXBob3JhIHVzZXJzIGNhbiBzaWduIGluIHRvLlxuICAgICAqIEBwYXJhbSB7Q3JlYXRlQXBwbGljYXRpb259IGNyZWF0ZUFwcGxpY2F0aW9uIEFuIGFwcGxpY2F0aW9uIHRvIGNyZWF0ZS5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIEFwcGxpY2F0aW9uc0FwaVxuICAgICAqL1xuICAgIHB1YmxpYyBhcHBsaWNhdGlvbnNDcmVhdGVBcHBsaWNhdGlvbihjcmVhdGVBcHBsaWNhdGlvbjogQ3JlYXRlQXBwbGljYXRpb24sIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIEFwcGxpY2F0aW9uc0FwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuYXBwbGljYXRpb25zQ3JlYXRlQXBwbGljYXRpb24oY3JlYXRlQXBwbGljYXRpb24sIG9wdGlvbnMpKHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBzdW1tYXJ5IERlbGV0ZXMgYW4gYXBwbGljYXRpb24uIE11c3QgYmUgZG9uZSBieSBhbiBPcmdhbmlzYXRpb24gYWRtaW5pc3RyYXRvci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGFwcGxpY2F0aW9uIGlkIHRvIGRlbGV0ZS5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIEFwcGxpY2F0aW9uc0FwaVxuICAgICAqL1xuICAgIHB1YmxpYyBhcHBsaWNhdGlvbnNEZWxldGVBcHBsaWNhdGlvbihpZDogc3RyaW5nLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBBcHBsaWNhdGlvbnNBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmFwcGxpY2F0aW9uc0RlbGV0ZUFwcGxpY2F0aW9uKGlkLCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAc3VtbWFyeSBHZXRzIGFsbCBhcHBsaWNhdGlvbnMgYSB1c2VyIGhhcyBhY2Nlc3MgdG8uXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBBcHBsaWNhdGlvbnNBcGlcbiAgICAgKi9cbiAgICBwdWJsaWMgYXBwbGljYXRpb25zR2V0QXBwbGljYXRpb25zKG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIEFwcGxpY2F0aW9uc0FwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuYXBwbGljYXRpb25zR2V0QXBwbGljYXRpb25zKG9wdGlvbnMpKHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBzdW1tYXJ5IEdldHMgYW4gYXBwbGljYXRpb24gYnkgSWQsIGlmIGl0IGV4aXN0cy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGlkIG9mIHRoZSBhcHBsaWNhdGlvbiB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBBcHBsaWNhdGlvbnNBcGlcbiAgICAgKi9cbiAgICBwdWJsaWMgYXBwbGljYXRpb25zUmVhZEFwcGxpY2F0aW9uKGlkOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIEFwcGxpY2F0aW9uc0FwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuYXBwbGljYXRpb25zUmVhZEFwcGxpY2F0aW9uKGlkLCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAc3VtbWFyeSBVcGRhdGVzIGFuIGFwcGxpY2F0aW9uIGJ5IElkLCBpZiBpdCBleGlzdHMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBpZCBvZiB0aGUgYXBwbGljYXRpb24gdG8gdXBkYXRlLlxuICAgICAqIEBwYXJhbSB7VXBkYXRlQXBwbGljYXRpb259IHVwZGF0ZUFwcGxpY2F0aW9uIFRoZSBpbmZvcm1hdGlvbiB0byB1cGRhdGUgKG9sZCBsb2NhdGlvbnMgd2lsbCBiZSBkZWxldGVkKS5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIEFwcGxpY2F0aW9uc0FwaVxuICAgICAqL1xuICAgIHB1YmxpYyBhcHBsaWNhdGlvbnNVcGRhdGVBcHBsaWNhdGlvbihpZDogc3RyaW5nLCB1cGRhdGVBcHBsaWNhdGlvbjogVXBkYXRlQXBwbGljYXRpb24sIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIEFwcGxpY2F0aW9uc0FwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuYXBwbGljYXRpb25zVXBkYXRlQXBwbGljYXRpb24oaWQsIHVwZGF0ZUFwcGxpY2F0aW9uLCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbn1cblxuXG4vKipcbiAqIEF1dGhlbnRpY2F0aW9uQXBpIC0gYXhpb3MgcGFyYW1ldGVyIGNyZWF0b3JcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0IGNvbnN0IEF1dGhlbnRpY2F0aW9uQXBpQXhpb3NQYXJhbUNyZWF0b3IgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbj86IENvbmZpZ3VyYXRpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IFJldHVybnMgYSBKV1QgKEpTT04gV2ViIFRva2VuKS4gICAgICAgICAgICAgXG4gICAgICAgICAqIEBwYXJhbSB7TG9naW5SZXF1ZXN0fSBsb2dpblJlcXVlc3QgVG9rZW4gUmVxdWVzdCBQYXJhbWV0ZXJzLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYXV0aGVudGljYXRpb25SZXF1ZXN0VG9rZW4obG9naW5SZXF1ZXN0OiBMb2dpblJlcXVlc3QsIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnbG9naW5SZXF1ZXN0JyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGlmIChsb2dpblJlcXVlc3QgPT09IG51bGwgfHwgbG9naW5SZXF1ZXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignbG9naW5SZXF1ZXN0JywnUmVxdWlyZWQgcGFyYW1ldGVyIGxvZ2luUmVxdWVzdCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGF1dGhlbnRpY2F0aW9uUmVxdWVzdFRva2VuLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9hcGkvYXV0aGVudGljYXRpb24vcmVxdWVzdGA7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IGdsb2JhbEltcG9ydFVybC5wYXJzZShsb2NhbFZhclBhdGgsIHRydWUpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0geyBtZXRob2Q6ICdQT1NUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcbiAgICAgICAgICAgIGNvbnN0IG5lZWRzU2VyaWFsaXphdGlvbiA9ICh0eXBlb2YgbG9naW5SZXF1ZXN0ICE9PSBcInN0cmluZ1wiKSB8fCBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID09PSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmRhdGEgPSAgbmVlZHNTZXJpYWxpemF0aW9uID8gSlNPTi5zdHJpbmdpZnkobG9naW5SZXF1ZXN0ICE9PSB1bmRlZmluZWQgPyBsb2dpblJlcXVlc3QgOiB7fSkgOiAobG9naW5SZXF1ZXN0IHx8IFwiXCIpO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogZ2xvYmFsSW1wb3J0VXJsLmZvcm1hdChsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfVxufTtcblxuLyoqXG4gKiBBdXRoZW50aWNhdGlvbkFwaSAtIGZ1bmN0aW9uYWwgcHJvZ3JhbW1pbmcgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydCBjb25zdCBBdXRoZW50aWNhdGlvbkFwaUZwID0gZnVuY3Rpb24oY29uZmlndXJhdGlvbj86IENvbmZpZ3VyYXRpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IFJldHVybnMgYSBKV1QgKEpTT04gV2ViIFRva2VuKS4gICAgICAgICAgICAgXG4gICAgICAgICAqIEBwYXJhbSB7TG9naW5SZXF1ZXN0fSBsb2dpblJlcXVlc3QgVG9rZW4gUmVxdWVzdCBQYXJhbWV0ZXJzLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYXV0aGVudGljYXRpb25SZXF1ZXN0VG9rZW4obG9naW5SZXF1ZXN0OiBMb2dpblJlcXVlc3QsIG9wdGlvbnM/OiBhbnkpOiAoYXhpb3M/OiBBeGlvc0luc3RhbmNlLCBiYXNlUGF0aD86IHN0cmluZykgPT4gQXhpb3NQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSBBdXRoZW50aWNhdGlvbkFwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLmF1dGhlbnRpY2F0aW9uUmVxdWVzdFRva2VuKGxvZ2luUmVxdWVzdCwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gKGF4aW9zOiBBeGlvc0luc3RhbmNlID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoOiBzdHJpbmcgPSBCQVNFX1BBVEgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlvc1JlcXVlc3RBcmdzID0gey4uLmxvY2FsVmFyQXhpb3NBcmdzLm9wdGlvbnMsIHVybDogYmFzZVBhdGggKyBsb2NhbFZhckF4aW9zQXJncy51cmx9O1xuICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5yZXF1ZXN0KGF4aW9zUmVxdWVzdEFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9XG59O1xuXG4vKipcbiAqIEF1dGhlbnRpY2F0aW9uQXBpIC0gZmFjdG9yeSBpbnRlcmZhY2VcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0IGNvbnN0IEF1dGhlbnRpY2F0aW9uQXBpRmFjdG9yeSA9IGZ1bmN0aW9uIChjb25maWd1cmF0aW9uPzogQ29uZmlndXJhdGlvbiwgYmFzZVBhdGg/OiBzdHJpbmcsIGF4aW9zPzogQXhpb3NJbnN0YW5jZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgUmV0dXJucyBhIEpXVCAoSlNPTiBXZWIgVG9rZW4pLiAgICAgICAgICAgICBcbiAgICAgICAgICogQHBhcmFtIHtMb2dpblJlcXVlc3R9IGxvZ2luUmVxdWVzdCBUb2tlbiBSZXF1ZXN0IFBhcmFtZXRlcnMuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhdXRoZW50aWNhdGlvblJlcXVlc3RUb2tlbihsb2dpblJlcXVlc3Q6IExvZ2luUmVxdWVzdCwgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIEF1dGhlbnRpY2F0aW9uQXBpRnAoY29uZmlndXJhdGlvbikuYXV0aGVudGljYXRpb25SZXF1ZXN0VG9rZW4obG9naW5SZXF1ZXN0LCBvcHRpb25zKShheGlvcywgYmFzZVBhdGgpO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuXG4vKipcbiAqIEF1dGhlbnRpY2F0aW9uQXBpIC0gb2JqZWN0LW9yaWVudGVkIGludGVyZmFjZVxuICogQGV4cG9ydFxuICogQGNsYXNzIEF1dGhlbnRpY2F0aW9uQXBpXG4gKiBAZXh0ZW5kcyB7QmFzZUFQSX1cbiAqL1xuZXhwb3J0IGNsYXNzIEF1dGhlbnRpY2F0aW9uQXBpIGV4dGVuZHMgQmFzZUFQSSB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHN1bW1hcnkgUmV0dXJucyBhIEpXVCAoSlNPTiBXZWIgVG9rZW4pLiAgICAgICAgICAgICBcbiAgICAgKiBAcGFyYW0ge0xvZ2luUmVxdWVzdH0gbG9naW5SZXF1ZXN0IFRva2VuIFJlcXVlc3QgUGFyYW1ldGVycy5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIEF1dGhlbnRpY2F0aW9uQXBpXG4gICAgICovXG4gICAgcHVibGljIGF1dGhlbnRpY2F0aW9uUmVxdWVzdFRva2VuKGxvZ2luUmVxdWVzdDogTG9naW5SZXF1ZXN0LCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBBdXRoZW50aWNhdGlvbkFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuYXV0aGVudGljYXRpb25SZXF1ZXN0VG9rZW4obG9naW5SZXF1ZXN0LCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbn1cblxuXG4vKipcbiAqIEZlZWRzQXBpIC0gYXhpb3MgcGFyYW1ldGVyIGNyZWF0b3JcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0IGNvbnN0IEZlZWRzQXBpQXhpb3NQYXJhbUNyZWF0b3IgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbj86IENvbmZpZ3VyYXRpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgdGhlIGZlZWQgZm9yIHRoZSBsb2dnZWQgaW4gdXNlci5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGZlZWRHZXRGZWVkKG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9hcGkvZmVlZHMvdjFgO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnR0VUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBnbG9iYWxJbXBvcnRVcmwuZm9ybWF0KGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9XG59O1xuXG4vKipcbiAqIEZlZWRzQXBpIC0gZnVuY3Rpb25hbCBwcm9ncmFtbWluZyBpbnRlcmZhY2VcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0IGNvbnN0IEZlZWRzQXBpRnAgPSBmdW5jdGlvbihjb25maWd1cmF0aW9uPzogQ29uZmlndXJhdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgR2V0cyB0aGUgZmVlZCBmb3IgdGhlIGxvZ2dlZCBpbiB1c2VyLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgZmVlZEdldEZlZWQob3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8Q29sbGVjdGlvblJlc3BvbnNlT2ZGZWVkSXRlbT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSBGZWVkc0FwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLmZlZWRHZXRGZWVkKG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfVxufTtcblxuLyoqXG4gKiBGZWVkc0FwaSAtIGZhY3RvcnkgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydCBjb25zdCBGZWVkc0FwaUZhY3RvcnkgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbj86IENvbmZpZ3VyYXRpb24sIGJhc2VQYXRoPzogc3RyaW5nLCBheGlvcz86IEF4aW9zSW5zdGFuY2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgdGhlIGZlZWQgZm9yIHRoZSBsb2dnZWQgaW4gdXNlci5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGZlZWRHZXRGZWVkKG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBGZWVkc0FwaUZwKGNvbmZpZ3VyYXRpb24pLmZlZWRHZXRGZWVkKG9wdGlvbnMpKGF4aW9zLCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgfTtcbn07XG5cbi8qKlxuICogRmVlZHNBcGkgLSBvYmplY3Qtb3JpZW50ZWQgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgRmVlZHNBcGlcbiAqIEBleHRlbmRzIHtCYXNlQVBJfVxuICovXG5leHBvcnQgY2xhc3MgRmVlZHNBcGkgZXh0ZW5kcyBCYXNlQVBJIHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAc3VtbWFyeSBHZXRzIHRoZSBmZWVkIGZvciB0aGUgbG9nZ2VkIGluIHVzZXIuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBGZWVkc0FwaVxuICAgICAqL1xuICAgIHB1YmxpYyBmZWVkR2V0RmVlZChvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBGZWVkc0FwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuZmVlZEdldEZlZWQob3B0aW9ucykodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCk7XG4gICAgfVxuXG59XG5cblxuLyoqXG4gKiBHZW9BcGkgLSBheGlvcyBwYXJhbWV0ZXIgY3JlYXRvclxuICogQGV4cG9ydFxuICovXG5leHBvcnQgY29uc3QgR2VvQXBpQXhpb3NQYXJhbUNyZWF0b3IgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbj86IENvbmZpZ3VyYXRpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEV4ZWN1dGVzIGEgZnV6enkgbG9jYXRpb24gc2VhcmNoLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3F1ZXJ5XSBTZWFyY2ggVGV4dC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGdlb0xvb2t1cExvY2F0aW9uKHF1ZXJ5Pzogc3RyaW5nLCBvcHRpb25zOiBhbnkgPSB7fSk6IFJlcXVlc3RBcmdzIHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL2dlby9zZWFyY2gvZnV6enlgO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnR0VUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChxdWVyeSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJRdWVyeVBhcmFtZXRlclsncXVlcnknXSA9IHF1ZXJ5O1xuICAgICAgICAgICAgfVxuXG5cbiAgICBcbiAgICAgICAgICAgIGxvY2FsVmFyVXJsT2JqLnF1ZXJ5ID0gey4uLmxvY2FsVmFyVXJsT2JqLnF1ZXJ5LCAuLi5sb2NhbFZhclF1ZXJ5UGFyYW1ldGVyLCAuLi5vcHRpb25zLnF1ZXJ5fTtcbiAgICAgICAgICAgIC8vIGZpeCBvdmVycmlkZSBxdWVyeSBzdHJpbmcgRGV0YWlsOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzUxNzY3My8xMDc3OTQzXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxWYXJVcmxPYmouc2VhcmNoO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gey4uLmxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCAuLi5vcHRpb25zLmhlYWRlcnN9O1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogZ2xvYmFsSW1wb3J0VXJsLmZvcm1hdChsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfVxufTtcblxuLyoqXG4gKiBHZW9BcGkgLSBmdW5jdGlvbmFsIHByb2dyYW1taW5nIGludGVyZmFjZVxuICogQGV4cG9ydFxuICovXG5leHBvcnQgY29uc3QgR2VvQXBpRnAgPSBmdW5jdGlvbihjb25maWd1cmF0aW9uPzogQ29uZmlndXJhdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgRXhlY3V0ZXMgYSBmdXp6eSBsb2NhdGlvbiBzZWFyY2guXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcXVlcnldIFNlYXJjaCBUZXh0LlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgZ2VvTG9va3VwTG9jYXRpb24ocXVlcnk/OiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpOiAoYXhpb3M/OiBBeGlvc0luc3RhbmNlLCBiYXNlUGF0aD86IHN0cmluZykgPT4gQXhpb3NQcm9taXNlPEZ1enp5U2VhcmNoUmVzcG9uc2U+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gR2VvQXBpQXhpb3NQYXJhbUNyZWF0b3IoY29uZmlndXJhdGlvbikuZ2VvTG9va3VwTG9jYXRpb24ocXVlcnksIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfVxufTtcblxuLyoqXG4gKiBHZW9BcGkgLSBmYWN0b3J5IGludGVyZmFjZVxuICogQGV4cG9ydFxuICovXG5leHBvcnQgY29uc3QgR2VvQXBpRmFjdG9yeSA9IGZ1bmN0aW9uIChjb25maWd1cmF0aW9uPzogQ29uZmlndXJhdGlvbiwgYmFzZVBhdGg/OiBzdHJpbmcsIGF4aW9zPzogQXhpb3NJbnN0YW5jZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgRXhlY3V0ZXMgYSBmdXp6eSBsb2NhdGlvbiBzZWFyY2guXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcXVlcnldIFNlYXJjaCBUZXh0LlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgZ2VvTG9va3VwTG9jYXRpb24ocXVlcnk/OiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBHZW9BcGlGcChjb25maWd1cmF0aW9uKS5nZW9Mb29rdXBMb2NhdGlvbihxdWVyeSwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICB9O1xufTtcblxuLyoqXG4gKiBHZW9BcGkgLSBvYmplY3Qtb3JpZW50ZWQgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgR2VvQXBpXG4gKiBAZXh0ZW5kcyB7QmFzZUFQSX1cbiAqL1xuZXhwb3J0IGNsYXNzIEdlb0FwaSBleHRlbmRzIEJhc2VBUEkge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBzdW1tYXJ5IEV4ZWN1dGVzIGEgZnV6enkgbG9jYXRpb24gc2VhcmNoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcXVlcnldIFNlYXJjaCBUZXh0LlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgR2VvQXBpXG4gICAgICovXG4gICAgcHVibGljIGdlb0xvb2t1cExvY2F0aW9uKHF1ZXJ5Pzogc3RyaW5nLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBHZW9BcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmdlb0xvb2t1cExvY2F0aW9uKHF1ZXJ5LCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbn1cblxuXG4vKipcbiAqIElkZW50aXR5QXBpIC0gYXhpb3MgcGFyYW1ldGVyIGNyZWF0b3JcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0IGNvbnN0IElkZW50aXR5QXBpQXhpb3NQYXJhbUNyZWF0b3IgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbj86IENvbmZpZ3VyYXRpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBpZGVudGl0eUdldChvcHRpb25zOiBhbnkgPSB7fSk6IFJlcXVlc3RBcmdzIHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvaWRlbnRpdHlgO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnR0VUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBnbG9iYWxJbXBvcnRVcmwuZm9ybWF0KGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9XG59O1xuXG4vKipcbiAqIElkZW50aXR5QXBpIC0gZnVuY3Rpb25hbCBwcm9ncmFtbWluZyBpbnRlcmZhY2VcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0IGNvbnN0IElkZW50aXR5QXBpRnAgPSBmdW5jdGlvbihjb25maWd1cmF0aW9uPzogQ29uZmlndXJhdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGlkZW50aXR5R2V0KG9wdGlvbnM/OiBhbnkpOiAoYXhpb3M/OiBBeGlvc0luc3RhbmNlLCBiYXNlUGF0aD86IHN0cmluZykgPT4gQXhpb3NQcm9taXNlPGFueT4ge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSBJZGVudGl0eUFwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLmlkZW50aXR5R2V0KG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfVxufTtcblxuLyoqXG4gKiBJZGVudGl0eUFwaSAtIGZhY3RvcnkgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydCBjb25zdCBJZGVudGl0eUFwaUZhY3RvcnkgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbj86IENvbmZpZ3VyYXRpb24sIGJhc2VQYXRoPzogc3RyaW5nLCBheGlvcz86IEF4aW9zSW5zdGFuY2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBpZGVudGl0eUdldChvcHRpb25zPzogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gSWRlbnRpdHlBcGlGcChjb25maWd1cmF0aW9uKS5pZGVudGl0eUdldChvcHRpb25zKShheGlvcywgYmFzZVBhdGgpO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuXG4vKipcbiAqIElkZW50aXR5QXBpIC0gb2JqZWN0LW9yaWVudGVkIGludGVyZmFjZVxuICogQGV4cG9ydFxuICogQGNsYXNzIElkZW50aXR5QXBpXG4gKiBAZXh0ZW5kcyB7QmFzZUFQSX1cbiAqL1xuZXhwb3J0IGNsYXNzIElkZW50aXR5QXBpIGV4dGVuZHMgQmFzZUFQSSB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBJZGVudGl0eUFwaVxuICAgICAqL1xuICAgIHB1YmxpYyBpZGVudGl0eUdldChvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBJZGVudGl0eUFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuaWRlbnRpdHlHZXQob3B0aW9ucykodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCk7XG4gICAgfVxuXG59XG5cblxuLyoqXG4gKiBJbnZpdGF0aW9uc0FwaSAtIGF4aW9zIHBhcmFtZXRlciBjcmVhdG9yXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydCBjb25zdCBJbnZpdGF0aW9uc0FwaUF4aW9zUGFyYW1DcmVhdG9yID0gZnVuY3Rpb24gKGNvbmZpZ3VyYXRpb24/OiBDb25maWd1cmF0aW9uKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBBY2NlcHRzIG9yIHJlamVjdHMgYW4gaW52aXRhdGlvbiBzZW50IHRvIHRoZSB1c2VyLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3JnSWQgT3JnYW5pc2F0aW9uIHRvIGFjY2VwdCBpbnZpdGF0aW9uIGZvci5cbiAgICAgICAgICogQHBhcmFtIHtIYW5kbGVJbnZpdGF0aW9ufSBoYW5kbGVJbnZpdGF0aW9uIEludml0YXRpb24gaW5mb3JtYXRpb24gdG8gYWNjZXB0IG9yIHJlamVjdC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGludml0YXRpb25zQWNjZXB0SW52aXRhdGlvbihvcmdJZDogc3RyaW5nLCBoYW5kbGVJbnZpdGF0aW9uOiBIYW5kbGVJbnZpdGF0aW9uLCBvcHRpb25zOiBhbnkgPSB7fSk6IFJlcXVlc3RBcmdzIHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ29yZ0lkJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGlmIChvcmdJZCA9PT0gbnVsbCB8fCBvcmdJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVpcmVkRXJyb3IoJ29yZ0lkJywnUmVxdWlyZWQgcGFyYW1ldGVyIG9yZ0lkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgaW52aXRhdGlvbnNBY2NlcHRJbnZpdGF0aW9uLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnaGFuZGxlSW52aXRhdGlvbicgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAoaGFuZGxlSW52aXRhdGlvbiA9PT0gbnVsbCB8fCBoYW5kbGVJbnZpdGF0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignaGFuZGxlSW52aXRhdGlvbicsJ1JlcXVpcmVkIHBhcmFtZXRlciBoYW5kbGVJbnZpdGF0aW9uIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgaW52aXRhdGlvbnNBY2NlcHRJbnZpdGF0aW9uLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9hcGkvaW52aXRhdGlvbnMve29yZ0lkfWBcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJvcmdJZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKG9yZ0lkKSkpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnUE9TVCcsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG5cbiAgICBcbiAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcblxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG4gICAgICAgICAgICBjb25zdCBuZWVkc1NlcmlhbGl6YXRpb24gPSAodHlwZW9mIGhhbmRsZUludml0YXRpb24gIT09IFwic3RyaW5nXCIpIHx8IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPT09ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuZGF0YSA9ICBuZWVkc1NlcmlhbGl6YXRpb24gPyBKU09OLnN0cmluZ2lmeShoYW5kbGVJbnZpdGF0aW9uICE9PSB1bmRlZmluZWQgPyBoYW5kbGVJbnZpdGF0aW9uIDoge30pIDogKGhhbmRsZUludml0YXRpb24gfHwgXCJcIik7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBnbG9iYWxJbXBvcnRVcmwuZm9ybWF0KGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBJbnZpdGUgYSBuZXcgZW1haWwgYWRkcmVzcyB0byBBbXBob3JhIERhdGEuXG4gICAgICAgICAqIEBwYXJhbSB7SW52aXRhdGlvbn0gaW52aXRhdGlvbiBJbnZpdGF0aW9uIGRldGFpbHMuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBpbnZpdGF0aW9uc0ludml0ZU5ld1VzZXIoaW52aXRhdGlvbjogSW52aXRhdGlvbiwgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdpbnZpdGF0aW9uJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGlmIChpbnZpdGF0aW9uID09PSBudWxsIHx8IGludml0YXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdpbnZpdGF0aW9uJywnUmVxdWlyZWQgcGFyYW1ldGVyIGludml0YXRpb24gd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBpbnZpdGF0aW9uc0ludml0ZU5ld1VzZXIuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS9pbnZpdGF0aW9uc2A7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IGdsb2JhbEltcG9ydFVybC5wYXJzZShsb2NhbFZhclBhdGgsIHRydWUpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0geyBtZXRob2Q6ICdQT1NUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcbiAgICAgICAgICAgIGNvbnN0IG5lZWRzU2VyaWFsaXphdGlvbiA9ICh0eXBlb2YgaW52aXRhdGlvbiAhPT0gXCJzdHJpbmdcIikgfHwgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5kYXRhID0gIG5lZWRzU2VyaWFsaXphdGlvbiA/IEpTT04uc3RyaW5naWZ5KGludml0YXRpb24gIT09IHVuZGVmaW5lZCA/IGludml0YXRpb24gOiB7fSkgOiAoaW52aXRhdGlvbiB8fCBcIlwiKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IFJldHVybnMgYWxsIHRoZSBpbnZpdGF0aW9ucyBzZW50IHRvIG1lLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgaW52aXRhdGlvbnNSZWFkTXlJbnZpdGF0aW9ucyhvcHRpb25zOiBhbnkgPSB7fSk6IFJlcXVlc3RBcmdzIHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL2ludml0YXRpb25zYDtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gZ2xvYmFsSW1wb3J0VXJsLnBhcnNlKGxvY2FsVmFyUGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSB7IG1ldGhvZDogJ0dFVCcsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG5cbiAgICBcbiAgICAgICAgICAgIGxvY2FsVmFyVXJsT2JqLnF1ZXJ5ID0gey4uLmxvY2FsVmFyVXJsT2JqLnF1ZXJ5LCAuLi5sb2NhbFZhclF1ZXJ5UGFyYW1ldGVyLCAuLi5vcHRpb25zLnF1ZXJ5fTtcbiAgICAgICAgICAgIC8vIGZpeCBvdmVycmlkZSBxdWVyeSBzdHJpbmcgRGV0YWlsOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzUxNzY3My8xMDc3OTQzXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxWYXJVcmxPYmouc2VhcmNoO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gey4uLmxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCAuLi5vcHRpb25zLmhlYWRlcnN9O1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogZ2xvYmFsSW1wb3J0VXJsLmZvcm1hdChsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfVxufTtcblxuLyoqXG4gKiBJbnZpdGF0aW9uc0FwaSAtIGZ1bmN0aW9uYWwgcHJvZ3JhbW1pbmcgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydCBjb25zdCBJbnZpdGF0aW9uc0FwaUZwID0gZnVuY3Rpb24oY29uZmlndXJhdGlvbj86IENvbmZpZ3VyYXRpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEFjY2VwdHMgb3IgcmVqZWN0cyBhbiBpbnZpdGF0aW9uIHNlbnQgdG8gdGhlIHVzZXIuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcmdJZCBPcmdhbmlzYXRpb24gdG8gYWNjZXB0IGludml0YXRpb24gZm9yLlxuICAgICAgICAgKiBAcGFyYW0ge0hhbmRsZUludml0YXRpb259IGhhbmRsZUludml0YXRpb24gSW52aXRhdGlvbiBpbmZvcm1hdGlvbiB0byBhY2NlcHQgb3IgcmVqZWN0LlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgaW52aXRhdGlvbnNBY2NlcHRJbnZpdGF0aW9uKG9yZ0lkOiBzdHJpbmcsIGhhbmRsZUludml0YXRpb246IEhhbmRsZUludml0YXRpb24sIG9wdGlvbnM/OiBhbnkpOiAoYXhpb3M/OiBBeGlvc0luc3RhbmNlLCBiYXNlUGF0aD86IHN0cmluZykgPT4gQXhpb3NQcm9taXNlPEhhbmRsZUludml0YXRpb24+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gSW52aXRhdGlvbnNBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS5pbnZpdGF0aW9uc0FjY2VwdEludml0YXRpb24ob3JnSWQsIGhhbmRsZUludml0YXRpb24sIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgSW52aXRlIGEgbmV3IGVtYWlsIGFkZHJlc3MgdG8gQW1waG9yYSBEYXRhLlxuICAgICAgICAgKiBAcGFyYW0ge0ludml0YXRpb259IGludml0YXRpb24gSW52aXRhdGlvbiBkZXRhaWxzLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgaW52aXRhdGlvbnNJbnZpdGVOZXdVc2VyKGludml0YXRpb246IEludml0YXRpb24sIG9wdGlvbnM/OiBhbnkpOiAoYXhpb3M/OiBBeGlvc0luc3RhbmNlLCBiYXNlUGF0aD86IHN0cmluZykgPT4gQXhpb3NQcm9taXNlPEludml0YXRpb24+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gSW52aXRhdGlvbnNBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS5pbnZpdGF0aW9uc0ludml0ZU5ld1VzZXIoaW52aXRhdGlvbiwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gKGF4aW9zOiBBeGlvc0luc3RhbmNlID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoOiBzdHJpbmcgPSBCQVNFX1BBVEgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlvc1JlcXVlc3RBcmdzID0gey4uLmxvY2FsVmFyQXhpb3NBcmdzLm9wdGlvbnMsIHVybDogYmFzZVBhdGggKyBsb2NhbFZhckF4aW9zQXJncy51cmx9O1xuICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5yZXF1ZXN0KGF4aW9zUmVxdWVzdEFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBSZXR1cm5zIGFsbCB0aGUgaW52aXRhdGlvbnMgc2VudCB0byBtZS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGludml0YXRpb25zUmVhZE15SW52aXRhdGlvbnMob3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8QXJyYXk8SW52aXRhdGlvbj4+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gSW52aXRhdGlvbnNBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS5pbnZpdGF0aW9uc1JlYWRNeUludml0YXRpb25zKG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfVxufTtcblxuLyoqXG4gKiBJbnZpdGF0aW9uc0FwaSAtIGZhY3RvcnkgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydCBjb25zdCBJbnZpdGF0aW9uc0FwaUZhY3RvcnkgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbj86IENvbmZpZ3VyYXRpb24sIGJhc2VQYXRoPzogc3RyaW5nLCBheGlvcz86IEF4aW9zSW5zdGFuY2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEFjY2VwdHMgb3IgcmVqZWN0cyBhbiBpbnZpdGF0aW9uIHNlbnQgdG8gdGhlIHVzZXIuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcmdJZCBPcmdhbmlzYXRpb24gdG8gYWNjZXB0IGludml0YXRpb24gZm9yLlxuICAgICAgICAgKiBAcGFyYW0ge0hhbmRsZUludml0YXRpb259IGhhbmRsZUludml0YXRpb24gSW52aXRhdGlvbiBpbmZvcm1hdGlvbiB0byBhY2NlcHQgb3IgcmVqZWN0LlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgaW52aXRhdGlvbnNBY2NlcHRJbnZpdGF0aW9uKG9yZ0lkOiBzdHJpbmcsIGhhbmRsZUludml0YXRpb246IEhhbmRsZUludml0YXRpb24sIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBJbnZpdGF0aW9uc0FwaUZwKGNvbmZpZ3VyYXRpb24pLmludml0YXRpb25zQWNjZXB0SW52aXRhdGlvbihvcmdJZCwgaGFuZGxlSW52aXRhdGlvbiwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBJbnZpdGUgYSBuZXcgZW1haWwgYWRkcmVzcyB0byBBbXBob3JhIERhdGEuXG4gICAgICAgICAqIEBwYXJhbSB7SW52aXRhdGlvbn0gaW52aXRhdGlvbiBJbnZpdGF0aW9uIGRldGFpbHMuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBpbnZpdGF0aW9uc0ludml0ZU5ld1VzZXIoaW52aXRhdGlvbjogSW52aXRhdGlvbiwgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIEludml0YXRpb25zQXBpRnAoY29uZmlndXJhdGlvbikuaW52aXRhdGlvbnNJbnZpdGVOZXdVc2VyKGludml0YXRpb24sIG9wdGlvbnMpKGF4aW9zLCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgUmV0dXJucyBhbGwgdGhlIGludml0YXRpb25zIHNlbnQgdG8gbWUuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBpbnZpdGF0aW9uc1JlYWRNeUludml0YXRpb25zKG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBJbnZpdGF0aW9uc0FwaUZwKGNvbmZpZ3VyYXRpb24pLmludml0YXRpb25zUmVhZE15SW52aXRhdGlvbnMob3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICB9O1xufTtcblxuLyoqXG4gKiBJbnZpdGF0aW9uc0FwaSAtIG9iamVjdC1vcmllbnRlZCBpbnRlcmZhY2VcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBJbnZpdGF0aW9uc0FwaVxuICogQGV4dGVuZHMge0Jhc2VBUEl9XG4gKi9cbmV4cG9ydCBjbGFzcyBJbnZpdGF0aW9uc0FwaSBleHRlbmRzIEJhc2VBUEkge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBzdW1tYXJ5IEFjY2VwdHMgb3IgcmVqZWN0cyBhbiBpbnZpdGF0aW9uIHNlbnQgdG8gdGhlIHVzZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG9yZ0lkIE9yZ2FuaXNhdGlvbiB0byBhY2NlcHQgaW52aXRhdGlvbiBmb3IuXG4gICAgICogQHBhcmFtIHtIYW5kbGVJbnZpdGF0aW9ufSBoYW5kbGVJbnZpdGF0aW9uIEludml0YXRpb24gaW5mb3JtYXRpb24gdG8gYWNjZXB0IG9yIHJlamVjdC5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIEludml0YXRpb25zQXBpXG4gICAgICovXG4gICAgcHVibGljIGludml0YXRpb25zQWNjZXB0SW52aXRhdGlvbihvcmdJZDogc3RyaW5nLCBoYW5kbGVJbnZpdGF0aW9uOiBIYW5kbGVJbnZpdGF0aW9uLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBJbnZpdGF0aW9uc0FwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuaW52aXRhdGlvbnNBY2NlcHRJbnZpdGF0aW9uKG9yZ0lkLCBoYW5kbGVJbnZpdGF0aW9uLCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAc3VtbWFyeSBJbnZpdGUgYSBuZXcgZW1haWwgYWRkcmVzcyB0byBBbXBob3JhIERhdGEuXG4gICAgICogQHBhcmFtIHtJbnZpdGF0aW9ufSBpbnZpdGF0aW9uIEludml0YXRpb24gZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIEludml0YXRpb25zQXBpXG4gICAgICovXG4gICAgcHVibGljIGludml0YXRpb25zSW52aXRlTmV3VXNlcihpbnZpdGF0aW9uOiBJbnZpdGF0aW9uLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBJbnZpdGF0aW9uc0FwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuaW52aXRhdGlvbnNJbnZpdGVOZXdVc2VyKGludml0YXRpb24sIG9wdGlvbnMpKHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBzdW1tYXJ5IFJldHVybnMgYWxsIHRoZSBpbnZpdGF0aW9ucyBzZW50IHRvIG1lLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgSW52aXRhdGlvbnNBcGlcbiAgICAgKi9cbiAgICBwdWJsaWMgaW52aXRhdGlvbnNSZWFkTXlJbnZpdGF0aW9ucyhvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBJbnZpdGF0aW9uc0FwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuaW52aXRhdGlvbnNSZWFkTXlJbnZpdGF0aW9ucyhvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbn1cblxuXG4vKipcbiAqIE9yZ2FuaXNhdGlvbnNBcGkgLSBheGlvcyBwYXJhbWV0ZXIgY3JlYXRvclxuICogQGV4cG9ydFxuICovXG5leHBvcnQgY29uc3QgT3JnYW5pc2F0aW9uc0FwaUF4aW9zUGFyYW1DcmVhdG9yID0gZnVuY3Rpb24gKGNvbmZpZ3VyYXRpb24/OiBDb25maWd1cmF0aW9uKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIGFuIE9yZ2FuaXNhdGlvblxcJ3MgYWNjb3VudCBpbmZvcm1hdGlvbi5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIE9yZ2FuaXNhdGlvbiBJZC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFjY291bnRSZWFkKGlkOiBzdHJpbmcsIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnaWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGlkID09PSBudWxsIHx8IGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignaWQnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgaWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhY2NvdW50UmVhZC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL09yZ2FuaXNhdGlvbnMve2lkfS9BY2NvdW50YFxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcImlkXCJ9fWAsIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaWQpKSk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IGdsb2JhbEltcG9ydFVybC5wYXJzZShsb2NhbFZhclBhdGgsIHRydWUpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0geyBtZXRob2Q6ICdHRVQnLCAuLi5iYXNlT3B0aW9ucywgLi4ub3B0aW9uc307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9IGFzIGFueTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG5cbiAgICAgICAgICAgIC8vIGF1dGhlbnRpY2F0aW9uIEJlYXJlciByZXF1aXJlZFxuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5hcGlLZXkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckFwaUtleVZhbHVlID0gdHlwZW9mIGNvbmZpZ3VyYXRpb24uYXBpS2V5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgID8gY29uZmlndXJhdGlvbi5hcGlLZXkoXCJBdXRob3JpemF0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgIDogY29uZmlndXJhdGlvbi5hcGlLZXk7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbXCJBdXRob3JpemF0aW9uXCJdID0gbG9jYWxWYXJBcGlLZXlWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgYW4gT3JnYW5pc2F0aW9uXFwncyBhY2NvdW50IGluZm9ybWF0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgT3JnYW5pc2F0aW9uIElkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYWNjb3VudFJlYWQyKGlkOiBzdHJpbmcsIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnaWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGlkID09PSBudWxsIHx8IGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignaWQnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgaWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBhY2NvdW50UmVhZDIuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS9BY2NvdW50YFxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcImlkXCJ9fWAsIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaWQpKSk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IGdsb2JhbEltcG9ydFVybC5wYXJzZShsb2NhbFZhclBhdGgsIHRydWUpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0geyBtZXRob2Q6ICdHRVQnLCAuLi5iYXNlT3B0aW9ucywgLi4ub3B0aW9uc307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9IGFzIGFueTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG5cbiAgICAgICAgICAgIC8vIGF1dGhlbnRpY2F0aW9uIEJlYXJlciByZXF1aXJlZFxuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5hcGlLZXkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckFwaUtleVZhbHVlID0gdHlwZW9mIGNvbmZpZ3VyYXRpb24uYXBpS2V5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgID8gY29uZmlndXJhdGlvbi5hcGlLZXkoXCJBdXRob3JpemF0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgIDogY29uZmlndXJhdGlvbi5hcGlLZXk7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbXCJBdXRob3JpemF0aW9uXCJdID0gbG9jYWxWYXJBcGlLZXlWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYSBuZXcgT3JnYW5pc2F0aW9uLiBUaGlzIHdpbGwgYXNzaWduIHRoZSBsb2dnZWQgaW4gdXNlciB0byB0aGUgb3JnYW5pc2F0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge09yZ2FuaXNhdGlvbn0gb3JnYW5pc2F0aW9uIEluZm9ybWF0aW9uIG9mIHRoZSBuZXcgT3JnYW5pc2F0aW9uLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgb3JnYW5pc2F0aW9uc0NyZWF0ZShvcmdhbmlzYXRpb246IE9yZ2FuaXNhdGlvbiwgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdvcmdhbmlzYXRpb24nIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKG9yZ2FuaXNhdGlvbiA9PT0gbnVsbCB8fCBvcmdhbmlzYXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdvcmdhbmlzYXRpb24nLCdSZXF1aXJlZCBwYXJhbWV0ZXIgb3JnYW5pc2F0aW9uIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgb3JnYW5pc2F0aW9uc0NyZWF0ZS4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL09yZ2FuaXNhdGlvbnNgO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnUE9TVCcsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG5cbiAgICBcbiAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcblxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG4gICAgICAgICAgICBjb25zdCBuZWVkc1NlcmlhbGl6YXRpb24gPSAodHlwZW9mIG9yZ2FuaXNhdGlvbiAhPT0gXCJzdHJpbmdcIikgfHwgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5kYXRhID0gIG5lZWRzU2VyaWFsaXphdGlvbiA/IEpTT04uc3RyaW5naWZ5KG9yZ2FuaXNhdGlvbiAhPT0gdW5kZWZpbmVkID8gb3JnYW5pc2F0aW9uIDoge30pIDogKG9yZ2FuaXNhdGlvbiB8fCBcIlwiKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IERlbGV0ZXMgYW4gb3JnYW5pc2F0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgT3JnYW5pc2F0aW9uIElkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgb3JnYW5pc2F0aW9uc0RlbGV0ZShpZDogc3RyaW5nLCBvcHRpb25zOiBhbnkgPSB7fSk6IFJlcXVlc3RBcmdzIHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2lkJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGlmIChpZCA9PT0gbnVsbCB8fCBpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVpcmVkRXJyb3IoJ2lkJywnUmVxdWlyZWQgcGFyYW1ldGVyIGlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgb3JnYW5pc2F0aW9uc0RlbGV0ZS4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL09yZ2FuaXNhdGlvbnMve2lkfWBcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJpZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGlkKSkpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnREVMRVRFJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBnbG9iYWxJbXBvcnRVcmwuZm9ybWF0KGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIGFuIG9yZ2FuaXNhdGlvblxcJ3MgZGV0YWlscy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIE9yZ2FuaXNhdGlvbiBJZC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIG9yZ2FuaXNhdGlvbnNSZWFkKGlkOiBzdHJpbmcsIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnaWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGlkID09PSBudWxsIHx8IGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignaWQnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgaWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBvcmdhbmlzYXRpb25zUmVhZC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL09yZ2FuaXNhdGlvbnMve2lkfWBcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJpZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGlkKSkpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnR0VUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBnbG9iYWxJbXBvcnRVcmwuZm9ybWF0KGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIGFuIG9yZ2FuaXNhdGlvblxcJ3MgaW52aXRhdGlvbnMuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBPcmdhbmlzYXRpb24gSWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBvcmdhbmlzYXRpb25zUmVhZEludml0YXRpb25zKGlkOiBzdHJpbmcsIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnaWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGlkID09PSBudWxsIHx8IGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignaWQnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgaWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBvcmdhbmlzYXRpb25zUmVhZEludml0YXRpb25zLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9hcGkvT3JnYW5pc2F0aW9ucy97aWR9L0ludml0YXRpb25zYFxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcImlkXCJ9fWAsIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaWQpKSk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IGdsb2JhbEltcG9ydFVybC5wYXJzZShsb2NhbFZhclBhdGgsIHRydWUpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0geyBtZXRob2Q6ICdHRVQnLCAuLi5iYXNlT3B0aW9ucywgLi4ub3B0aW9uc307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9IGFzIGFueTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG5cbiAgICAgICAgICAgIC8vIGF1dGhlbnRpY2F0aW9uIEJlYXJlciByZXF1aXJlZFxuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5hcGlLZXkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckFwaUtleVZhbHVlID0gdHlwZW9mIGNvbmZpZ3VyYXRpb24uYXBpS2V5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgID8gY29uZmlndXJhdGlvbi5hcGlLZXkoXCJBdXRob3JpemF0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgIDogY29uZmlndXJhdGlvbi5hcGlLZXk7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbXCJBdXRob3JpemF0aW9uXCJdID0gbG9jYWxWYXJBcGlLZXlWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgYSBsaXN0IG9mIGFuIE9yZ2FuaXNhdGlvblxcJ3MgVGVybXMgb2YgVXNlLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIElkIG9mIHRoZSBPcmdhbmlzYXRpb24uXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBvcmdhbmlzYXRpb25zVGVybXNPZlVzZVJlYWQoaWQ6IHN0cmluZywgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdpZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAoaWQgPT09IG51bGwgfHwgaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdpZCcsJ1JlcXVpcmVkIHBhcmFtZXRlciBpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIG9yZ2FuaXNhdGlvbnNUZXJtc09mVXNlUmVhZC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL09yZ2FuaXNhdGlvbnMve2lkfS9UZXJtc09mVXNlYFxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcImlkXCJ9fWAsIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaWQpKSk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IGdsb2JhbEltcG9ydFVybC5wYXJzZShsb2NhbFZhclBhdGgsIHRydWUpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0geyBtZXRob2Q6ICdHRVQnLCAuLi5iYXNlT3B0aW9ucywgLi4ub3B0aW9uc307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9IGFzIGFueTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG5cbiAgICAgICAgICAgIC8vIGF1dGhlbnRpY2F0aW9uIEJlYXJlciByZXF1aXJlZFxuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5hcGlLZXkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckFwaUtleVZhbHVlID0gdHlwZW9mIGNvbmZpZ3VyYXRpb24uYXBpS2V5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgID8gY29uZmlndXJhdGlvbi5hcGlLZXkoXCJBdXRob3JpemF0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgIDogY29uZmlndXJhdGlvbi5hcGlLZXk7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbXCJBdXRob3JpemF0aW9uXCJdID0gbG9jYWxWYXJBcGlLZXlWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IFVwZGF0ZXMgYW4gb3JnYW5pc2F0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgT3JnYW5pc2F0aW9uIElkLlxuICAgICAgICAgKiBAcGFyYW0ge09yZ2FuaXNhdGlvbn0gb3JnYW5pc2F0aW9uIE9yZ2FuaXNhdGlvbiBJbmZvcm1hdGlvbi4gQWxsIGZpZWxkcyBhcmUgdXBkYXRlZC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIG9yZ2FuaXNhdGlvbnNVcGRhdGUoaWQ6IHN0cmluZywgb3JnYW5pc2F0aW9uOiBPcmdhbmlzYXRpb24sIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnaWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGlkID09PSBudWxsIHx8IGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignaWQnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgaWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBvcmdhbmlzYXRpb25zVXBkYXRlLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnb3JnYW5pc2F0aW9uJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGlmIChvcmdhbmlzYXRpb24gPT09IG51bGwgfHwgb3JnYW5pc2F0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignb3JnYW5pc2F0aW9uJywnUmVxdWlyZWQgcGFyYW1ldGVyIG9yZ2FuaXNhdGlvbiB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIG9yZ2FuaXNhdGlvbnNVcGRhdGUuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS9PcmdhbmlzYXRpb25zL3tpZH1gXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoYHske1wiaWRcIn19YCwgZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhpZCkpKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gZ2xvYmFsSW1wb3J0VXJsLnBhcnNlKGxvY2FsVmFyUGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSB7IG1ldGhvZDogJ1BVVCcsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG5cbiAgICBcbiAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcblxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG4gICAgICAgICAgICBjb25zdCBuZWVkc1NlcmlhbGl6YXRpb24gPSAodHlwZW9mIG9yZ2FuaXNhdGlvbiAhPT0gXCJzdHJpbmdcIikgfHwgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5kYXRhID0gIG5lZWRzU2VyaWFsaXphdGlvbiA/IEpTT04uc3RyaW5naWZ5KG9yZ2FuaXNhdGlvbiAhPT0gdW5kZWZpbmVkID8gb3JnYW5pc2F0aW9uIDoge30pIDogKG9yZ2FuaXNhdGlvbiB8fCBcIlwiKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgYW4gT3JnYW5pc2F0aW9uXFwncyBwbGFuIGluZm9ybWF0aW9uLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgcGxhbkdldFBsYW4ob3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS9BY2NvdW50L1BsYW5gO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnR0VUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBnbG9iYWxJbXBvcnRVcmwuZm9ybWF0KGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBTZXRcXCdzIGFuIE9yZ2FuaXNhdGlvblxcJ3MgcGxhbi5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtwbGFuVHlwZV0gVGhlIFBsYW4gVHlwZS4gU2hvdWxkIGJlIFBBWUcgb3IgR2xhemUuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBwbGFuU2V0UGxhbihwbGFuVHlwZT86IHN0cmluZywgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS9BY2NvdW50L1BsYW5gO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnUE9TVCcsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocGxhblR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXJbJ3BsYW5UeXBlJ10gPSBwbGFuVHlwZTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH1cbn07XG5cbi8qKlxuICogT3JnYW5pc2F0aW9uc0FwaSAtIGZ1bmN0aW9uYWwgcHJvZ3JhbW1pbmcgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydCBjb25zdCBPcmdhbmlzYXRpb25zQXBpRnAgPSBmdW5jdGlvbihjb25maWd1cmF0aW9uPzogQ29uZmlndXJhdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgR2V0cyBhbiBPcmdhbmlzYXRpb25cXCdzIGFjY291bnQgaW5mb3JtYXRpb24uXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBPcmdhbmlzYXRpb24gSWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBhY2NvdW50UmVhZChpZDogc3RyaW5nLCBvcHRpb25zPzogYW55KTogKGF4aW9zPzogQXhpb3NJbnN0YW5jZSwgYmFzZVBhdGg/OiBzdHJpbmcpID0+IEF4aW9zUHJvbWlzZTxBY2NvdW50SW5mb3JtYXRpb24+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gT3JnYW5pc2F0aW9uc0FwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLmFjY291bnRSZWFkKGlkLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgYW4gT3JnYW5pc2F0aW9uXFwncyBhY2NvdW50IGluZm9ybWF0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgT3JnYW5pc2F0aW9uIElkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYWNjb3VudFJlYWQyKGlkOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpOiAoYXhpb3M/OiBBeGlvc0luc3RhbmNlLCBiYXNlUGF0aD86IHN0cmluZykgPT4gQXhpb3NQcm9taXNlPEFjY291bnRJbmZvcm1hdGlvbj4ge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSBPcmdhbmlzYXRpb25zQXBpQXhpb3NQYXJhbUNyZWF0b3IoY29uZmlndXJhdGlvbikuYWNjb3VudFJlYWQyKGlkLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYSBuZXcgT3JnYW5pc2F0aW9uLiBUaGlzIHdpbGwgYXNzaWduIHRoZSBsb2dnZWQgaW4gdXNlciB0byB0aGUgb3JnYW5pc2F0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge09yZ2FuaXNhdGlvbn0gb3JnYW5pc2F0aW9uIEluZm9ybWF0aW9uIG9mIHRoZSBuZXcgT3JnYW5pc2F0aW9uLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgb3JnYW5pc2F0aW9uc0NyZWF0ZShvcmdhbmlzYXRpb246IE9yZ2FuaXNhdGlvbiwgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8T3JnYW5pc2F0aW9uPiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IE9yZ2FuaXNhdGlvbnNBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS5vcmdhbmlzYXRpb25zQ3JlYXRlKG9yZ2FuaXNhdGlvbiwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gKGF4aW9zOiBBeGlvc0luc3RhbmNlID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoOiBzdHJpbmcgPSBCQVNFX1BBVEgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlvc1JlcXVlc3RBcmdzID0gey4uLmxvY2FsVmFyQXhpb3NBcmdzLm9wdGlvbnMsIHVybDogYmFzZVBhdGggKyBsb2NhbFZhckF4aW9zQXJncy51cmx9O1xuICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5yZXF1ZXN0KGF4aW9zUmVxdWVzdEFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBEZWxldGVzIGFuIG9yZ2FuaXNhdGlvbi5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIE9yZ2FuaXNhdGlvbiBJZC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIG9yZ2FuaXNhdGlvbnNEZWxldGUoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8c3RyaW5nPiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IE9yZ2FuaXNhdGlvbnNBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS5vcmdhbmlzYXRpb25zRGVsZXRlKGlkLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgYW4gb3JnYW5pc2F0aW9uXFwncyBkZXRhaWxzLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgT3JnYW5pc2F0aW9uIElkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgb3JnYW5pc2F0aW9uc1JlYWQoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8T3JnYW5pc2F0aW9uPiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IE9yZ2FuaXNhdGlvbnNBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS5vcmdhbmlzYXRpb25zUmVhZChpZCwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gKGF4aW9zOiBBeGlvc0luc3RhbmNlID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoOiBzdHJpbmcgPSBCQVNFX1BBVEgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlvc1JlcXVlc3RBcmdzID0gey4uLmxvY2FsVmFyQXhpb3NBcmdzLm9wdGlvbnMsIHVybDogYmFzZVBhdGggKyBsb2NhbFZhckF4aW9zQXJncy51cmx9O1xuICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5yZXF1ZXN0KGF4aW9zUmVxdWVzdEFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIGFuIG9yZ2FuaXNhdGlvblxcJ3MgaW52aXRhdGlvbnMuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBPcmdhbmlzYXRpb24gSWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBvcmdhbmlzYXRpb25zUmVhZEludml0YXRpb25zKGlkOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpOiAoYXhpb3M/OiBBeGlvc0luc3RhbmNlLCBiYXNlUGF0aD86IHN0cmluZykgPT4gQXhpb3NQcm9taXNlPEFycmF5PEludml0YXRpb24+PiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IE9yZ2FuaXNhdGlvbnNBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS5vcmdhbmlzYXRpb25zUmVhZEludml0YXRpb25zKGlkLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgYSBsaXN0IG9mIGFuIE9yZ2FuaXNhdGlvblxcJ3MgVGVybXMgb2YgVXNlLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIElkIG9mIHRoZSBPcmdhbmlzYXRpb24uXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBvcmdhbmlzYXRpb25zVGVybXNPZlVzZVJlYWQoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8QXJyYXk8VGVybXNPZlVzZT4+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gT3JnYW5pc2F0aW9uc0FwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLm9yZ2FuaXNhdGlvbnNUZXJtc09mVXNlUmVhZChpZCwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gKGF4aW9zOiBBeGlvc0luc3RhbmNlID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoOiBzdHJpbmcgPSBCQVNFX1BBVEgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlvc1JlcXVlc3RBcmdzID0gey4uLmxvY2FsVmFyQXhpb3NBcmdzLm9wdGlvbnMsIHVybDogYmFzZVBhdGggKyBsb2NhbFZhckF4aW9zQXJncy51cmx9O1xuICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5yZXF1ZXN0KGF4aW9zUmVxdWVzdEFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBVcGRhdGVzIGFuIG9yZ2FuaXNhdGlvbi5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIE9yZ2FuaXNhdGlvbiBJZC5cbiAgICAgICAgICogQHBhcmFtIHtPcmdhbmlzYXRpb259IG9yZ2FuaXNhdGlvbiBPcmdhbmlzYXRpb24gSW5mb3JtYXRpb24uIEFsbCBmaWVsZHMgYXJlIHVwZGF0ZWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBvcmdhbmlzYXRpb25zVXBkYXRlKGlkOiBzdHJpbmcsIG9yZ2FuaXNhdGlvbjogT3JnYW5pc2F0aW9uLCBvcHRpb25zPzogYW55KTogKGF4aW9zPzogQXhpb3NJbnN0YW5jZSwgYmFzZVBhdGg/OiBzdHJpbmcpID0+IEF4aW9zUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gT3JnYW5pc2F0aW9uc0FwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLm9yZ2FuaXNhdGlvbnNVcGRhdGUoaWQsIG9yZ2FuaXNhdGlvbiwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gKGF4aW9zOiBBeGlvc0luc3RhbmNlID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoOiBzdHJpbmcgPSBCQVNFX1BBVEgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlvc1JlcXVlc3RBcmdzID0gey4uLmxvY2FsVmFyQXhpb3NBcmdzLm9wdGlvbnMsIHVybDogYmFzZVBhdGggKyBsb2NhbFZhckF4aW9zQXJncy51cmx9O1xuICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5yZXF1ZXN0KGF4aW9zUmVxdWVzdEFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIGFuIE9yZ2FuaXNhdGlvblxcJ3MgcGxhbiBpbmZvcm1hdGlvbi5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHBsYW5HZXRQbGFuKG9wdGlvbnM/OiBhbnkpOiAoYXhpb3M/OiBBeGlvc0luc3RhbmNlLCBiYXNlUGF0aD86IHN0cmluZykgPT4gQXhpb3NQcm9taXNlPFBsYW5JbmZvcm1hdGlvbj4ge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSBPcmdhbmlzYXRpb25zQXBpQXhpb3NQYXJhbUNyZWF0b3IoY29uZmlndXJhdGlvbikucGxhbkdldFBsYW4ob3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gKGF4aW9zOiBBeGlvc0luc3RhbmNlID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoOiBzdHJpbmcgPSBCQVNFX1BBVEgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlvc1JlcXVlc3RBcmdzID0gey4uLmxvY2FsVmFyQXhpb3NBcmdzLm9wdGlvbnMsIHVybDogYmFzZVBhdGggKyBsb2NhbFZhckF4aW9zQXJncy51cmx9O1xuICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5yZXF1ZXN0KGF4aW9zUmVxdWVzdEFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBTZXRcXCdzIGFuIE9yZ2FuaXNhdGlvblxcJ3MgcGxhbi5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtwbGFuVHlwZV0gVGhlIFBsYW4gVHlwZS4gU2hvdWxkIGJlIFBBWUcgb3IgR2xhemUuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBwbGFuU2V0UGxhbihwbGFuVHlwZT86IHN0cmluZywgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8UGxhbkluZm9ybWF0aW9uPiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IE9yZ2FuaXNhdGlvbnNBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS5wbGFuU2V0UGxhbihwbGFuVHlwZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gKGF4aW9zOiBBeGlvc0luc3RhbmNlID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoOiBzdHJpbmcgPSBCQVNFX1BBVEgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlvc1JlcXVlc3RBcmdzID0gey4uLmxvY2FsVmFyQXhpb3NBcmdzLm9wdGlvbnMsIHVybDogYmFzZVBhdGggKyBsb2NhbFZhckF4aW9zQXJncy51cmx9O1xuICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5yZXF1ZXN0KGF4aW9zUmVxdWVzdEFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9XG59O1xuXG4vKipcbiAqIE9yZ2FuaXNhdGlvbnNBcGkgLSBmYWN0b3J5IGludGVyZmFjZVxuICogQGV4cG9ydFxuICovXG5leHBvcnQgY29uc3QgT3JnYW5pc2F0aW9uc0FwaUZhY3RvcnkgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbj86IENvbmZpZ3VyYXRpb24sIGJhc2VQYXRoPzogc3RyaW5nLCBheGlvcz86IEF4aW9zSW5zdGFuY2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgYW4gT3JnYW5pc2F0aW9uXFwncyBhY2NvdW50IGluZm9ybWF0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgT3JnYW5pc2F0aW9uIElkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgYWNjb3VudFJlYWQoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIE9yZ2FuaXNhdGlvbnNBcGlGcChjb25maWd1cmF0aW9uKS5hY2NvdW50UmVhZChpZCwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIGFuIE9yZ2FuaXNhdGlvblxcJ3MgYWNjb3VudCBpbmZvcm1hdGlvbi5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIE9yZ2FuaXNhdGlvbiBJZC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGFjY291bnRSZWFkMihpZDogc3RyaW5nLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gT3JnYW5pc2F0aW9uc0FwaUZwKGNvbmZpZ3VyYXRpb24pLmFjY291bnRSZWFkMihpZCwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgbmV3IE9yZ2FuaXNhdGlvbi4gVGhpcyB3aWxsIGFzc2lnbiB0aGUgbG9nZ2VkIGluIHVzZXIgdG8gdGhlIG9yZ2FuaXNhdGlvbi5cbiAgICAgICAgICogQHBhcmFtIHtPcmdhbmlzYXRpb259IG9yZ2FuaXNhdGlvbiBJbmZvcm1hdGlvbiBvZiB0aGUgbmV3IE9yZ2FuaXNhdGlvbi5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIG9yZ2FuaXNhdGlvbnNDcmVhdGUob3JnYW5pc2F0aW9uOiBPcmdhbmlzYXRpb24sIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBPcmdhbmlzYXRpb25zQXBpRnAoY29uZmlndXJhdGlvbikub3JnYW5pc2F0aW9uc0NyZWF0ZShvcmdhbmlzYXRpb24sIG9wdGlvbnMpKGF4aW9zLCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgRGVsZXRlcyBhbiBvcmdhbmlzYXRpb24uXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBPcmdhbmlzYXRpb24gSWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBvcmdhbmlzYXRpb25zRGVsZXRlKGlkOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBPcmdhbmlzYXRpb25zQXBpRnAoY29uZmlndXJhdGlvbikub3JnYW5pc2F0aW9uc0RlbGV0ZShpZCwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIGFuIG9yZ2FuaXNhdGlvblxcJ3MgZGV0YWlscy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIE9yZ2FuaXNhdGlvbiBJZC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIG9yZ2FuaXNhdGlvbnNSZWFkKGlkOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBPcmdhbmlzYXRpb25zQXBpRnAoY29uZmlndXJhdGlvbikub3JnYW5pc2F0aW9uc1JlYWQoaWQsIG9wdGlvbnMpKGF4aW9zLCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgR2V0cyBhbiBvcmdhbmlzYXRpb25cXCdzIGludml0YXRpb25zLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgT3JnYW5pc2F0aW9uIElkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgb3JnYW5pc2F0aW9uc1JlYWRJbnZpdGF0aW9ucyhpZDogc3RyaW5nLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gT3JnYW5pc2F0aW9uc0FwaUZwKGNvbmZpZ3VyYXRpb24pLm9yZ2FuaXNhdGlvbnNSZWFkSW52aXRhdGlvbnMoaWQsIG9wdGlvbnMpKGF4aW9zLCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgR2V0cyBhIGxpc3Qgb2YgYW4gT3JnYW5pc2F0aW9uXFwncyBUZXJtcyBvZiBVc2UuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgSWQgb2YgdGhlIE9yZ2FuaXNhdGlvbi5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIG9yZ2FuaXNhdGlvbnNUZXJtc09mVXNlUmVhZChpZDogc3RyaW5nLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gT3JnYW5pc2F0aW9uc0FwaUZwKGNvbmZpZ3VyYXRpb24pLm9yZ2FuaXNhdGlvbnNUZXJtc09mVXNlUmVhZChpZCwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBVcGRhdGVzIGFuIG9yZ2FuaXNhdGlvbi5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIE9yZ2FuaXNhdGlvbiBJZC5cbiAgICAgICAgICogQHBhcmFtIHtPcmdhbmlzYXRpb259IG9yZ2FuaXNhdGlvbiBPcmdhbmlzYXRpb24gSW5mb3JtYXRpb24uIEFsbCBmaWVsZHMgYXJlIHVwZGF0ZWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBvcmdhbmlzYXRpb25zVXBkYXRlKGlkOiBzdHJpbmcsIG9yZ2FuaXNhdGlvbjogT3JnYW5pc2F0aW9uLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gT3JnYW5pc2F0aW9uc0FwaUZwKGNvbmZpZ3VyYXRpb24pLm9yZ2FuaXNhdGlvbnNVcGRhdGUoaWQsIG9yZ2FuaXNhdGlvbiwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIGFuIE9yZ2FuaXNhdGlvblxcJ3MgcGxhbiBpbmZvcm1hdGlvbi5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHBsYW5HZXRQbGFuKG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBPcmdhbmlzYXRpb25zQXBpRnAoY29uZmlndXJhdGlvbikucGxhbkdldFBsYW4ob3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBTZXRcXCdzIGFuIE9yZ2FuaXNhdGlvblxcJ3MgcGxhbi5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtwbGFuVHlwZV0gVGhlIFBsYW4gVHlwZS4gU2hvdWxkIGJlIFBBWUcgb3IgR2xhemUuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBwbGFuU2V0UGxhbihwbGFuVHlwZT86IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIE9yZ2FuaXNhdGlvbnNBcGlGcChjb25maWd1cmF0aW9uKS5wbGFuU2V0UGxhbihwbGFuVHlwZSwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICB9O1xufTtcblxuLyoqXG4gKiBPcmdhbmlzYXRpb25zQXBpIC0gb2JqZWN0LW9yaWVudGVkIGludGVyZmFjZVxuICogQGV4cG9ydFxuICogQGNsYXNzIE9yZ2FuaXNhdGlvbnNBcGlcbiAqIEBleHRlbmRzIHtCYXNlQVBJfVxuICovXG5leHBvcnQgY2xhc3MgT3JnYW5pc2F0aW9uc0FwaSBleHRlbmRzIEJhc2VBUEkge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBzdW1tYXJ5IEdldHMgYW4gT3JnYW5pc2F0aW9uXFwncyBhY2NvdW50IGluZm9ybWF0aW9uLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBPcmdhbmlzYXRpb24gSWQuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBPcmdhbmlzYXRpb25zQXBpXG4gICAgICovXG4gICAgcHVibGljIGFjY291bnRSZWFkKGlkOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIE9yZ2FuaXNhdGlvbnNBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmFjY291bnRSZWFkKGlkLCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAc3VtbWFyeSBHZXRzIGFuIE9yZ2FuaXNhdGlvblxcJ3MgYWNjb3VudCBpbmZvcm1hdGlvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgT3JnYW5pc2F0aW9uIElkLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgT3JnYW5pc2F0aW9uc0FwaVxuICAgICAqL1xuICAgIHB1YmxpYyBhY2NvdW50UmVhZDIoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICByZXR1cm4gT3JnYW5pc2F0aW9uc0FwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuYWNjb3VudFJlYWQyKGlkLCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgbmV3IE9yZ2FuaXNhdGlvbi4gVGhpcyB3aWxsIGFzc2lnbiB0aGUgbG9nZ2VkIGluIHVzZXIgdG8gdGhlIG9yZ2FuaXNhdGlvbi5cbiAgICAgKiBAcGFyYW0ge09yZ2FuaXNhdGlvbn0gb3JnYW5pc2F0aW9uIEluZm9ybWF0aW9uIG9mIHRoZSBuZXcgT3JnYW5pc2F0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgT3JnYW5pc2F0aW9uc0FwaVxuICAgICAqL1xuICAgIHB1YmxpYyBvcmdhbmlzYXRpb25zQ3JlYXRlKG9yZ2FuaXNhdGlvbjogT3JnYW5pc2F0aW9uLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBPcmdhbmlzYXRpb25zQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5vcmdhbmlzYXRpb25zQ3JlYXRlKG9yZ2FuaXNhdGlvbiwgb3B0aW9ucykodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHN1bW1hcnkgRGVsZXRlcyBhbiBvcmdhbmlzYXRpb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIE9yZ2FuaXNhdGlvbiBJZC5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIE9yZ2FuaXNhdGlvbnNBcGlcbiAgICAgKi9cbiAgICBwdWJsaWMgb3JnYW5pc2F0aW9uc0RlbGV0ZShpZDogc3RyaW5nLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBPcmdhbmlzYXRpb25zQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5vcmdhbmlzYXRpb25zRGVsZXRlKGlkLCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAc3VtbWFyeSBHZXRzIGFuIG9yZ2FuaXNhdGlvblxcJ3MgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgT3JnYW5pc2F0aW9uIElkLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgT3JnYW5pc2F0aW9uc0FwaVxuICAgICAqL1xuICAgIHB1YmxpYyBvcmdhbmlzYXRpb25zUmVhZChpZDogc3RyaW5nLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBPcmdhbmlzYXRpb25zQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5vcmdhbmlzYXRpb25zUmVhZChpZCwgb3B0aW9ucykodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHN1bW1hcnkgR2V0cyBhbiBvcmdhbmlzYXRpb25cXCdzIGludml0YXRpb25zLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBPcmdhbmlzYXRpb24gSWQuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBPcmdhbmlzYXRpb25zQXBpXG4gICAgICovXG4gICAgcHVibGljIG9yZ2FuaXNhdGlvbnNSZWFkSW52aXRhdGlvbnMoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICByZXR1cm4gT3JnYW5pc2F0aW9uc0FwaUZwKHRoaXMuY29uZmlndXJhdGlvbikub3JnYW5pc2F0aW9uc1JlYWRJbnZpdGF0aW9ucyhpZCwgb3B0aW9ucykodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHN1bW1hcnkgR2V0cyBhIGxpc3Qgb2YgYW4gT3JnYW5pc2F0aW9uXFwncyBUZXJtcyBvZiBVc2UuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBJZCBvZiB0aGUgT3JnYW5pc2F0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgT3JnYW5pc2F0aW9uc0FwaVxuICAgICAqL1xuICAgIHB1YmxpYyBvcmdhbmlzYXRpb25zVGVybXNPZlVzZVJlYWQoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICByZXR1cm4gT3JnYW5pc2F0aW9uc0FwaUZwKHRoaXMuY29uZmlndXJhdGlvbikub3JnYW5pc2F0aW9uc1Rlcm1zT2ZVc2VSZWFkKGlkLCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAc3VtbWFyeSBVcGRhdGVzIGFuIG9yZ2FuaXNhdGlvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgT3JnYW5pc2F0aW9uIElkLlxuICAgICAqIEBwYXJhbSB7T3JnYW5pc2F0aW9ufSBvcmdhbmlzYXRpb24gT3JnYW5pc2F0aW9uIEluZm9ybWF0aW9uLiBBbGwgZmllbGRzIGFyZSB1cGRhdGVkLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgT3JnYW5pc2F0aW9uc0FwaVxuICAgICAqL1xuICAgIHB1YmxpYyBvcmdhbmlzYXRpb25zVXBkYXRlKGlkOiBzdHJpbmcsIG9yZ2FuaXNhdGlvbjogT3JnYW5pc2F0aW9uLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBPcmdhbmlzYXRpb25zQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5vcmdhbmlzYXRpb25zVXBkYXRlKGlkLCBvcmdhbmlzYXRpb24sIG9wdGlvbnMpKHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBzdW1tYXJ5IEdldHMgYW4gT3JnYW5pc2F0aW9uXFwncyBwbGFuIGluZm9ybWF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgT3JnYW5pc2F0aW9uc0FwaVxuICAgICAqL1xuICAgIHB1YmxpYyBwbGFuR2V0UGxhbihvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBPcmdhbmlzYXRpb25zQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5wbGFuR2V0UGxhbihvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAc3VtbWFyeSBTZXRcXCdzIGFuIE9yZ2FuaXNhdGlvblxcJ3MgcGxhbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3BsYW5UeXBlXSBUaGUgUGxhbiBUeXBlLiBTaG91bGQgYmUgUEFZRyBvciBHbGF6ZS5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIE9yZ2FuaXNhdGlvbnNBcGlcbiAgICAgKi9cbiAgICBwdWJsaWMgcGxhblNldFBsYW4ocGxhblR5cGU/OiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIE9yZ2FuaXNhdGlvbnNBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLnBsYW5TZXRQbGFuKHBsYW5UeXBlLCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbn1cblxuXG4vKipcbiAqIFBlcm1pc3Npb25BcGkgLSBheGlvcyBwYXJhbWV0ZXIgY3JlYXRvclxuICogQGV4cG9ydFxuICovXG5leHBvcnQgY29uc3QgUGVybWlzc2lvbkFwaUF4aW9zUGFyYW1DcmVhdG9yID0gZnVuY3Rpb24gKGNvbmZpZ3VyYXRpb24/OiBDb25maWd1cmF0aW9uKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBUaGUgcGVybWlzc2lvbiBsZXZlbCBmb3IgZWFjaCBvYmplY3QgaWQgaW4gdGhlIHJlcXVlc3QuXG4gICAgICAgICAqIEBwYXJhbSB7UGVybWlzc2lvbnNSZXF1ZXN0fSBwZXJtaXNzaW9uc1JlcXVlc3QgQSByZXF1ZXN0IG9iamVjdCBjb250YWluaW5nIHRoZSBsaXN0IG9mIGlkcyB0byBjaGVjay5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHBlcm1pc3Npb25HZXRQZXJtaXNzaW9ucyhwZXJtaXNzaW9uc1JlcXVlc3Q6IFBlcm1pc3Npb25zUmVxdWVzdCwgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdwZXJtaXNzaW9uc1JlcXVlc3QnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKHBlcm1pc3Npb25zUmVxdWVzdCA9PT0gbnVsbCB8fCBwZXJtaXNzaW9uc1JlcXVlc3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdwZXJtaXNzaW9uc1JlcXVlc3QnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgcGVybWlzc2lvbnNSZXF1ZXN0IHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgcGVybWlzc2lvbkdldFBlcm1pc3Npb25zLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9hcGkvcGVybWlzc2lvbnNgO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnUE9TVCcsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG5cbiAgICBcbiAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcblxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG4gICAgICAgICAgICBjb25zdCBuZWVkc1NlcmlhbGl6YXRpb24gPSAodHlwZW9mIHBlcm1pc3Npb25zUmVxdWVzdCAhPT0gXCJzdHJpbmdcIikgfHwgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5kYXRhID0gIG5lZWRzU2VyaWFsaXphdGlvbiA/IEpTT04uc3RyaW5naWZ5KHBlcm1pc3Npb25zUmVxdWVzdCAhPT0gdW5kZWZpbmVkID8gcGVybWlzc2lvbnNSZXF1ZXN0IDoge30pIDogKHBlcm1pc3Npb25zUmVxdWVzdCB8fCBcIlwiKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH1cbn07XG5cbi8qKlxuICogUGVybWlzc2lvbkFwaSAtIGZ1bmN0aW9uYWwgcHJvZ3JhbW1pbmcgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydCBjb25zdCBQZXJtaXNzaW9uQXBpRnAgPSBmdW5jdGlvbihjb25maWd1cmF0aW9uPzogQ29uZmlndXJhdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgVGhlIHBlcm1pc3Npb24gbGV2ZWwgZm9yIGVhY2ggb2JqZWN0IGlkIGluIHRoZSByZXF1ZXN0LlxuICAgICAgICAgKiBAcGFyYW0ge1Blcm1pc3Npb25zUmVxdWVzdH0gcGVybWlzc2lvbnNSZXF1ZXN0IEEgcmVxdWVzdCBvYmplY3QgY29udGFpbmluZyB0aGUgbGlzdCBvZiBpZHMgdG8gY2hlY2suXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBwZXJtaXNzaW9uR2V0UGVybWlzc2lvbnMocGVybWlzc2lvbnNSZXF1ZXN0OiBQZXJtaXNzaW9uc1JlcXVlc3QsIG9wdGlvbnM/OiBhbnkpOiAoYXhpb3M/OiBBeGlvc0luc3RhbmNlLCBiYXNlUGF0aD86IHN0cmluZykgPT4gQXhpb3NQcm9taXNlPFBlcm1pc3Npb25zUmVzcG9uc2U+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gUGVybWlzc2lvbkFwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLnBlcm1pc3Npb25HZXRQZXJtaXNzaW9ucyhwZXJtaXNzaW9uc1JlcXVlc3QsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfVxufTtcblxuLyoqXG4gKiBQZXJtaXNzaW9uQXBpIC0gZmFjdG9yeSBpbnRlcmZhY2VcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0IGNvbnN0IFBlcm1pc3Npb25BcGlGYWN0b3J5ID0gZnVuY3Rpb24gKGNvbmZpZ3VyYXRpb24/OiBDb25maWd1cmF0aW9uLCBiYXNlUGF0aD86IHN0cmluZywgYXhpb3M/OiBBeGlvc0luc3RhbmNlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBUaGUgcGVybWlzc2lvbiBsZXZlbCBmb3IgZWFjaCBvYmplY3QgaWQgaW4gdGhlIHJlcXVlc3QuXG4gICAgICAgICAqIEBwYXJhbSB7UGVybWlzc2lvbnNSZXF1ZXN0fSBwZXJtaXNzaW9uc1JlcXVlc3QgQSByZXF1ZXN0IG9iamVjdCBjb250YWluaW5nIHRoZSBsaXN0IG9mIGlkcyB0byBjaGVjay5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHBlcm1pc3Npb25HZXRQZXJtaXNzaW9ucyhwZXJtaXNzaW9uc1JlcXVlc3Q6IFBlcm1pc3Npb25zUmVxdWVzdCwgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIFBlcm1pc3Npb25BcGlGcChjb25maWd1cmF0aW9uKS5wZXJtaXNzaW9uR2V0UGVybWlzc2lvbnMocGVybWlzc2lvbnNSZXF1ZXN0LCBvcHRpb25zKShheGlvcywgYmFzZVBhdGgpO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuXG4vKipcbiAqIFBlcm1pc3Npb25BcGkgLSBvYmplY3Qtb3JpZW50ZWQgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgUGVybWlzc2lvbkFwaVxuICogQGV4dGVuZHMge0Jhc2VBUEl9XG4gKi9cbmV4cG9ydCBjbGFzcyBQZXJtaXNzaW9uQXBpIGV4dGVuZHMgQmFzZUFQSSB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHN1bW1hcnkgVGhlIHBlcm1pc3Npb24gbGV2ZWwgZm9yIGVhY2ggb2JqZWN0IGlkIGluIHRoZSByZXF1ZXN0LlxuICAgICAqIEBwYXJhbSB7UGVybWlzc2lvbnNSZXF1ZXN0fSBwZXJtaXNzaW9uc1JlcXVlc3QgQSByZXF1ZXN0IG9iamVjdCBjb250YWluaW5nIHRoZSBsaXN0IG9mIGlkcyB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIFBlcm1pc3Npb25BcGlcbiAgICAgKi9cbiAgICBwdWJsaWMgcGVybWlzc2lvbkdldFBlcm1pc3Npb25zKHBlcm1pc3Npb25zUmVxdWVzdDogUGVybWlzc2lvbnNSZXF1ZXN0LCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBQZXJtaXNzaW9uQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5wZXJtaXNzaW9uR2V0UGVybWlzc2lvbnMocGVybWlzc2lvbnNSZXF1ZXN0LCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbn1cblxuXG4vKipcbiAqIFNlYXJjaEFwaSAtIGF4aW9zIHBhcmFtZXRlciBjcmVhdG9yXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydCBjb25zdCBTZWFyY2hBcGlBeGlvc1BhcmFtQ3JlYXRvciA9IGZ1bmN0aW9uIChjb25maWd1cmF0aW9uPzogQ29uZmlndXJhdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgU2VhcmNoZXMgZm9yIEFtcGhvcmFlLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3Rlcm1dIEdldHMgb3Igc2V0cyB0aGUgZnJlZSB0ZXh0IHNlYXJjaCB0ZXJtLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2xhYmVsc10gR2V0cyBvciBzZXRzIHRoZSBjb21tYSBzZXBhcmF0ZWQgbGFiZWxzIHRoYXQgbXVzdCBiZSBpbmNsdWRlZCBpbiByZXN1bHRzLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29yZ0lkXSBHZXRzIG9yIHNldHMgdGhlIE9yZ2FuaXNhdGlvbiBJRCBmb3IgdGhlIEFtcGhvcmEuXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGF0XSBHZXRzIG9yIHNldHMgdGhlIGxhdGl0dWRlIChjZW50ZXIgb2Ygc2VhcmNoIGFyZWEpLlxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvbl0gR2V0cyBvciBzZXRzIHRoZSBsb25naXR1ZGUgKGNlbnRlciBvZiBzZWFyY2ggYXJlYSkuXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGlzdF0gR2V0cyBvciBzZXRzIHRoZSBkaXN0YW5jZSBmcm9tIGNlbnRlciBvZiBzZWFyY2ggYXJlYSAoZGVzY3JpYmluZyBhIGNpcmNsZSkuXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbdGFrZV0gR2V0cyBvciBzZXRzIGhvdyBtYW55IGl0ZW1zIHRvIHJldHVybi4gRGVmYXVsdHMgdG8gNjQuXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2tpcF0gR2V0cyBvciBzZXRzIGhvdyBtYW55IGl0ZW1zIHRvIHNraXAgYmVmb3JlIHJldHVybmluZy4gRGVmYXVsdHMgdG8gMC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHNlYXJjaFNlYXJjaEFtcGhvcmEodGVybT86IHN0cmluZywgbGFiZWxzPzogc3RyaW5nLCBvcmdJZD86IHN0cmluZywgbGF0PzogbnVtYmVyLCBsb24/OiBudW1iZXIsIGRpc3Q/OiBudW1iZXIsIHRha2U/OiBudW1iZXIsIHNraXA/OiBudW1iZXIsIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9hcGkvc2VhcmNoLXYyL2FtcGhvcmFlYDtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gZ2xvYmFsSW1wb3J0VXJsLnBhcnNlKGxvY2FsVmFyUGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSB7IG1ldGhvZDogJ0dFVCcsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGVybSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJRdWVyeVBhcmFtZXRlclsnVGVybSddID0gdGVybTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGxhYmVscyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJRdWVyeVBhcmFtZXRlclsnTGFiZWxzJ10gPSBsYWJlbHM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvcmdJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJRdWVyeVBhcmFtZXRlclsnT3JnSWQnXSA9IG9yZ0lkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobGF0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyWydMYXQnXSA9IGxhdDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGxvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJRdWVyeVBhcmFtZXRlclsnTG9uJ10gPSBsb247XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkaXN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyWydEaXN0J10gPSBkaXN0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGFrZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJRdWVyeVBhcmFtZXRlclsnVGFrZSddID0gdGFrZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNraXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXJbJ1NraXAnXSA9IHNraXA7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBnbG9iYWxJbXBvcnRVcmwuZm9ybWF0KGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBTZWFyY2hlcyBmb3IgT3JnYW5pc2F0aW9ucyB3aXRoIGZ1enp5IHNlYXJjaC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFt0ZXJtXSBHZXRzIG9yIHNldHMgdGhlIGZyZWUgdGV4dCBzZWFyY2ggdGVybS5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFt0YWtlXSBHZXRzIG9yIHNldHMgaG93IG1hbnkgaXRlbXMgdG8gcmV0dXJuLiBEZWZhdWx0cyB0byA2NC5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtza2lwXSBHZXRzIG9yIHNldHMgaG93IG1hbnkgaXRlbXMgdG8gc2tpcCBiZWZvcmUgcmV0dXJuaW5nLiBEZWZhdWx0cyB0byAwLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgc2VhcmNoU2VhcmNoT3JnYW5pc2F0aW9ucyh0ZXJtPzogc3RyaW5nLCB0YWtlPzogbnVtYmVyLCBza2lwPzogbnVtYmVyLCBvcHRpb25zOiBhbnkgPSB7fSk6IFJlcXVlc3RBcmdzIHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL3NlYXJjaC12Mi9vcmdhbmlzYXRpb25zYDtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gZ2xvYmFsSW1wb3J0VXJsLnBhcnNlKGxvY2FsVmFyUGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSB7IG1ldGhvZDogJ0dFVCcsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGVybSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJRdWVyeVBhcmFtZXRlclsnVGVybSddID0gdGVybTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRha2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXJbJ1Rha2UnXSA9IHRha2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChza2lwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyWydTa2lwJ10gPSBza2lwO1xuICAgICAgICAgICAgfVxuXG5cbiAgICBcbiAgICAgICAgICAgIGxvY2FsVmFyVXJsT2JqLnF1ZXJ5ID0gey4uLmxvY2FsVmFyVXJsT2JqLnF1ZXJ5LCAuLi5sb2NhbFZhclF1ZXJ5UGFyYW1ldGVyLCAuLi5vcHRpb25zLnF1ZXJ5fTtcbiAgICAgICAgICAgIC8vIGZpeCBvdmVycmlkZSBxdWVyeSBzdHJpbmcgRGV0YWlsOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzUxNzY3My8xMDc3OTQzXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxWYXJVcmxPYmouc2VhcmNoO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gey4uLmxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCAuLi5vcHRpb25zLmhlYWRlcnN9O1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogZ2xvYmFsSW1wb3J0VXJsLmZvcm1hdChsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfVxufTtcblxuLyoqXG4gKiBTZWFyY2hBcGkgLSBmdW5jdGlvbmFsIHByb2dyYW1taW5nIGludGVyZmFjZVxuICogQGV4cG9ydFxuICovXG5leHBvcnQgY29uc3QgU2VhcmNoQXBpRnAgPSBmdW5jdGlvbihjb25maWd1cmF0aW9uPzogQ29uZmlndXJhdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgU2VhcmNoZXMgZm9yIEFtcGhvcmFlLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3Rlcm1dIEdldHMgb3Igc2V0cyB0aGUgZnJlZSB0ZXh0IHNlYXJjaCB0ZXJtLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2xhYmVsc10gR2V0cyBvciBzZXRzIHRoZSBjb21tYSBzZXBhcmF0ZWQgbGFiZWxzIHRoYXQgbXVzdCBiZSBpbmNsdWRlZCBpbiByZXN1bHRzLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29yZ0lkXSBHZXRzIG9yIHNldHMgdGhlIE9yZ2FuaXNhdGlvbiBJRCBmb3IgdGhlIEFtcGhvcmEuXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGF0XSBHZXRzIG9yIHNldHMgdGhlIGxhdGl0dWRlIChjZW50ZXIgb2Ygc2VhcmNoIGFyZWEpLlxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvbl0gR2V0cyBvciBzZXRzIHRoZSBsb25naXR1ZGUgKGNlbnRlciBvZiBzZWFyY2ggYXJlYSkuXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGlzdF0gR2V0cyBvciBzZXRzIHRoZSBkaXN0YW5jZSBmcm9tIGNlbnRlciBvZiBzZWFyY2ggYXJlYSAoZGVzY3JpYmluZyBhIGNpcmNsZSkuXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbdGFrZV0gR2V0cyBvciBzZXRzIGhvdyBtYW55IGl0ZW1zIHRvIHJldHVybi4gRGVmYXVsdHMgdG8gNjQuXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2tpcF0gR2V0cyBvciBzZXRzIGhvdyBtYW55IGl0ZW1zIHRvIHNraXAgYmVmb3JlIHJldHVybmluZy4gRGVmYXVsdHMgdG8gMC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHNlYXJjaFNlYXJjaEFtcGhvcmEodGVybT86IHN0cmluZywgbGFiZWxzPzogc3RyaW5nLCBvcmdJZD86IHN0cmluZywgbGF0PzogbnVtYmVyLCBsb24/OiBudW1iZXIsIGRpc3Q/OiBudW1iZXIsIHRha2U/OiBudW1iZXIsIHNraXA/OiBudW1iZXIsIG9wdGlvbnM/OiBhbnkpOiAoYXhpb3M/OiBBeGlvc0luc3RhbmNlLCBiYXNlUGF0aD86IHN0cmluZykgPT4gQXhpb3NQcm9taXNlPFNlYXJjaFJlc3BvbnNlT2ZCYXNpY0FtcGhvcmE+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gU2VhcmNoQXBpQXhpb3NQYXJhbUNyZWF0b3IoY29uZmlndXJhdGlvbikuc2VhcmNoU2VhcmNoQW1waG9yYSh0ZXJtLCBsYWJlbHMsIG9yZ0lkLCBsYXQsIGxvbiwgZGlzdCwgdGFrZSwgc2tpcCwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gKGF4aW9zOiBBeGlvc0luc3RhbmNlID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoOiBzdHJpbmcgPSBCQVNFX1BBVEgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlvc1JlcXVlc3RBcmdzID0gey4uLmxvY2FsVmFyQXhpb3NBcmdzLm9wdGlvbnMsIHVybDogYmFzZVBhdGggKyBsb2NhbFZhckF4aW9zQXJncy51cmx9O1xuICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5yZXF1ZXN0KGF4aW9zUmVxdWVzdEFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBTZWFyY2hlcyBmb3IgT3JnYW5pc2F0aW9ucyB3aXRoIGZ1enp5IHNlYXJjaC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFt0ZXJtXSBHZXRzIG9yIHNldHMgdGhlIGZyZWUgdGV4dCBzZWFyY2ggdGVybS5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFt0YWtlXSBHZXRzIG9yIHNldHMgaG93IG1hbnkgaXRlbXMgdG8gcmV0dXJuLiBEZWZhdWx0cyB0byA2NC5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtza2lwXSBHZXRzIG9yIHNldHMgaG93IG1hbnkgaXRlbXMgdG8gc2tpcCBiZWZvcmUgcmV0dXJuaW5nLiBEZWZhdWx0cyB0byAwLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgc2VhcmNoU2VhcmNoT3JnYW5pc2F0aW9ucyh0ZXJtPzogc3RyaW5nLCB0YWtlPzogbnVtYmVyLCBza2lwPzogbnVtYmVyLCBvcHRpb25zPzogYW55KTogKGF4aW9zPzogQXhpb3NJbnN0YW5jZSwgYmFzZVBhdGg/OiBzdHJpbmcpID0+IEF4aW9zUHJvbWlzZTxTZWFyY2hSZXNwb25zZU9mT3JnYW5pc2F0aW9uPiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IFNlYXJjaEFwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLnNlYXJjaFNlYXJjaE9yZ2FuaXNhdGlvbnModGVybSwgdGFrZSwgc2tpcCwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gKGF4aW9zOiBBeGlvc0luc3RhbmNlID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoOiBzdHJpbmcgPSBCQVNFX1BBVEgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlvc1JlcXVlc3RBcmdzID0gey4uLmxvY2FsVmFyQXhpb3NBcmdzLm9wdGlvbnMsIHVybDogYmFzZVBhdGggKyBsb2NhbFZhckF4aW9zQXJncy51cmx9O1xuICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5yZXF1ZXN0KGF4aW9zUmVxdWVzdEFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9XG59O1xuXG4vKipcbiAqIFNlYXJjaEFwaSAtIGZhY3RvcnkgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydCBjb25zdCBTZWFyY2hBcGlGYWN0b3J5ID0gZnVuY3Rpb24gKGNvbmZpZ3VyYXRpb24/OiBDb25maWd1cmF0aW9uLCBiYXNlUGF0aD86IHN0cmluZywgYXhpb3M/OiBBeGlvc0luc3RhbmNlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBTZWFyY2hlcyBmb3IgQW1waG9yYWUuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGVybV0gR2V0cyBvciBzZXRzIHRoZSBmcmVlIHRleHQgc2VhcmNoIHRlcm0uXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbbGFiZWxzXSBHZXRzIG9yIHNldHMgdGhlIGNvbW1hIHNlcGFyYXRlZCBsYWJlbHMgdGhhdCBtdXN0IGJlIGluY2x1ZGVkIGluIHJlc3VsdHMuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3JnSWRdIEdldHMgb3Igc2V0cyB0aGUgT3JnYW5pc2F0aW9uIElEIGZvciB0aGUgQW1waG9yYS5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsYXRdIEdldHMgb3Igc2V0cyB0aGUgbGF0aXR1ZGUgKGNlbnRlciBvZiBzZWFyY2ggYXJlYSkuXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG9uXSBHZXRzIG9yIHNldHMgdGhlIGxvbmdpdHVkZSAoY2VudGVyIG9mIHNlYXJjaCBhcmVhKS5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtkaXN0XSBHZXRzIG9yIHNldHMgdGhlIGRpc3RhbmNlIGZyb20gY2VudGVyIG9mIHNlYXJjaCBhcmVhIChkZXNjcmliaW5nIGEgY2lyY2xlKS5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFt0YWtlXSBHZXRzIG9yIHNldHMgaG93IG1hbnkgaXRlbXMgdG8gcmV0dXJuLiBEZWZhdWx0cyB0byA2NC5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtza2lwXSBHZXRzIG9yIHNldHMgaG93IG1hbnkgaXRlbXMgdG8gc2tpcCBiZWZvcmUgcmV0dXJuaW5nLiBEZWZhdWx0cyB0byAwLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgc2VhcmNoU2VhcmNoQW1waG9yYSh0ZXJtPzogc3RyaW5nLCBsYWJlbHM/OiBzdHJpbmcsIG9yZ0lkPzogc3RyaW5nLCBsYXQ/OiBudW1iZXIsIGxvbj86IG51bWJlciwgZGlzdD86IG51bWJlciwgdGFrZT86IG51bWJlciwgc2tpcD86IG51bWJlciwgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIFNlYXJjaEFwaUZwKGNvbmZpZ3VyYXRpb24pLnNlYXJjaFNlYXJjaEFtcGhvcmEodGVybSwgbGFiZWxzLCBvcmdJZCwgbGF0LCBsb24sIGRpc3QsIHRha2UsIHNraXAsIG9wdGlvbnMpKGF4aW9zLCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgU2VhcmNoZXMgZm9yIE9yZ2FuaXNhdGlvbnMgd2l0aCBmdXp6eSBzZWFyY2guXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGVybV0gR2V0cyBvciBzZXRzIHRoZSBmcmVlIHRleHQgc2VhcmNoIHRlcm0uXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbdGFrZV0gR2V0cyBvciBzZXRzIGhvdyBtYW55IGl0ZW1zIHRvIHJldHVybi4gRGVmYXVsdHMgdG8gNjQuXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2tpcF0gR2V0cyBvciBzZXRzIGhvdyBtYW55IGl0ZW1zIHRvIHNraXAgYmVmb3JlIHJldHVybmluZy4gRGVmYXVsdHMgdG8gMC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHNlYXJjaFNlYXJjaE9yZ2FuaXNhdGlvbnModGVybT86IHN0cmluZywgdGFrZT86IG51bWJlciwgc2tpcD86IG51bWJlciwgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIFNlYXJjaEFwaUZwKGNvbmZpZ3VyYXRpb24pLnNlYXJjaFNlYXJjaE9yZ2FuaXNhdGlvbnModGVybSwgdGFrZSwgc2tpcCwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICB9O1xufTtcblxuLyoqXG4gKiBTZWFyY2hBcGkgLSBvYmplY3Qtb3JpZW50ZWQgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgU2VhcmNoQXBpXG4gKiBAZXh0ZW5kcyB7QmFzZUFQSX1cbiAqL1xuZXhwb3J0IGNsYXNzIFNlYXJjaEFwaSBleHRlbmRzIEJhc2VBUEkge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBzdW1tYXJ5IFNlYXJjaGVzIGZvciBBbXBob3JhZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3Rlcm1dIEdldHMgb3Igc2V0cyB0aGUgZnJlZSB0ZXh0IHNlYXJjaCB0ZXJtLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbbGFiZWxzXSBHZXRzIG9yIHNldHMgdGhlIGNvbW1hIHNlcGFyYXRlZCBsYWJlbHMgdGhhdCBtdXN0IGJlIGluY2x1ZGVkIGluIHJlc3VsdHMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcmdJZF0gR2V0cyBvciBzZXRzIHRoZSBPcmdhbmlzYXRpb24gSUQgZm9yIHRoZSBBbXBob3JhLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGF0XSBHZXRzIG9yIHNldHMgdGhlIGxhdGl0dWRlIChjZW50ZXIgb2Ygc2VhcmNoIGFyZWEpLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG9uXSBHZXRzIG9yIHNldHMgdGhlIGxvbmdpdHVkZSAoY2VudGVyIG9mIHNlYXJjaCBhcmVhKS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Rpc3RdIEdldHMgb3Igc2V0cyB0aGUgZGlzdGFuY2UgZnJvbSBjZW50ZXIgb2Ygc2VhcmNoIGFyZWEgKGRlc2NyaWJpbmcgYSBjaXJjbGUpLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbdGFrZV0gR2V0cyBvciBzZXRzIGhvdyBtYW55IGl0ZW1zIHRvIHJldHVybi4gRGVmYXVsdHMgdG8gNjQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtza2lwXSBHZXRzIG9yIHNldHMgaG93IG1hbnkgaXRlbXMgdG8gc2tpcCBiZWZvcmUgcmV0dXJuaW5nLiBEZWZhdWx0cyB0byAwLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgU2VhcmNoQXBpXG4gICAgICovXG4gICAgcHVibGljIHNlYXJjaFNlYXJjaEFtcGhvcmEodGVybT86IHN0cmluZywgbGFiZWxzPzogc3RyaW5nLCBvcmdJZD86IHN0cmluZywgbGF0PzogbnVtYmVyLCBsb24/OiBudW1iZXIsIGRpc3Q/OiBudW1iZXIsIHRha2U/OiBudW1iZXIsIHNraXA/OiBudW1iZXIsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIFNlYXJjaEFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuc2VhcmNoU2VhcmNoQW1waG9yYSh0ZXJtLCBsYWJlbHMsIG9yZ0lkLCBsYXQsIGxvbiwgZGlzdCwgdGFrZSwgc2tpcCwgb3B0aW9ucykodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHN1bW1hcnkgU2VhcmNoZXMgZm9yIE9yZ2FuaXNhdGlvbnMgd2l0aCBmdXp6eSBzZWFyY2guXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0ZXJtXSBHZXRzIG9yIHNldHMgdGhlIGZyZWUgdGV4dCBzZWFyY2ggdGVybS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Rha2VdIEdldHMgb3Igc2V0cyBob3cgbWFueSBpdGVtcyB0byByZXR1cm4uIERlZmF1bHRzIHRvIDY0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2tpcF0gR2V0cyBvciBzZXRzIGhvdyBtYW55IGl0ZW1zIHRvIHNraXAgYmVmb3JlIHJldHVybmluZy4gRGVmYXVsdHMgdG8gMC5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIFNlYXJjaEFwaVxuICAgICAqL1xuICAgIHB1YmxpYyBzZWFyY2hTZWFyY2hPcmdhbmlzYXRpb25zKHRlcm0/OiBzdHJpbmcsIHRha2U/OiBudW1iZXIsIHNraXA/OiBudW1iZXIsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIFNlYXJjaEFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuc2VhcmNoU2VhcmNoT3JnYW5pc2F0aW9ucyh0ZXJtLCB0YWtlLCBza2lwLCBvcHRpb25zKSh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKTtcbiAgICB9XG5cbn1cblxuXG4vKipcbiAqIFRlcm1zT2ZVc2VBcGkgLSBheGlvcyBwYXJhbWV0ZXIgY3JlYXRvclxuICogQGV4cG9ydFxuICovXG5leHBvcnQgY29uc3QgVGVybXNPZlVzZUFwaUF4aW9zUGFyYW1DcmVhdG9yID0gZnVuY3Rpb24gKGNvbmZpZ3VyYXRpb24/OiBDb25maWd1cmF0aW9uKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBBY2NlcHRzIGEgVGVybXMgb2YgVXNlLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIFRlcm1zIG9mIFVzZSBpZC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHRlcm1zT2ZVc2VBY2NlcHQoaWQ6IHN0cmluZywgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdpZCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAoaWQgPT09IG51bGwgfHwgaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdpZCcsJ1JlcXVpcmVkIHBhcmFtZXRlciBpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHRlcm1zT2ZVc2VBY2NlcHQuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS9UZXJtc09mVXNlL3tpZH0vQWNjZXB0c2BcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJpZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGlkKSkpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnUE9TVCcsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG5cbiAgICBcbiAgICAgICAgICAgIGxvY2FsVmFyVXJsT2JqLnF1ZXJ5ID0gey4uLmxvY2FsVmFyVXJsT2JqLnF1ZXJ5LCAuLi5sb2NhbFZhclF1ZXJ5UGFyYW1ldGVyLCAuLi5vcHRpb25zLnF1ZXJ5fTtcbiAgICAgICAgICAgIC8vIGZpeCBvdmVycmlkZSBxdWVyeSBzdHJpbmcgRGV0YWlsOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzUxNzY3My8xMDc3OTQzXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxWYXJVcmxPYmouc2VhcmNoO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gey4uLmxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCAuLi5vcHRpb25zLmhlYWRlcnN9O1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogZ2xvYmFsSW1wb3J0VXJsLmZvcm1hdChsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIFRlcm1zIG9mIFVzZSBvYmplY3QuXG4gICAgICAgICAqIEBwYXJhbSB7Q3JlYXRlVGVybXNPZlVzZX0gY3JlYXRlVGVybXNPZlVzZSBUaGUgdGVybXMgb2YgdXNlIHRvIGNyZWF0ZS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHRlcm1zT2ZVc2VDcmVhdGUoY3JlYXRlVGVybXNPZlVzZTogQ3JlYXRlVGVybXNPZlVzZSwgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdjcmVhdGVUZXJtc09mVXNlJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGlmIChjcmVhdGVUZXJtc09mVXNlID09PSBudWxsIHx8IGNyZWF0ZVRlcm1zT2ZVc2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZEVycm9yKCdjcmVhdGVUZXJtc09mVXNlJywnUmVxdWlyZWQgcGFyYW1ldGVyIGNyZWF0ZVRlcm1zT2ZVc2Ugd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyB0ZXJtc09mVXNlQ3JlYXRlLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9hcGkvVGVybXNPZlVzZWA7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IGdsb2JhbEltcG9ydFVybC5wYXJzZShsb2NhbFZhclBhdGgsIHRydWUpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0geyBtZXRob2Q6ICdQT1NUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcbiAgICAgICAgICAgIGNvbnN0IG5lZWRzU2VyaWFsaXphdGlvbiA9ICh0eXBlb2YgY3JlYXRlVGVybXNPZlVzZSAhPT0gXCJzdHJpbmdcIikgfHwgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5kYXRhID0gIG5lZWRzU2VyaWFsaXphdGlvbiA/IEpTT04uc3RyaW5naWZ5KGNyZWF0ZVRlcm1zT2ZVc2UgIT09IHVuZGVmaW5lZCA/IGNyZWF0ZVRlcm1zT2ZVc2UgOiB7fSkgOiAoY3JlYXRlVGVybXNPZlVzZSB8fCBcIlwiKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IERlbGV0ZXMgYSBUZXJtcyBvZiBVc2Ugb2JqZWN0LlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIHRlcm1zIG9mIHVzZSBpZCB0byBkZWxldGUuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICB0ZXJtc09mVXNlRGVsZXRlKGlkOiBzdHJpbmcsIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnaWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGlkID09PSBudWxsIHx8IGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignaWQnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgaWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyB0ZXJtc09mVXNlRGVsZXRlLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9hcGkvVGVybXNPZlVzZS97aWR9YFxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcImlkXCJ9fWAsIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoaWQpKSk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IGdsb2JhbEltcG9ydFVybC5wYXJzZShsb2NhbFZhclBhdGgsIHRydWUpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0geyBtZXRob2Q6ICdERUxFVEUnLCAuLi5iYXNlT3B0aW9ucywgLi4ub3B0aW9uc307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9IGFzIGFueTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG5cbiAgICAgICAgICAgIC8vIGF1dGhlbnRpY2F0aW9uIEJlYXJlciByZXF1aXJlZFxuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5hcGlLZXkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckFwaUtleVZhbHVlID0gdHlwZW9mIGNvbmZpZ3VyYXRpb24uYXBpS2V5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgID8gY29uZmlndXJhdGlvbi5hcGlLZXkoXCJBdXRob3JpemF0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgIDogY29uZmlndXJhdGlvbi5hcGlLZXk7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbXCJBdXRob3JpemF0aW9uXCJdID0gbG9jYWxWYXJBcGlLZXlWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IFJldHVybnMgYWxsIFRlcm1zIG9mIFVzZS5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFt0YWtlXSBHZXRzIG9yIHNldHMgaG93IG1hbnkgaXRlbXMgdG8gcmV0dXJuLiBEZWZhdWx0cyB0byA2NC5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtza2lwXSBHZXRzIG9yIHNldHMgaG93IG1hbnkgaXRlbXMgdG8gc2tpcCBiZWZvcmUgcmV0dXJuaW5nLiBEZWZhdWx0cyB0byAwLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgdGVybXNPZlVzZUxpc3QodGFrZT86IG51bWJlciwgc2tpcD86IG51bWJlciwgb3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS9UZXJtc09mVXNlYDtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gZ2xvYmFsSW1wb3J0VXJsLnBhcnNlKGxvY2FsVmFyUGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSB7IG1ldGhvZDogJ0dFVCcsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGFrZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJRdWVyeVBhcmFtZXRlclsnVGFrZSddID0gdGFrZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNraXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXJbJ1NraXAnXSA9IHNraXA7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBnbG9iYWxJbXBvcnRVcmwuZm9ybWF0KGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBSZXR1cm5zIGFsbCBUZXJtcyBvZiBVc2UuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHRlcm1zT2ZVc2VSZWFkKGlkOiBzdHJpbmcsIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnaWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGlkID09PSBudWxsIHx8IGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignaWQnLCdSZXF1aXJlZCBwYXJhbWV0ZXIgaWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyB0ZXJtc09mVXNlUmVhZC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL1Rlcm1zT2ZVc2Uve2lkfWBcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJpZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGlkKSkpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnR0VUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBnbG9iYWxJbXBvcnRVcmwuZm9ybWF0KGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9XG59O1xuXG4vKipcbiAqIFRlcm1zT2ZVc2VBcGkgLSBmdW5jdGlvbmFsIHByb2dyYW1taW5nIGludGVyZmFjZVxuICogQGV4cG9ydFxuICovXG5leHBvcnQgY29uc3QgVGVybXNPZlVzZUFwaUZwID0gZnVuY3Rpb24oY29uZmlndXJhdGlvbj86IENvbmZpZ3VyYXRpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEFjY2VwdHMgYSBUZXJtcyBvZiBVc2UuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgVGVybXMgb2YgVXNlIGlkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgdGVybXNPZlVzZUFjY2VwdChpZDogc3RyaW5nLCBvcHRpb25zPzogYW55KTogKGF4aW9zPzogQXhpb3NJbnN0YW5jZSwgYmFzZVBhdGg/OiBzdHJpbmcpID0+IEF4aW9zUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IFRlcm1zT2ZVc2VBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS50ZXJtc09mVXNlQWNjZXB0KGlkLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYSBUZXJtcyBvZiBVc2Ugb2JqZWN0LlxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZVRlcm1zT2ZVc2V9IGNyZWF0ZVRlcm1zT2ZVc2UgVGhlIHRlcm1zIG9mIHVzZSB0byBjcmVhdGUuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICB0ZXJtc09mVXNlQ3JlYXRlKGNyZWF0ZVRlcm1zT2ZVc2U6IENyZWF0ZVRlcm1zT2ZVc2UsIG9wdGlvbnM/OiBhbnkpOiAoYXhpb3M/OiBBeGlvc0luc3RhbmNlLCBiYXNlUGF0aD86IHN0cmluZykgPT4gQXhpb3NQcm9taXNlPFRlcm1zT2ZVc2U+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gVGVybXNPZlVzZUFwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLnRlcm1zT2ZVc2VDcmVhdGUoY3JlYXRlVGVybXNPZlVzZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gKGF4aW9zOiBBeGlvc0luc3RhbmNlID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoOiBzdHJpbmcgPSBCQVNFX1BBVEgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlvc1JlcXVlc3RBcmdzID0gey4uLmxvY2FsVmFyQXhpb3NBcmdzLm9wdGlvbnMsIHVybDogYmFzZVBhdGggKyBsb2NhbFZhckF4aW9zQXJncy51cmx9O1xuICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5yZXF1ZXN0KGF4aW9zUmVxdWVzdEFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBEZWxldGVzIGEgVGVybXMgb2YgVXNlIG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSB0ZXJtcyBvZiB1c2UgaWQgdG8gZGVsZXRlLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgdGVybXNPZlVzZURlbGV0ZShpZDogc3RyaW5nLCBvcHRpb25zPzogYW55KTogKGF4aW9zPzogQXhpb3NJbnN0YW5jZSwgYmFzZVBhdGg/OiBzdHJpbmcpID0+IEF4aW9zUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IFRlcm1zT2ZVc2VBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS50ZXJtc09mVXNlRGVsZXRlKGlkLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IFJldHVybnMgYWxsIFRlcm1zIG9mIFVzZS5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFt0YWtlXSBHZXRzIG9yIHNldHMgaG93IG1hbnkgaXRlbXMgdG8gcmV0dXJuLiBEZWZhdWx0cyB0byA2NC5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtza2lwXSBHZXRzIG9yIHNldHMgaG93IG1hbnkgaXRlbXMgdG8gc2tpcCBiZWZvcmUgcmV0dXJuaW5nLiBEZWZhdWx0cyB0byAwLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgdGVybXNPZlVzZUxpc3QodGFrZT86IG51bWJlciwgc2tpcD86IG51bWJlciwgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8QXJyYXk8VGVybXNPZlVzZT4+IHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0gVGVybXNPZlVzZUFwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLnRlcm1zT2ZVc2VMaXN0KHRha2UsIHNraXAsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgUmV0dXJucyBhbGwgVGVybXMgb2YgVXNlLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICB0ZXJtc09mVXNlUmVhZChpZDogc3RyaW5nLCBvcHRpb25zPzogYW55KTogKGF4aW9zPzogQXhpb3NJbnN0YW5jZSwgYmFzZVBhdGg/OiBzdHJpbmcpID0+IEF4aW9zUHJvbWlzZTxUZXJtc09mVXNlPiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IFRlcm1zT2ZVc2VBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS50ZXJtc09mVXNlUmVhZChpZCwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gKGF4aW9zOiBBeGlvc0luc3RhbmNlID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoOiBzdHJpbmcgPSBCQVNFX1BBVEgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlvc1JlcXVlc3RBcmdzID0gey4uLmxvY2FsVmFyQXhpb3NBcmdzLm9wdGlvbnMsIHVybDogYmFzZVBhdGggKyBsb2NhbFZhckF4aW9zQXJncy51cmx9O1xuICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5yZXF1ZXN0KGF4aW9zUmVxdWVzdEFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9XG59O1xuXG4vKipcbiAqIFRlcm1zT2ZVc2VBcGkgLSBmYWN0b3J5IGludGVyZmFjZVxuICogQGV4cG9ydFxuICovXG5leHBvcnQgY29uc3QgVGVybXNPZlVzZUFwaUZhY3RvcnkgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbj86IENvbmZpZ3VyYXRpb24sIGJhc2VQYXRoPzogc3RyaW5nLCBheGlvcz86IEF4aW9zSW5zdGFuY2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEFjY2VwdHMgYSBUZXJtcyBvZiBVc2UuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgVGVybXMgb2YgVXNlIGlkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgdGVybXNPZlVzZUFjY2VwdChpZDogc3RyaW5nLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gVGVybXNPZlVzZUFwaUZwKGNvbmZpZ3VyYXRpb24pLnRlcm1zT2ZVc2VBY2NlcHQoaWQsIG9wdGlvbnMpKGF4aW9zLCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIFRlcm1zIG9mIFVzZSBvYmplY3QuXG4gICAgICAgICAqIEBwYXJhbSB7Q3JlYXRlVGVybXNPZlVzZX0gY3JlYXRlVGVybXNPZlVzZSBUaGUgdGVybXMgb2YgdXNlIHRvIGNyZWF0ZS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHRlcm1zT2ZVc2VDcmVhdGUoY3JlYXRlVGVybXNPZlVzZTogQ3JlYXRlVGVybXNPZlVzZSwgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIFRlcm1zT2ZVc2VBcGlGcChjb25maWd1cmF0aW9uKS50ZXJtc09mVXNlQ3JlYXRlKGNyZWF0ZVRlcm1zT2ZVc2UsIG9wdGlvbnMpKGF4aW9zLCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgRGVsZXRlcyBhIFRlcm1zIG9mIFVzZSBvYmplY3QuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgdGVybXMgb2YgdXNlIGlkIHRvIGRlbGV0ZS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHRlcm1zT2ZVc2VEZWxldGUoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIFRlcm1zT2ZVc2VBcGlGcChjb25maWd1cmF0aW9uKS50ZXJtc09mVXNlRGVsZXRlKGlkLCBvcHRpb25zKShheGlvcywgYmFzZVBhdGgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IFJldHVybnMgYWxsIFRlcm1zIG9mIFVzZS5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFt0YWtlXSBHZXRzIG9yIHNldHMgaG93IG1hbnkgaXRlbXMgdG8gcmV0dXJuLiBEZWZhdWx0cyB0byA2NC5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtza2lwXSBHZXRzIG9yIHNldHMgaG93IG1hbnkgaXRlbXMgdG8gc2tpcCBiZWZvcmUgcmV0dXJuaW5nLiBEZWZhdWx0cyB0byAwLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgdGVybXNPZlVzZUxpc3QodGFrZT86IG51bWJlciwgc2tpcD86IG51bWJlciwgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIFRlcm1zT2ZVc2VBcGlGcChjb25maWd1cmF0aW9uKS50ZXJtc09mVXNlTGlzdCh0YWtlLCBza2lwLCBvcHRpb25zKShheGlvcywgYmFzZVBhdGgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IFJldHVybnMgYWxsIFRlcm1zIG9mIFVzZS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgdGVybXNPZlVzZVJlYWQoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIFRlcm1zT2ZVc2VBcGlGcChjb25maWd1cmF0aW9uKS50ZXJtc09mVXNlUmVhZChpZCwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICB9O1xufTtcblxuLyoqXG4gKiBUZXJtc09mVXNlQXBpIC0gb2JqZWN0LW9yaWVudGVkIGludGVyZmFjZVxuICogQGV4cG9ydFxuICogQGNsYXNzIFRlcm1zT2ZVc2VBcGlcbiAqIEBleHRlbmRzIHtCYXNlQVBJfVxuICovXG5leHBvcnQgY2xhc3MgVGVybXNPZlVzZUFwaSBleHRlbmRzIEJhc2VBUEkge1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBzdW1tYXJ5IEFjY2VwdHMgYSBUZXJtcyBvZiBVc2UuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBUZXJtcyBvZiBVc2UgaWQuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBUZXJtc09mVXNlQXBpXG4gICAgICovXG4gICAgcHVibGljIHRlcm1zT2ZVc2VBY2NlcHQoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICByZXR1cm4gVGVybXNPZlVzZUFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikudGVybXNPZlVzZUFjY2VwdChpZCwgb3B0aW9ucykodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIFRlcm1zIG9mIFVzZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtDcmVhdGVUZXJtc09mVXNlfSBjcmVhdGVUZXJtc09mVXNlIFRoZSB0ZXJtcyBvZiB1c2UgdG8gY3JlYXRlLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgVGVybXNPZlVzZUFwaVxuICAgICAqL1xuICAgIHB1YmxpYyB0ZXJtc09mVXNlQ3JlYXRlKGNyZWF0ZVRlcm1zT2ZVc2U6IENyZWF0ZVRlcm1zT2ZVc2UsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIFRlcm1zT2ZVc2VBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLnRlcm1zT2ZVc2VDcmVhdGUoY3JlYXRlVGVybXNPZlVzZSwgb3B0aW9ucykodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHN1bW1hcnkgRGVsZXRlcyBhIFRlcm1zIG9mIFVzZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSB0ZXJtcyBvZiB1c2UgaWQgdG8gZGVsZXRlLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgVGVybXNPZlVzZUFwaVxuICAgICAqL1xuICAgIHB1YmxpYyB0ZXJtc09mVXNlRGVsZXRlKGlkOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIFRlcm1zT2ZVc2VBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLnRlcm1zT2ZVc2VEZWxldGUoaWQsIG9wdGlvbnMpKHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBzdW1tYXJ5IFJldHVybnMgYWxsIFRlcm1zIG9mIFVzZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Rha2VdIEdldHMgb3Igc2V0cyBob3cgbWFueSBpdGVtcyB0byByZXR1cm4uIERlZmF1bHRzIHRvIDY0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2tpcF0gR2V0cyBvciBzZXRzIGhvdyBtYW55IGl0ZW1zIHRvIHNraXAgYmVmb3JlIHJldHVybmluZy4gRGVmYXVsdHMgdG8gMC5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIFRlcm1zT2ZVc2VBcGlcbiAgICAgKi9cbiAgICBwdWJsaWMgdGVybXNPZlVzZUxpc3QodGFrZT86IG51bWJlciwgc2tpcD86IG51bWJlciwgb3B0aW9ucz86IGFueSkge1xuICAgICAgICByZXR1cm4gVGVybXNPZlVzZUFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikudGVybXNPZlVzZUxpc3QodGFrZSwgc2tpcCwgb3B0aW9ucykodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHN1bW1hcnkgUmV0dXJucyBhbGwgVGVybXMgb2YgVXNlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBcbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIFRlcm1zT2ZVc2VBcGlcbiAgICAgKi9cbiAgICBwdWJsaWMgdGVybXNPZlVzZVJlYWQoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFueSkge1xuICAgICAgICByZXR1cm4gVGVybXNPZlVzZUFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikudGVybXNPZlVzZVJlYWQoaWQsIG9wdGlvbnMpKHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpO1xuICAgIH1cblxufVxuXG5cbi8qKlxuICogVGltZVNlcmllc0FwaSAtIGF4aW9zIHBhcmFtZXRlciBjcmVhdG9yXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydCBjb25zdCBUaW1lU2VyaWVzQXBpQXhpb3NQYXJhbUNyZWF0b3IgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbj86IENvbmZpZ3VyYXRpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IFVwZGF0ZXMgdGhlIGRldGFpbHMgb2YgYW4gQW1waG9yYSBieSBJZC5cbiAgICAgICAgICogQHBhcmFtIHtRdWVyeVJlcXVlc3R9IHF1ZXJ5UmVxdWVzdCBUaW1lIFNlcmllcyBxdWVyeS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvdHNpY2xpZW50L2Jsb2IvbWFzdGVyL2RvY3MvU2VydmVyLm1kI2Z1bmN0aW9ucyAuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICB0aW1lU2VyaWVzUXVlcnlUaW1lU2VyaWVzKHF1ZXJ5UmVxdWVzdDogUXVlcnlSZXF1ZXN0LCBvcHRpb25zOiBhbnkgPSB7fSk6IFJlcXVlc3RBcmdzIHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ3F1ZXJ5UmVxdWVzdCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBpZiAocXVlcnlSZXF1ZXN0ID09PSBudWxsIHx8IHF1ZXJ5UmVxdWVzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVpcmVkRXJyb3IoJ3F1ZXJ5UmVxdWVzdCcsJ1JlcXVpcmVkIHBhcmFtZXRlciBxdWVyeVJlcXVlc3Qgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyB0aW1lU2VyaWVzUXVlcnlUaW1lU2VyaWVzLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9hcGkvdGltZXNlcmllcy9xdWVyeWA7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IGdsb2JhbEltcG9ydFVybC5wYXJzZShsb2NhbFZhclBhdGgsIHRydWUpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0geyBtZXRob2Q6ICdQT1NUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG4gICAgICAgICAgICBsb2NhbFZhclVybE9iai5xdWVyeSA9IHsuLi5sb2NhbFZhclVybE9iai5xdWVyeSwgLi4ubG9jYWxWYXJRdWVyeVBhcmFtZXRlciwgLi4ub3B0aW9ucy5xdWVyeX07XG4gICAgICAgICAgICAvLyBmaXggb3ZlcnJpZGUgcXVlcnkgc3RyaW5nIERldGFpbDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc1MTc2NzMvMTA3Nzk0M1xuICAgICAgICAgICAgZGVsZXRlIGxvY2FsVmFyVXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHsuLi5sb2NhbFZhckhlYWRlclBhcmFtZXRlciwgLi4ub3B0aW9ucy5oZWFkZXJzfTtcbiAgICAgICAgICAgIGNvbnN0IG5lZWRzU2VyaWFsaXphdGlvbiA9ICh0eXBlb2YgcXVlcnlSZXF1ZXN0ICE9PSBcInN0cmluZ1wiKSB8fCBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID09PSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmRhdGEgPSAgbmVlZHNTZXJpYWxpemF0aW9uID8gSlNPTi5zdHJpbmdpZnkocXVlcnlSZXF1ZXN0ICE9PSB1bmRlZmluZWQgPyBxdWVyeVJlcXVlc3QgOiB7fSkgOiAocXVlcnlSZXF1ZXN0IHx8IFwiXCIpO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogZ2xvYmFsSW1wb3J0VXJsLmZvcm1hdChsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfVxufTtcblxuLyoqXG4gKiBUaW1lU2VyaWVzQXBpIC0gZnVuY3Rpb25hbCBwcm9ncmFtbWluZyBpbnRlcmZhY2VcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0IGNvbnN0IFRpbWVTZXJpZXNBcGlGcCA9IGZ1bmN0aW9uKGNvbmZpZ3VyYXRpb24/OiBDb25maWd1cmF0aW9uKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBVcGRhdGVzIHRoZSBkZXRhaWxzIG9mIGFuIEFtcGhvcmEgYnkgSWQuXG4gICAgICAgICAqIEBwYXJhbSB7UXVlcnlSZXF1ZXN0fSBxdWVyeVJlcXVlc3QgVGltZSBTZXJpZXMgcXVlcnkuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L3RzaWNsaWVudC9ibG9iL21hc3Rlci9kb2NzL1NlcnZlci5tZCNmdW5jdGlvbnMgLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgdGltZVNlcmllc1F1ZXJ5VGltZVNlcmllcyhxdWVyeVJlcXVlc3Q6IFF1ZXJ5UmVxdWVzdCwgb3B0aW9ucz86IGFueSk6IChheGlvcz86IEF4aW9zSW5zdGFuY2UsIGJhc2VQYXRoPzogc3RyaW5nKSA9PiBBeGlvc1Byb21pc2U8UXVlcnlSZXN1bHRQYWdlPiB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IFRpbWVTZXJpZXNBcGlBeGlvc1BhcmFtQ3JlYXRvcihjb25maWd1cmF0aW9uKS50aW1lU2VyaWVzUXVlcnlUaW1lU2VyaWVzKHF1ZXJ5UmVxdWVzdCwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gKGF4aW9zOiBBeGlvc0luc3RhbmNlID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoOiBzdHJpbmcgPSBCQVNFX1BBVEgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlvc1JlcXVlc3RBcmdzID0gey4uLmxvY2FsVmFyQXhpb3NBcmdzLm9wdGlvbnMsIHVybDogYmFzZVBhdGggKyBsb2NhbFZhckF4aW9zQXJncy51cmx9O1xuICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5yZXF1ZXN0KGF4aW9zUmVxdWVzdEFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9XG59O1xuXG4vKipcbiAqIFRpbWVTZXJpZXNBcGkgLSBmYWN0b3J5IGludGVyZmFjZVxuICogQGV4cG9ydFxuICovXG5leHBvcnQgY29uc3QgVGltZVNlcmllc0FwaUZhY3RvcnkgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbj86IENvbmZpZ3VyYXRpb24sIGJhc2VQYXRoPzogc3RyaW5nLCBheGlvcz86IEF4aW9zSW5zdGFuY2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IFVwZGF0ZXMgdGhlIGRldGFpbHMgb2YgYW4gQW1waG9yYSBieSBJZC5cbiAgICAgICAgICogQHBhcmFtIHtRdWVyeVJlcXVlc3R9IHF1ZXJ5UmVxdWVzdCBUaW1lIFNlcmllcyBxdWVyeS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvdHNpY2xpZW50L2Jsb2IvbWFzdGVyL2RvY3MvU2VydmVyLm1kI2Z1bmN0aW9ucyAuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICB0aW1lU2VyaWVzUXVlcnlUaW1lU2VyaWVzKHF1ZXJ5UmVxdWVzdDogUXVlcnlSZXF1ZXN0LCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gVGltZVNlcmllc0FwaUZwKGNvbmZpZ3VyYXRpb24pLnRpbWVTZXJpZXNRdWVyeVRpbWVTZXJpZXMocXVlcnlSZXF1ZXN0LCBvcHRpb25zKShheGlvcywgYmFzZVBhdGgpO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuXG4vKipcbiAqIFRpbWVTZXJpZXNBcGkgLSBvYmplY3Qtb3JpZW50ZWQgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgVGltZVNlcmllc0FwaVxuICogQGV4dGVuZHMge0Jhc2VBUEl9XG4gKi9cbmV4cG9ydCBjbGFzcyBUaW1lU2VyaWVzQXBpIGV4dGVuZHMgQmFzZUFQSSB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHN1bW1hcnkgVXBkYXRlcyB0aGUgZGV0YWlscyBvZiBhbiBBbXBob3JhIGJ5IElkLlxuICAgICAqIEBwYXJhbSB7UXVlcnlSZXF1ZXN0fSBxdWVyeVJlcXVlc3QgVGltZSBTZXJpZXMgcXVlcnkuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L3RzaWNsaWVudC9ibG9iL21hc3Rlci9kb2NzL1NlcnZlci5tZCNmdW5jdGlvbnMgLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgVGltZVNlcmllc0FwaVxuICAgICAqL1xuICAgIHB1YmxpYyB0aW1lU2VyaWVzUXVlcnlUaW1lU2VyaWVzKHF1ZXJ5UmVxdWVzdDogUXVlcnlSZXF1ZXN0LCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHJldHVybiBUaW1lU2VyaWVzQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS50aW1lU2VyaWVzUXVlcnlUaW1lU2VyaWVzKHF1ZXJ5UmVxdWVzdCwgb3B0aW9ucykodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCk7XG4gICAgfVxuXG59XG5cblxuLyoqXG4gKiBVc2Vyc0FwaSAtIGF4aW9zIHBhcmFtZXRlciBjcmVhdG9yXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydCBjb25zdCBVc2Vyc0FwaUF4aW9zUGFyYW1DcmVhdG9yID0gZnVuY3Rpb24gKGNvbmZpZ3VyYXRpb24/OiBDb25maWd1cmF0aW9uKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgbmV3IFVzZXIuIFJldHVybnMgdGhlIHBhc3N3b3JkLlxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZUFtcGhvcmFVc2VyfSBjcmVhdGVBbXBob3JhVXNlciBVc2VyIHBhcmFtZXRlcnMuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICB1c2Vyc0NyZWF0ZShjcmVhdGVBbXBob3JhVXNlcjogQ3JlYXRlQW1waG9yYVVzZXIsIG9wdGlvbnM6IGFueSA9IHt9KTogUmVxdWVzdEFyZ3Mge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnY3JlYXRlQW1waG9yYVVzZXInIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgaWYgKGNyZWF0ZUFtcGhvcmFVc2VyID09PSBudWxsIHx8IGNyZWF0ZUFtcGhvcmFVc2VyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWlyZWRFcnJvcignY3JlYXRlQW1waG9yYVVzZXInLCdSZXF1aXJlZCBwYXJhbWV0ZXIgY3JlYXRlQW1waG9yYVVzZXIgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyB1c2Vyc0NyZWF0ZS4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL3VzZXJzYDtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gZ2xvYmFsSW1wb3J0VXJsLnBhcnNlKGxvY2FsVmFyUGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSB7IG1ldGhvZDogJ1BPU1QnLCAuLi5iYXNlT3B0aW9ucywgLi4ub3B0aW9uc307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9IGFzIGFueTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG5cbiAgICAgICAgICAgIC8vIGF1dGhlbnRpY2F0aW9uIEJlYXJlciByZXF1aXJlZFxuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5hcGlLZXkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckFwaUtleVZhbHVlID0gdHlwZW9mIGNvbmZpZ3VyYXRpb24uYXBpS2V5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgID8gY29uZmlndXJhdGlvbi5hcGlLZXkoXCJBdXRob3JpemF0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgIDogY29uZmlndXJhdGlvbi5hcGlLZXk7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbXCJBdXRob3JpemF0aW9uXCJdID0gbG9jYWxWYXJBcGlLZXlWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgXG4gICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlclsnQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7XG5cbiAgICAgICAgICAgIGxvY2FsVmFyVXJsT2JqLnF1ZXJ5ID0gey4uLmxvY2FsVmFyVXJsT2JqLnF1ZXJ5LCAuLi5sb2NhbFZhclF1ZXJ5UGFyYW1ldGVyLCAuLi5vcHRpb25zLnF1ZXJ5fTtcbiAgICAgICAgICAgIC8vIGZpeCBvdmVycmlkZSBxdWVyeSBzdHJpbmcgRGV0YWlsOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzUxNzY3My8xMDc3OTQzXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxWYXJVcmxPYmouc2VhcmNoO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gey4uLmxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCAuLi5vcHRpb25zLmhlYWRlcnN9O1xuICAgICAgICAgICAgY29uc3QgbmVlZHNTZXJpYWxpemF0aW9uID0gKHR5cGVvZiBjcmVhdGVBbXBob3JhVXNlciAhPT0gXCJzdHJpbmdcIikgfHwgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5kYXRhID0gIG5lZWRzU2VyaWFsaXphdGlvbiA/IEpTT04uc3RyaW5naWZ5KGNyZWF0ZUFtcGhvcmFVc2VyICE9PSB1bmRlZmluZWQgPyBjcmVhdGVBbXBob3JhVXNlciA6IHt9KSA6IChjcmVhdGVBbXBob3JhVXNlciB8fCBcIlwiKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGdsb2JhbEltcG9ydFVybC5mb3JtYXQobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgbG9nZ2VkIGluIHVzZXJzIGluZm9ybWF0aW9uLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgdXNlcnNSZWFkU2VsZihvcHRpb25zOiBhbnkgPSB7fSk6IFJlcXVlc3RBcmdzIHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXBpL3VzZXJzL3NlbGZgO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBnbG9iYWxJbXBvcnRVcmwucGFyc2UobG9jYWxWYXJQYXRoLCB0cnVlKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IHsgbWV0aG9kOiAnR0VUJywgLi4uYmFzZU9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fSBhcyBhbnk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge30gYXMgYW55O1xuXG4gICAgICAgICAgICAvLyBhdXRoZW50aWNhdGlvbiBCZWFyZXIgcmVxdWlyZWRcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBcGlLZXlWYWx1ZSA9IHR5cGVvZiBjb25maWd1cmF0aW9uLmFwaUtleSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZ3VyYXRpb24uYXBpS2V5KFwiQXV0aG9yaXphdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICA6IGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IGxvY2FsVmFyQXBpS2V5VmFsdWU7XG4gICAgICAgICAgICB9XG5cblxuICAgIFxuICAgICAgICAgICAgbG9jYWxWYXJVcmxPYmoucXVlcnkgPSB7Li4ubG9jYWxWYXJVcmxPYmoucXVlcnksIC4uLmxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIsIC4uLm9wdGlvbnMucXVlcnl9O1xuICAgICAgICAgICAgLy8gZml4IG92ZXJyaWRlIHF1ZXJ5IHN0cmluZyBEZXRhaWw6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTE3NjczLzEwNzc5NDNcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbFZhclVybE9iai5zZWFyY2g7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSB7Li4ubG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIsIC4uLm9wdGlvbnMuaGVhZGVyc307XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBnbG9iYWxJbXBvcnRVcmwuZm9ybWF0KGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9XG59O1xuXG4vKipcbiAqIFVzZXJzQXBpIC0gZnVuY3Rpb25hbCBwcm9ncmFtbWluZyBpbnRlcmZhY2VcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0IGNvbnN0IFVzZXJzQXBpRnAgPSBmdW5jdGlvbihjb25maWd1cmF0aW9uPzogQ29uZmlndXJhdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIG5ldyBVc2VyLiBSZXR1cm5zIHRoZSBwYXNzd29yZC5cbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVBbXBob3JhVXNlcn0gY3JlYXRlQW1waG9yYVVzZXIgVXNlciBwYXJhbWV0ZXJzLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgdXNlcnNDcmVhdGUoY3JlYXRlQW1waG9yYVVzZXI6IENyZWF0ZUFtcGhvcmFVc2VyLCBvcHRpb25zPzogYW55KTogKGF4aW9zPzogQXhpb3NJbnN0YW5jZSwgYmFzZVBhdGg/OiBzdHJpbmcpID0+IEF4aW9zUHJvbWlzZTxBbXBob3JhVXNlcj4ge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSBVc2Vyc0FwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLnVzZXJzQ3JlYXRlKGNyZWF0ZUFtcGhvcmFVc2VyLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAoYXhpb3M6IEF4aW9zSW5zdGFuY2UgPSBnbG9iYWxBeGlvcywgYmFzZVBhdGg6IHN0cmluZyA9IEJBU0VfUEFUSCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSB7Li4ubG9jYWxWYXJBeGlvc0FyZ3Mub3B0aW9ucywgdXJsOiBiYXNlUGF0aCArIGxvY2FsVmFyQXhpb3NBcmdzLnVybH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLnJlcXVlc3QoYXhpb3NSZXF1ZXN0QXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgbG9nZ2VkIGluIHVzZXJzIGluZm9ybWF0aW9uLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgdXNlcnNSZWFkU2VsZihvcHRpb25zPzogYW55KTogKGF4aW9zPzogQXhpb3NJbnN0YW5jZSwgYmFzZVBhdGg/OiBzdHJpbmcpID0+IEF4aW9zUHJvbWlzZTxBbXBob3JhVXNlcj4ge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSBVc2Vyc0FwaUF4aW9zUGFyYW1DcmVhdG9yKGNvbmZpZ3VyYXRpb24pLnVzZXJzUmVhZFNlbGYob3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gKGF4aW9zOiBBeGlvc0luc3RhbmNlID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoOiBzdHJpbmcgPSBCQVNFX1BBVEgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlvc1JlcXVlc3RBcmdzID0gey4uLmxvY2FsVmFyQXhpb3NBcmdzLm9wdGlvbnMsIHVybDogYmFzZVBhdGggKyBsb2NhbFZhckF4aW9zQXJncy51cmx9O1xuICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5yZXF1ZXN0KGF4aW9zUmVxdWVzdEFyZ3MpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9XG59O1xuXG4vKipcbiAqIFVzZXJzQXBpIC0gZmFjdG9yeSBpbnRlcmZhY2VcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0IGNvbnN0IFVzZXJzQXBpRmFjdG9yeSA9IGZ1bmN0aW9uIChjb25maWd1cmF0aW9uPzogQ29uZmlndXJhdGlvbiwgYmFzZVBhdGg/OiBzdHJpbmcsIGF4aW9zPzogQXhpb3NJbnN0YW5jZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIG5ldyBVc2VyLiBSZXR1cm5zIHRoZSBwYXNzd29yZC5cbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVBbXBob3JhVXNlcn0gY3JlYXRlQW1waG9yYVVzZXIgVXNlciBwYXJhbWV0ZXJzLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgdXNlcnNDcmVhdGUoY3JlYXRlQW1waG9yYVVzZXI6IENyZWF0ZUFtcGhvcmFVc2VyLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gVXNlcnNBcGlGcChjb25maWd1cmF0aW9uKS51c2Vyc0NyZWF0ZShjcmVhdGVBbXBob3JhVXNlciwgb3B0aW9ucykoYXhpb3MsIGJhc2VQYXRoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIGxvZ2dlZCBpbiB1c2VycyBpbmZvcm1hdGlvbi5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHVzZXJzUmVhZFNlbGYob3B0aW9ucz86IGFueSkge1xuICAgICAgICAgICAgcmV0dXJuIFVzZXJzQXBpRnAoY29uZmlndXJhdGlvbikudXNlcnNSZWFkU2VsZihvcHRpb25zKShheGlvcywgYmFzZVBhdGgpO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuXG4vKipcbiAqIFVzZXJzQXBpIC0gb2JqZWN0LW9yaWVudGVkIGludGVyZmFjZVxuICogQGV4cG9ydFxuICogQGNsYXNzIFVzZXJzQXBpXG4gKiBAZXh0ZW5kcyB7QmFzZUFQSX1cbiAqL1xuZXhwb3J0IGNsYXNzIFVzZXJzQXBpIGV4dGVuZHMgQmFzZUFQSSB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIG5ldyBVc2VyLiBSZXR1cm5zIHRoZSBwYXNzd29yZC5cbiAgICAgKiBAcGFyYW0ge0NyZWF0ZUFtcGhvcmFVc2VyfSBjcmVhdGVBbXBob3JhVXNlciBVc2VyIHBhcmFtZXRlcnMuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBVc2Vyc0FwaVxuICAgICAqL1xuICAgIHB1YmxpYyB1c2Vyc0NyZWF0ZShjcmVhdGVBbXBob3JhVXNlcjogQ3JlYXRlQW1waG9yYVVzZXIsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIFVzZXJzQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS51c2Vyc0NyZWF0ZShjcmVhdGVBbXBob3JhVXNlciwgb3B0aW9ucykodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHN1bW1hcnkgR2V0cyBsb2dnZWQgaW4gdXNlcnMgaW5mb3JtYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBVc2Vyc0FwaVxuICAgICAqL1xuICAgIHB1YmxpYyB1c2Vyc1JlYWRTZWxmKG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIFVzZXJzQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS51c2Vyc1JlYWRTZWxmKG9wdGlvbnMpKHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpO1xuICAgIH1cblxufVxuXG5cbi8qKlxuICogVmVyc2lvbkFwaSAtIGF4aW9zIHBhcmFtZXRlciBjcmVhdG9yXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydCBjb25zdCBWZXJzaW9uQXBpQXhpb3NQYXJhbUNyZWF0b3IgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbj86IENvbmZpZ3VyYXRpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldHMgdGhlIGN1cnJlbnQgc2VydmVyIHZlcnNpb24uXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICB2ZXJzaW9uR2V0Q3VycmVudFZlcnNpb24ob3B0aW9uczogYW55ID0ge30pOiBSZXF1ZXN0QXJncyB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2FwaS92ZXJzaW9uYDtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gZ2xvYmFsSW1wb3J0VXJsLnBhcnNlKGxvY2FsVmFyUGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSB7IG1ldGhvZDogJ0dFVCcsIC4uLmJhc2VPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge30gYXMgYW55O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9IGFzIGFueTtcblxuICAgICAgICAgICAgLy8gYXV0aGVudGljYXRpb24gQmVhcmVyIHJlcXVpcmVkXG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFwaUtleSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBjb25maWd1cmF0aW9uLmFwaUtleShcIkF1dGhvcml6YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgOiBjb25maWd1cmF0aW9uLmFwaUtleTtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlcltcIkF1dGhvcml6YXRpb25cIl0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICAgICAgfVxuXG5cbiAgICBcbiAgICAgICAgICAgIGxvY2FsVmFyVXJsT2JqLnF1ZXJ5ID0gey4uLmxvY2FsVmFyVXJsT2JqLnF1ZXJ5LCAuLi5sb2NhbFZhclF1ZXJ5UGFyYW1ldGVyLCAuLi5vcHRpb25zLnF1ZXJ5fTtcbiAgICAgICAgICAgIC8vIGZpeCBvdmVycmlkZSBxdWVyeSBzdHJpbmcgRGV0YWlsOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzUxNzY3My8xMDc3OTQzXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxWYXJVcmxPYmouc2VhcmNoO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gey4uLmxvY2FsVmFySGVhZGVyUGFyYW1ldGVyLCAuLi5vcHRpb25zLmhlYWRlcnN9O1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogZ2xvYmFsSW1wb3J0VXJsLmZvcm1hdChsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfVxufTtcblxuLyoqXG4gKiBWZXJzaW9uQXBpIC0gZnVuY3Rpb25hbCBwcm9ncmFtbWluZyBpbnRlcmZhY2VcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0IGNvbnN0IFZlcnNpb25BcGlGcCA9IGZ1bmN0aW9uKGNvbmZpZ3VyYXRpb24/OiBDb25maWd1cmF0aW9uKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIHRoZSBjdXJyZW50IHNlcnZlciB2ZXJzaW9uLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgdmVyc2lvbkdldEN1cnJlbnRWZXJzaW9uKG9wdGlvbnM/OiBhbnkpOiAoYXhpb3M/OiBBeGlvc0luc3RhbmNlLCBiYXNlUGF0aD86IHN0cmluZykgPT4gQXhpb3NQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSBWZXJzaW9uQXBpQXhpb3NQYXJhbUNyZWF0b3IoY29uZmlndXJhdGlvbikudmVyc2lvbkdldEN1cnJlbnRWZXJzaW9uKG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIChheGlvczogQXhpb3NJbnN0YW5jZSA9IGdsb2JhbEF4aW9zLCBiYXNlUGF0aDogc3RyaW5nID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0QXJncyA9IHsuLi5sb2NhbFZhckF4aW9zQXJncy5vcHRpb25zLCB1cmw6IGJhc2VQYXRoICsgbG9jYWxWYXJBeGlvc0FyZ3MudXJsfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfVxufTtcblxuLyoqXG4gKiBWZXJzaW9uQXBpIC0gZmFjdG9yeSBpbnRlcmZhY2VcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0IGNvbnN0IFZlcnNpb25BcGlGYWN0b3J5ID0gZnVuY3Rpb24gKGNvbmZpZ3VyYXRpb24/OiBDb25maWd1cmF0aW9uLCBiYXNlUGF0aD86IHN0cmluZywgYXhpb3M/OiBBeGlvc0luc3RhbmNlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIHRoZSBjdXJyZW50IHNlcnZlciB2ZXJzaW9uLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgdmVyc2lvbkdldEN1cnJlbnRWZXJzaW9uKG9wdGlvbnM/OiBhbnkpIHtcbiAgICAgICAgICAgIHJldHVybiBWZXJzaW9uQXBpRnAoY29uZmlndXJhdGlvbikudmVyc2lvbkdldEN1cnJlbnRWZXJzaW9uKG9wdGlvbnMpKGF4aW9zLCBiYXNlUGF0aCk7XG4gICAgICAgIH0sXG4gICAgfTtcbn07XG5cbi8qKlxuICogVmVyc2lvbkFwaSAtIG9iamVjdC1vcmllbnRlZCBpbnRlcmZhY2VcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBWZXJzaW9uQXBpXG4gKiBAZXh0ZW5kcyB7QmFzZUFQSX1cbiAqL1xuZXhwb3J0IGNsYXNzIFZlcnNpb25BcGkgZXh0ZW5kcyBCYXNlQVBJIHtcbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAc3VtbWFyeSBHZXRzIHRoZSBjdXJyZW50IHNlcnZlciB2ZXJzaW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgVmVyc2lvbkFwaVxuICAgICAqL1xuICAgIHB1YmxpYyB2ZXJzaW9uR2V0Q3VycmVudFZlcnNpb24ob3B0aW9ucz86IGFueSkge1xuICAgICAgICByZXR1cm4gVmVyc2lvbkFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikudmVyc2lvbkdldEN1cnJlbnRWZXJzaW9uKG9wdGlvbnMpKHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpO1xuICAgIH1cblxufVxuXG5cbiJdfQ==