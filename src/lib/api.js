"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VersionApi = exports.VersionApiFactory = exports.VersionApiFp = exports.VersionApiAxiosParamCreator = exports.UsersApi = exports.UsersApiFactory = exports.UsersApiFp = exports.UsersApiAxiosParamCreator = exports.TimeSeriesApi = exports.TimeSeriesApiFactory = exports.TimeSeriesApiFp = exports.TimeSeriesApiAxiosParamCreator = exports.TermsOfUseApi = exports.TermsOfUseApiFactory = exports.TermsOfUseApiFp = exports.TermsOfUseApiAxiosParamCreator = exports.SearchApi = exports.SearchApiFactory = exports.SearchApiFp = exports.SearchApiAxiosParamCreator = exports.PermissionApi = exports.PermissionApiFactory = exports.PermissionApiFp = exports.PermissionApiAxiosParamCreator = exports.OrganisationsApi = exports.OrganisationsApiFactory = exports.OrganisationsApiFp = exports.OrganisationsApiAxiosParamCreator = exports.MarketApi = exports.MarketApiFactory = exports.MarketApiFp = exports.MarketApiAxiosParamCreator = exports.IdentityApi = exports.IdentityApiFactory = exports.IdentityApiFp = exports.IdentityApiAxiosParamCreator = exports.AuthenticationApi = exports.AuthenticationApiFactory = exports.AuthenticationApiFp = exports.AuthenticationApiAxiosParamCreator = exports.ApplicationsApi = exports.ApplicationsApiFactory = exports.ApplicationsApiFp = exports.ApplicationsApiAxiosParamCreator = exports.AmphoraeApi = exports.AmphoraeApiFactory = exports.AmphoraeApiFp = exports.AmphoraeApiAxiosParamCreator = exports.ActivitiesApi = exports.ActivitiesApiFactory = exports.ActivitiesApiFp = exports.ActivitiesApiAxiosParamCreator = exports.PlanTypes = void 0;

var globalImportUrl = _interopRequireWildcard(require("url"));

var _axios = _interopRequireDefault(require("axios"));

var _base = require("./base");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * 
 * @export
 * @enum {string}
 */
var PlanTypes;
/**
 * 
 * @export
 * @interface Poi
 */

exports.PlanTypes = PlanTypes;

(function (PlanTypes) {
  PlanTypes[PlanTypes["NUMBER_0"] = 0] = "NUMBER_0";
  PlanTypes[PlanTypes["NUMBER_1"] = 1] = "NUMBER_1";
  PlanTypes[PlanTypes["NUMBER_2"] = 2] = "NUMBER_2";
})(PlanTypes || (exports.PlanTypes = PlanTypes = {}));

/**
 * ActivitiesApi - axios parameter creator
 * @export
 */
var ActivitiesApiAxiosParamCreator = function ActivitiesApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary Creates a new activity.
     * @param {CreateActivity} createActivity Metadata of the new activity.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesCreateActivity: function activitiesCreateActivity(createActivity, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'createActivity' is not null or undefined
      if (createActivity === null || createActivity === undefined) {
        throw new _base.RequiredError('createActivity', 'Required parameter createActivity was null or undefined when calling activitiesCreateActivity.');
      }

      var localVarPath = "/api/activities";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'POST'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      var needsSerialization = typeof createActivity !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(createActivity !== undefined ? createActivity : {}) : createActivity || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Deletes an activity.
     * @param {string} id The activity Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesDeleteActivity: function activitiesDeleteActivity(id, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling activitiesDeleteActivity.');
      }

      var localVarPath = "/api/activities/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'DELETE'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets the metadata of an activity.
     * @param {string} id The activity Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesReadActivity: function activitiesReadActivity(id, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling activitiesReadActivity.');
      }

      var localVarPath = "/api/activities/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary References an Amphora during a run.
     * @param {string} id The activity Id.
     * @param {string} runId The run Id.
     * @param {string} amphoraId The Id of the Amphora to reference.
     * @param {AmphoraReference} amphoraReference Information about the reference.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesReferenceAmphora: function activitiesReferenceAmphora(id, runId, amphoraId, amphoraReference, xAmphoradataVersion) {
      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling activitiesReferenceAmphora.');
      } // verify required parameter 'runId' is not null or undefined


      if (runId === null || runId === undefined) {
        throw new _base.RequiredError('runId', 'Required parameter runId was null or undefined when calling activitiesReferenceAmphora.');
      } // verify required parameter 'amphoraId' is not null or undefined


      if (amphoraId === null || amphoraId === undefined) {
        throw new _base.RequiredError('amphoraId', 'Required parameter amphoraId was null or undefined when calling activitiesReferenceAmphora.');
      } // verify required parameter 'amphoraReference' is not null or undefined


      if (amphoraReference === null || amphoraReference === undefined) {
        throw new _base.RequiredError('amphoraReference', 'Required parameter amphoraReference was null or undefined when calling activitiesReferenceAmphora.');
      }

      var localVarPath = "/api/activities/{id}/Runs/{runId}/amphorae/{amphoraId}".replace("{".concat("id", "}"), encodeURIComponent(String(id))).replace("{".concat("runId", "}"), encodeURIComponent(String(runId))).replace("{".concat("amphoraId", "}"), encodeURIComponent(String(amphoraId)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'PUT'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      var needsSerialization = typeof amphoraReference !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(amphoraReference !== undefined ? amphoraReference : {}) : amphoraReference || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Starts a new run of an activity.
     * @param {string} id The activity id in which to start a run.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesStartRun: function activitiesStartRun(id, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling activitiesStartRun.');
      }

      var localVarPath = "/api/activities/{id}/Runs".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'POST'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Updates and completes a run.
     * @param {string} id The activity Id.
     * @param {string} runId The run Id.
     * @param {UpdateRun} updateRun Information about the update.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesUpdateRun: function activitiesUpdateRun(id, runId, updateRun, xAmphoradataVersion) {
      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling activitiesUpdateRun.');
      } // verify required parameter 'runId' is not null or undefined


      if (runId === null || runId === undefined) {
        throw new _base.RequiredError('runId', 'Required parameter runId was null or undefined when calling activitiesUpdateRun.');
      } // verify required parameter 'updateRun' is not null or undefined


      if (updateRun === null || updateRun === undefined) {
        throw new _base.RequiredError('updateRun', 'Required parameter updateRun was null or undefined when calling activitiesUpdateRun.');
      }

      var localVarPath = "/api/activities/{id}/Runs/{runId}".replace("{".concat("id", "}"), encodeURIComponent(String(id))).replace("{".concat("runId", "}"), encodeURIComponent(String(runId)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'POST'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      var needsSerialization = typeof updateRun !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(updateRun !== undefined ? updateRun : {}) : updateRun || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * ActivitiesApi - functional programming interface
 * @export
 */


exports.ActivitiesApiAxiosParamCreator = ActivitiesApiAxiosParamCreator;

var ActivitiesApiFp = function ActivitiesApiFp(configuration) {
  return {
    /**
     * 
     * @summary Creates a new activity.
     * @param {CreateActivity} createActivity Metadata of the new activity.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesCreateActivity: function activitiesCreateActivity(createActivity, xAmphoradataVersion, options) {
      var localVarAxiosArgs = ActivitiesApiAxiosParamCreator(configuration).activitiesCreateActivity(createActivity, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Deletes an activity.
     * @param {string} id The activity Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesDeleteActivity: function activitiesDeleteActivity(id, xAmphoradataVersion, options) {
      var localVarAxiosArgs = ActivitiesApiAxiosParamCreator(configuration).activitiesDeleteActivity(id, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets the metadata of an activity.
     * @param {string} id The activity Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesReadActivity: function activitiesReadActivity(id, xAmphoradataVersion, options) {
      var localVarAxiosArgs = ActivitiesApiAxiosParamCreator(configuration).activitiesReadActivity(id, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary References an Amphora during a run.
     * @param {string} id The activity Id.
     * @param {string} runId The run Id.
     * @param {string} amphoraId The Id of the Amphora to reference.
     * @param {AmphoraReference} amphoraReference Information about the reference.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesReferenceAmphora: function activitiesReferenceAmphora(id, runId, amphoraId, amphoraReference, xAmphoradataVersion, options) {
      var localVarAxiosArgs = ActivitiesApiAxiosParamCreator(configuration).activitiesReferenceAmphora(id, runId, amphoraId, amphoraReference, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Starts a new run of an activity.
     * @param {string} id The activity id in which to start a run.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesStartRun: function activitiesStartRun(id, xAmphoradataVersion, options) {
      var localVarAxiosArgs = ActivitiesApiAxiosParamCreator(configuration).activitiesStartRun(id, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Updates and completes a run.
     * @param {string} id The activity Id.
     * @param {string} runId The run Id.
     * @param {UpdateRun} updateRun Information about the update.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesUpdateRun: function activitiesUpdateRun(id, runId, updateRun, xAmphoradataVersion, options) {
      var localVarAxiosArgs = ActivitiesApiAxiosParamCreator(configuration).activitiesUpdateRun(id, runId, updateRun, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * ActivitiesApi - factory interface
 * @export
 */


exports.ActivitiesApiFp = ActivitiesApiFp;

var ActivitiesApiFactory = function ActivitiesApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary Creates a new activity.
     * @param {CreateActivity} createActivity Metadata of the new activity.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesCreateActivity: function activitiesCreateActivity(createActivity, xAmphoradataVersion, options) {
      return ActivitiesApiFp(configuration).activitiesCreateActivity(createActivity, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Deletes an activity.
     * @param {string} id The activity Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesDeleteActivity: function activitiesDeleteActivity(id, xAmphoradataVersion, options) {
      return ActivitiesApiFp(configuration).activitiesDeleteActivity(id, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets the metadata of an activity.
     * @param {string} id The activity Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesReadActivity: function activitiesReadActivity(id, xAmphoradataVersion, options) {
      return ActivitiesApiFp(configuration).activitiesReadActivity(id, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary References an Amphora during a run.
     * @param {string} id The activity Id.
     * @param {string} runId The run Id.
     * @param {string} amphoraId The Id of the Amphora to reference.
     * @param {AmphoraReference} amphoraReference Information about the reference.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesReferenceAmphora: function activitiesReferenceAmphora(id, runId, amphoraId, amphoraReference, xAmphoradataVersion, options) {
      return ActivitiesApiFp(configuration).activitiesReferenceAmphora(id, runId, amphoraId, amphoraReference, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Starts a new run of an activity.
     * @param {string} id The activity id in which to start a run.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesStartRun: function activitiesStartRun(id, xAmphoradataVersion, options) {
      return ActivitiesApiFp(configuration).activitiesStartRun(id, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Updates and completes a run.
     * @param {string} id The activity Id.
     * @param {string} runId The run Id.
     * @param {UpdateRun} updateRun Information about the update.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activitiesUpdateRun: function activitiesUpdateRun(id, runId, updateRun, xAmphoradataVersion, options) {
      return ActivitiesApiFp(configuration).activitiesUpdateRun(id, runId, updateRun, xAmphoradataVersion, options)(axios, basePath);
    }
  };
};
/**
 * ActivitiesApi - object-oriented interface
 * @export
 * @class ActivitiesApi
 * @extends {BaseAPI}
 */


exports.ActivitiesApiFactory = ActivitiesApiFactory;

var ActivitiesApi = /*#__PURE__*/function (_BaseAPI) {
  _inherits(ActivitiesApi, _BaseAPI);

  var _super = _createSuper(ActivitiesApi);

  function ActivitiesApi() {
    _classCallCheck(this, ActivitiesApi);

    return _super.apply(this, arguments);
  }

  _createClass(ActivitiesApi, [{
    key: "activitiesCreateActivity",

    /**
     * 
     * @summary Creates a new activity.
     * @param {CreateActivity} createActivity Metadata of the new activity.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    value: function activitiesCreateActivity(createActivity, xAmphoradataVersion, options) {
      return ActivitiesApiFp(this.configuration).activitiesCreateActivity(createActivity, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Deletes an activity.
     * @param {string} id The activity Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */

  }, {
    key: "activitiesDeleteActivity",
    value: function activitiesDeleteActivity(id, xAmphoradataVersion, options) {
      return ActivitiesApiFp(this.configuration).activitiesDeleteActivity(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets the metadata of an activity.
     * @param {string} id The activity Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */

  }, {
    key: "activitiesReadActivity",
    value: function activitiesReadActivity(id, xAmphoradataVersion, options) {
      return ActivitiesApiFp(this.configuration).activitiesReadActivity(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary References an Amphora during a run.
     * @param {string} id The activity Id.
     * @param {string} runId The run Id.
     * @param {string} amphoraId The Id of the Amphora to reference.
     * @param {AmphoraReference} amphoraReference Information about the reference.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */

  }, {
    key: "activitiesReferenceAmphora",
    value: function activitiesReferenceAmphora(id, runId, amphoraId, amphoraReference, xAmphoradataVersion, options) {
      return ActivitiesApiFp(this.configuration).activitiesReferenceAmphora(id, runId, amphoraId, amphoraReference, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Starts a new run of an activity.
     * @param {string} id The activity id in which to start a run.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */

  }, {
    key: "activitiesStartRun",
    value: function activitiesStartRun(id, xAmphoradataVersion, options) {
      return ActivitiesApiFp(this.configuration).activitiesStartRun(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Updates and completes a run.
     * @param {string} id The activity Id.
     * @param {string} runId The run Id.
     * @param {UpdateRun} updateRun Information about the update.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */

  }, {
    key: "activitiesUpdateRun",
    value: function activitiesUpdateRun(id, runId, updateRun, xAmphoradataVersion, options) {
      return ActivitiesApiFp(this.configuration).activitiesUpdateRun(id, runId, updateRun, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
  }]);

  return ActivitiesApi;
}(_base.BaseAPI);
/**
 * AmphoraeApi - axios parameter creator
 * @export
 */


exports.ActivitiesApi = ActivitiesApi;

var AmphoraeApiAxiosParamCreator = function AmphoraeApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary Gets the data quality metrics for this Amphora.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraQualityGet: function amphoraQualityGet(id, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraQualityGet.');
      }

      var localVarPath = "/api/amphorae/{id}/quality".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Sets the data quality metrics for this Amphora.
     * @param {string} id Amphora Id.
     * @param {Quality} quality The data quality metrics.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraQualitySet: function amphoraQualitySet(id, quality, xAmphoradataVersion) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraQualitySet.');
      } // verify required parameter 'quality' is not null or undefined


      if (quality === null || quality === undefined) {
        throw new _base.RequiredError('quality', 'Required parameter quality was null or undefined when calling amphoraQualitySet.');
      }

      var localVarPath = "/api/amphorae/{id}/quality".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'POST'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      var needsSerialization = typeof quality !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(quality !== undefined ? quality : {}) : quality || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Creates an Access Control Rule for all on this Amphora.
     * @param {string} id Amphora Id.
     * @param {AllAccessRule} allAccessRule The rule to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForAll: function amphoraeAccessControlsCreateForAll(id, allAccessRule, xAmphoradataVersion) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeAccessControlsCreateForAll.');
      } // verify required parameter 'allAccessRule' is not null or undefined


      if (allAccessRule === null || allAccessRule === undefined) {
        throw new _base.RequiredError('allAccessRule', 'Required parameter allAccessRule was null or undefined when calling amphoraeAccessControlsCreateForAll.');
      }

      var localVarPath = "/api/amphorae/{id}/AccessControls/ForAll".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'POST'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      var needsSerialization = typeof allAccessRule !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(allAccessRule !== undefined ? allAccessRule : {}) : allAccessRule || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Creates an Access Control Rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {OrganisationAccessRule} organisationAccessRule The rule to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForOrganisation: function amphoraeAccessControlsCreateForOrganisation(id, organisationAccessRule, xAmphoradataVersion) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeAccessControlsCreateForOrganisation.');
      } // verify required parameter 'organisationAccessRule' is not null or undefined


      if (organisationAccessRule === null || organisationAccessRule === undefined) {
        throw new _base.RequiredError('organisationAccessRule', 'Required parameter organisationAccessRule was null or undefined when calling amphoraeAccessControlsCreateForOrganisation.');
      }

      var localVarPath = "/api/amphorae/{id}/AccessControls/ForOrganisation".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'POST'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      var needsSerialization = typeof organisationAccessRule !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(organisationAccessRule !== undefined ? organisationAccessRule : {}) : organisationAccessRule || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Creates an Access Control rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {UserAccessRule} userAccessRule The rule to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForUser: function amphoraeAccessControlsCreateForUser(id, userAccessRule, xAmphoradataVersion) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeAccessControlsCreateForUser.');
      } // verify required parameter 'userAccessRule' is not null or undefined


      if (userAccessRule === null || userAccessRule === undefined) {
        throw new _base.RequiredError('userAccessRule', 'Required parameter userAccessRule was null or undefined when calling amphoraeAccessControlsCreateForUser.');
      }

      var localVarPath = "/api/amphorae/{id}/AccessControls/ForUser".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'POST'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      var needsSerialization = typeof userAccessRule !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(userAccessRule !== undefined ? userAccessRule : {}) : userAccessRule || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Deletes an Access Control on this Amphora.
     * @param {string} id Amphora Id.
     * @param {string} ruleId The Id of the rule to delete.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsDelete: function amphoraeAccessControlsDelete(id, ruleId, xAmphoradataVersion) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeAccessControlsDelete.');
      } // verify required parameter 'ruleId' is not null or undefined


      if (ruleId === null || ruleId === undefined) {
        throw new _base.RequiredError('ruleId', 'Required parameter ruleId was null or undefined when calling amphoraeAccessControlsDelete.');
      }

      var localVarPath = "/api/amphorae/{id}/AccessControls/{ruleId}".replace("{".concat("id", "}"), encodeURIComponent(String(id))).replace("{".concat("ruleId", "}"), encodeURIComponent(String(ruleId)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'DELETE'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Get\'s the \'for all\' rule, if it exists, else an empty 200.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetForAllRule: function amphoraeAccessControlsGetForAllRule(id, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeAccessControlsGetForAllRule.');
      }

      var localVarPath = "/api/amphorae/{id}/AccessControls/ForAll".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Get\'s the list of access rules applied to organisations.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetOrganisationRules: function amphoraeAccessControlsGetOrganisationRules(id, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeAccessControlsGetOrganisationRules.');
      }

      var localVarPath = "/api/amphorae/{id}/AccessControls/ForOrganisation".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Get\'s the list of access rules applied to users.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetUserRules: function amphoraeAccessControlsGetUserRules(id, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeAccessControlsGetUserRules.');
      }

      var localVarPath = "/api/amphorae/{id}/AccessControls/ForUser".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Creates a new empty Amphora in the user\'s organisation.
     * @param {CreateAmphora} createAmphora Information for the new Amphora.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeCreate: function amphoraeCreate(createAmphora, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'createAmphora' is not null or undefined
      if (createAmphora === null || createAmphora === undefined) {
        throw new _base.RequiredError('createAmphora', 'Required parameter createAmphora was null or undefined when calling amphoraeCreate.');
      }

      var localVarPath = "/api/amphorae";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'POST'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      var needsSerialization = typeof createAmphora !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(createAmphora !== undefined ? createAmphora : {}) : createAmphora || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Deletes an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeDelete: function amphoraeDelete(id, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeDelete.');
      }

      var localVarPath = "/api/amphorae/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'DELETE'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Creates a file. Returns a blob URL to upload to.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesCreateFileRequest: function amphoraeFilesCreateFileRequest(id, file, xAmphoradataVersion) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeFilesCreateFileRequest.');
      } // verify required parameter 'file' is not null or undefined


      if (file === null || file === undefined) {
        throw new _base.RequiredError('file', 'Required parameter file was null or undefined when calling amphoraeFilesCreateFileRequest.');
      }

      var localVarPath = "/api/amphorae/{id}/files/{file}".replace("{".concat("id", "}"), encodeURIComponent(String(id))).replace("{".concat("file", "}"), encodeURIComponent(String(file)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'POST'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Get\'s the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesDeleteFile: function amphoraeFilesDeleteFile(id, file, xAmphoradataVersion) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeFilesDeleteFile.');
      } // verify required parameter 'file' is not null or undefined


      if (file === null || file === undefined) {
        throw new _base.RequiredError('file', 'Required parameter file was null or undefined when calling amphoraeFilesDeleteFile.');
      }

      var localVarPath = "/api/amphorae/{id}/files/{file}".replace("{".concat("id", "}"), encodeURIComponent(String(id))).replace("{".concat("file", "}"), encodeURIComponent(String(file)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'DELETE'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Get\'s the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesDownloadFile: function amphoraeFilesDownloadFile(id, file, xAmphoradataVersion) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeFilesDownloadFile.');
      } // verify required parameter 'file' is not null or undefined


      if (file === null || file === undefined) {
        throw new _base.RequiredError('file', 'Required parameter file was null or undefined when calling amphoraeFilesDownloadFile.');
      }

      var localVarPath = "/api/amphorae/{id}/files/{file}".replace("{".concat("id", "}"), encodeURIComponent(String(id))).replace("{".concat("file", "}"), encodeURIComponent(String(file)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Get\'s a list of an Amphora\'s files.
     * @param {string} id Amphora Id.
     * @param {string} [orderBy] Can be alphabetical or lastModified.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesListFiles: function amphoraeFilesListFiles(id, orderBy, xAmphoradataVersion) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeFilesListFiles.');
      }

      var localVarPath = "/api/amphorae/{id}/files".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (orderBy !== undefined) {
        localVarQueryParameter['orderBy'] = orderBy;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @param {string} id 
     * @param {string} file 
     * @param {{ [key: string]: string; }} requestBody 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesWriteFileMetadata: function amphoraeFilesWriteFileMetadata(id, file, requestBody, xAmphoradataVersion) {
      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeFilesWriteFileMetadata.');
      } // verify required parameter 'file' is not null or undefined


      if (file === null || file === undefined) {
        throw new _base.RequiredError('file', 'Required parameter file was null or undefined when calling amphoraeFilesWriteFileMetadata.');
      } // verify required parameter 'requestBody' is not null or undefined


      if (requestBody === null || requestBody === undefined) {
        throw new _base.RequiredError('requestBody', 'Required parameter requestBody was null or undefined when calling amphoraeFilesWriteFileMetadata.');
      }

      var localVarPath = "/api/amphorae/{id}/files/{file}/meta".replace("{".concat("id", "}"), encodeURIComponent(String(id))).replace("{".concat("file", "}"), encodeURIComponent(String(file)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'POST'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      var needsSerialization = typeof requestBody !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : requestBody || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets a list of Amphora for yourself or your org, created or purchased by you (or organisation).
     * @param {string} [scope] \&#39;self\&#39; or \&#39;organisation\&#39;. Defaults to self.
     * @param {string} [accessType] \&#39;created\&#39; or \&#39;purchased\&#39;. Defaults to created.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeList: function amphoraeList(scope, accessType, xAmphoradataVersion) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var localVarPath = "/api/amphorae";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (scope !== undefined) {
        localVarQueryParameter['scope'] = scope;
      }

      if (accessType !== undefined) {
        localVarQueryParameter['accessType'] = accessType;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeRead: function amphoraeRead(id, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeRead.');
      }

      var localVarPath = "/api/amphorae/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {Signal} signal Signal Details.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsCreateSignal: function amphoraeSignalsCreateSignal(id, signal, xAmphoradataVersion) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeSignalsCreateSignal.');
      } // verify required parameter 'signal' is not null or undefined


      if (signal === null || signal === undefined) {
        throw new _base.RequiredError('signal', 'Required parameter signal was null or undefined when calling amphoraeSignalsCreateSignal.');
      }

      var localVarPath = "/api/amphorae/{id}/signals".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'POST'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      var needsSerialization = typeof signal !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(signal !== undefined ? signal : {}) : signal || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Get\'s the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} property The name or id of the signal property.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsGetSignal: function amphoraeSignalsGetSignal(id, property, xAmphoradataVersion) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeSignalsGetSignal.');
      } // verify required parameter 'property' is not null or undefined


      if (property === null || property === undefined) {
        throw new _base.RequiredError('property', 'Required parameter property was null or undefined when calling amphoraeSignalsGetSignal.');
      }

      var localVarPath = "/api/amphorae/{id}/signals/{property}".replace("{".concat("id", "}"), encodeURIComponent(String(id))).replace("{".concat("property", "}"), encodeURIComponent(String(property)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Get\'s the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsGetSignals: function amphoraeSignalsGetSignals(id, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeSignalsGetSignals.');
      }

      var localVarPath = "/api/amphorae/{id}/signals".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {string} signalId Signal Details.
     * @param {UpdateSignal} updateSignal Signal properties to update.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUpdateSignal: function amphoraeSignalsUpdateSignal(id, signalId, updateSignal, xAmphoradataVersion) {
      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeSignalsUpdateSignal.');
      } // verify required parameter 'signalId' is not null or undefined


      if (signalId === null || signalId === undefined) {
        throw new _base.RequiredError('signalId', 'Required parameter signalId was null or undefined when calling amphoraeSignalsUpdateSignal.');
      } // verify required parameter 'updateSignal' is not null or undefined


      if (updateSignal === null || updateSignal === undefined) {
        throw new _base.RequiredError('updateSignal', 'Required parameter updateSignal was null or undefined when calling amphoraeSignalsUpdateSignal.');
      }

      var localVarPath = "/api/amphorae/{id}/signals/{signalId}".replace("{".concat("id", "}"), encodeURIComponent(String(id))).replace("{".concat("signalId", "}"), encodeURIComponent(String(signalId)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'PUT'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      var needsSerialization = typeof updateSignal !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(updateSignal !== undefined ? updateSignal : {}) : updateSignal || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @param {string} id 
     * @param {{ [key: string]: object; }} requestBody 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignal: function amphoraeSignalsUploadSignal(id, requestBody, xAmphoradataVersion) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeSignalsUploadSignal.');
      } // verify required parameter 'requestBody' is not null or undefined


      if (requestBody === null || requestBody === undefined) {
        throw new _base.RequiredError('requestBody', 'Required parameter requestBody was null or undefined when calling amphoraeSignalsUploadSignal.');
      }

      var localVarPath = "/api/amphorae/{id}/signals/values".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'POST'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      var needsSerialization = typeof requestBody !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : requestBody || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @param {string} id 
     * @param {{ [key: string]: object; }} requestBody 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignal2: function amphoraeSignalsUploadSignal2(id, requestBody, xAmphoradataVersion) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeSignalsUploadSignal2.');
      } // verify required parameter 'requestBody' is not null or undefined


      if (requestBody === null || requestBody === undefined) {
        throw new _base.RequiredError('requestBody', 'Required parameter requestBody was null or undefined when calling amphoraeSignalsUploadSignal2.');
      }

      var localVarPath = "/api/amphorae/{id}/signalValues".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'POST'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      var needsSerialization = typeof requestBody !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : requestBody || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @param {string} id 
     * @param {Array<{ [key: string]: object; }>} requestBody 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignalBatch: function amphoraeSignalsUploadSignalBatch(id, requestBody, xAmphoradataVersion) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeSignalsUploadSignalBatch.');
      } // verify required parameter 'requestBody' is not null or undefined


      if (requestBody === null || requestBody === undefined) {
        throw new _base.RequiredError('requestBody', 'Required parameter requestBody was null or undefined when calling amphoraeSignalsUploadSignalBatch.');
      }

      var localVarPath = "/api/amphorae/{id}/signals/batchvalues".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'POST'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      var needsSerialization = typeof requestBody !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : requestBody || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @param {string} id 
     * @param {Array<{ [key: string]: object; }>} requestBody 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignalBatch2: function amphoraeSignalsUploadSignalBatch2(id, requestBody, xAmphoradataVersion) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeSignalsUploadSignalBatch2.');
      } // verify required parameter 'requestBody' is not null or undefined


      if (requestBody === null || requestBody === undefined) {
        throw new _base.RequiredError('requestBody', 'Required parameter requestBody was null or undefined when calling amphoraeSignalsUploadSignalBatch2.');
      }

      var localVarPath = "/api/amphorae/{id}/batchSignalValues".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'POST'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      var needsSerialization = typeof requestBody !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : requestBody || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Updates the details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {DetailedAmphora} detailedAmphora Information to update. Nulls are NOT ignored.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeUpdate: function amphoraeUpdate(id, detailedAmphora, xAmphoradataVersion) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling amphoraeUpdate.');
      } // verify required parameter 'detailedAmphora' is not null or undefined


      if (detailedAmphora === null || detailedAmphora === undefined) {
        throw new _base.RequiredError('detailedAmphora', 'Required parameter detailedAmphora was null or undefined when calling amphoraeUpdate.');
      }

      var localVarPath = "/api/amphorae/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'PUT'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      var needsSerialization = typeof detailedAmphora !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(detailedAmphora !== undefined ? detailedAmphora : {}) : detailedAmphora || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Purchases an Amphora as the logged in user.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchasesPurchase: function purchasesPurchase(id, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling purchasesPurchase.');
      }

      var localVarPath = "/api/Amphorae/{id}/Purchases".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'POST'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * AmphoraeApi - functional programming interface
 * @export
 */


exports.AmphoraeApiAxiosParamCreator = AmphoraeApiAxiosParamCreator;

var AmphoraeApiFp = function AmphoraeApiFp(configuration) {
  return {
    /**
     * 
     * @summary Gets the data quality metrics for this Amphora.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraQualityGet: function amphoraQualityGet(id, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraQualityGet(id, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Sets the data quality metrics for this Amphora.
     * @param {string} id Amphora Id.
     * @param {Quality} quality The data quality metrics.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraQualitySet: function amphoraQualitySet(id, quality, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraQualitySet(id, quality, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Creates an Access Control Rule for all on this Amphora.
     * @param {string} id Amphora Id.
     * @param {AllAccessRule} allAccessRule The rule to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForAll: function amphoraeAccessControlsCreateForAll(id, allAccessRule, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeAccessControlsCreateForAll(id, allAccessRule, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Creates an Access Control Rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {OrganisationAccessRule} organisationAccessRule The rule to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForOrganisation: function amphoraeAccessControlsCreateForOrganisation(id, organisationAccessRule, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeAccessControlsCreateForOrganisation(id, organisationAccessRule, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Creates an Access Control rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {UserAccessRule} userAccessRule The rule to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForUser: function amphoraeAccessControlsCreateForUser(id, userAccessRule, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeAccessControlsCreateForUser(id, userAccessRule, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Deletes an Access Control on this Amphora.
     * @param {string} id Amphora Id.
     * @param {string} ruleId The Id of the rule to delete.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsDelete: function amphoraeAccessControlsDelete(id, ruleId, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeAccessControlsDelete(id, ruleId, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Get\'s the \'for all\' rule, if it exists, else an empty 200.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetForAllRule: function amphoraeAccessControlsGetForAllRule(id, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeAccessControlsGetForAllRule(id, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Get\'s the list of access rules applied to organisations.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetOrganisationRules: function amphoraeAccessControlsGetOrganisationRules(id, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeAccessControlsGetOrganisationRules(id, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Get\'s the list of access rules applied to users.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetUserRules: function amphoraeAccessControlsGetUserRules(id, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeAccessControlsGetUserRules(id, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Creates a new empty Amphora in the user\'s organisation.
     * @param {CreateAmphora} createAmphora Information for the new Amphora.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeCreate: function amphoraeCreate(createAmphora, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeCreate(createAmphora, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Deletes an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeDelete: function amphoraeDelete(id, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeDelete(id, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Creates a file. Returns a blob URL to upload to.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesCreateFileRequest: function amphoraeFilesCreateFileRequest(id, file, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeFilesCreateFileRequest(id, file, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Get\'s the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesDeleteFile: function amphoraeFilesDeleteFile(id, file, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeFilesDeleteFile(id, file, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Get\'s the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesDownloadFile: function amphoraeFilesDownloadFile(id, file, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeFilesDownloadFile(id, file, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Get\'s a list of an Amphora\'s files.
     * @param {string} id Amphora Id.
     * @param {string} [orderBy] Can be alphabetical or lastModified.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesListFiles: function amphoraeFilesListFiles(id, orderBy, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeFilesListFiles(id, orderBy, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @param {string} id 
     * @param {string} file 
     * @param {{ [key: string]: string; }} requestBody 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesWriteFileMetadata: function amphoraeFilesWriteFileMetadata(id, file, requestBody, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeFilesWriteFileMetadata(id, file, requestBody, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets a list of Amphora for yourself or your org, created or purchased by you (or organisation).
     * @param {string} [scope] \&#39;self\&#39; or \&#39;organisation\&#39;. Defaults to self.
     * @param {string} [accessType] \&#39;created\&#39; or \&#39;purchased\&#39;. Defaults to created.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeList: function amphoraeList(scope, accessType, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeList(scope, accessType, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeRead: function amphoraeRead(id, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeRead(id, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {Signal} signal Signal Details.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsCreateSignal: function amphoraeSignalsCreateSignal(id, signal, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeSignalsCreateSignal(id, signal, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Get\'s the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} property The name or id of the signal property.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsGetSignal: function amphoraeSignalsGetSignal(id, property, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeSignalsGetSignal(id, property, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Get\'s the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsGetSignals: function amphoraeSignalsGetSignals(id, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeSignalsGetSignals(id, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {string} signalId Signal Details.
     * @param {UpdateSignal} updateSignal Signal properties to update.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUpdateSignal: function amphoraeSignalsUpdateSignal(id, signalId, updateSignal, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeSignalsUpdateSignal(id, signalId, updateSignal, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @param {string} id 
     * @param {{ [key: string]: object; }} requestBody 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignal: function amphoraeSignalsUploadSignal(id, requestBody, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeSignalsUploadSignal(id, requestBody, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @param {string} id 
     * @param {{ [key: string]: object; }} requestBody 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignal2: function amphoraeSignalsUploadSignal2(id, requestBody, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeSignalsUploadSignal2(id, requestBody, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @param {string} id 
     * @param {Array<{ [key: string]: object; }>} requestBody 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignalBatch: function amphoraeSignalsUploadSignalBatch(id, requestBody, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeSignalsUploadSignalBatch(id, requestBody, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @param {string} id 
     * @param {Array<{ [key: string]: object; }>} requestBody 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignalBatch2: function amphoraeSignalsUploadSignalBatch2(id, requestBody, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeSignalsUploadSignalBatch2(id, requestBody, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Updates the details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {DetailedAmphora} detailedAmphora Information to update. Nulls are NOT ignored.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeUpdate: function amphoraeUpdate(id, detailedAmphora, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeUpdate(id, detailedAmphora, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Purchases an Amphora as the logged in user.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchasesPurchase: function purchasesPurchase(id, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).purchasesPurchase(id, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * AmphoraeApi - factory interface
 * @export
 */


exports.AmphoraeApiFp = AmphoraeApiFp;

var AmphoraeApiFactory = function AmphoraeApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary Gets the data quality metrics for this Amphora.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraQualityGet: function amphoraQualityGet(id, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraQualityGet(id, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Sets the data quality metrics for this Amphora.
     * @param {string} id Amphora Id.
     * @param {Quality} quality The data quality metrics.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraQualitySet: function amphoraQualitySet(id, quality, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraQualitySet(id, quality, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Creates an Access Control Rule for all on this Amphora.
     * @param {string} id Amphora Id.
     * @param {AllAccessRule} allAccessRule The rule to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForAll: function amphoraeAccessControlsCreateForAll(id, allAccessRule, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraeAccessControlsCreateForAll(id, allAccessRule, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Creates an Access Control Rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {OrganisationAccessRule} organisationAccessRule The rule to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForOrganisation: function amphoraeAccessControlsCreateForOrganisation(id, organisationAccessRule, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraeAccessControlsCreateForOrganisation(id, organisationAccessRule, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Creates an Access Control rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {UserAccessRule} userAccessRule The rule to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsCreateForUser: function amphoraeAccessControlsCreateForUser(id, userAccessRule, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraeAccessControlsCreateForUser(id, userAccessRule, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Deletes an Access Control on this Amphora.
     * @param {string} id Amphora Id.
     * @param {string} ruleId The Id of the rule to delete.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsDelete: function amphoraeAccessControlsDelete(id, ruleId, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraeAccessControlsDelete(id, ruleId, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Get\'s the \'for all\' rule, if it exists, else an empty 200.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetForAllRule: function amphoraeAccessControlsGetForAllRule(id, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraeAccessControlsGetForAllRule(id, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Get\'s the list of access rules applied to organisations.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetOrganisationRules: function amphoraeAccessControlsGetOrganisationRules(id, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraeAccessControlsGetOrganisationRules(id, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Get\'s the list of access rules applied to users.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeAccessControlsGetUserRules: function amphoraeAccessControlsGetUserRules(id, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraeAccessControlsGetUserRules(id, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Creates a new empty Amphora in the user\'s organisation.
     * @param {CreateAmphora} createAmphora Information for the new Amphora.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeCreate: function amphoraeCreate(createAmphora, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraeCreate(createAmphora, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Deletes an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeDelete: function amphoraeDelete(id, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraeDelete(id, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Creates a file. Returns a blob URL to upload to.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesCreateFileRequest: function amphoraeFilesCreateFileRequest(id, file, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraeFilesCreateFileRequest(id, file, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Get\'s the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesDeleteFile: function amphoraeFilesDeleteFile(id, file, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraeFilesDeleteFile(id, file, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Get\'s the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesDownloadFile: function amphoraeFilesDownloadFile(id, file, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraeFilesDownloadFile(id, file, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Get\'s a list of an Amphora\'s files.
     * @param {string} id Amphora Id.
     * @param {string} [orderBy] Can be alphabetical or lastModified.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesListFiles: function amphoraeFilesListFiles(id, orderBy, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraeFilesListFiles(id, orderBy, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @param {string} id 
     * @param {string} file 
     * @param {{ [key: string]: string; }} requestBody 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeFilesWriteFileMetadata: function amphoraeFilesWriteFileMetadata(id, file, requestBody, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraeFilesWriteFileMetadata(id, file, requestBody, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets a list of Amphora for yourself or your org, created or purchased by you (or organisation).
     * @param {string} [scope] \&#39;self\&#39; or \&#39;organisation\&#39;. Defaults to self.
     * @param {string} [accessType] \&#39;created\&#39; or \&#39;purchased\&#39;. Defaults to created.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeList: function amphoraeList(scope, accessType, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraeList(scope, accessType, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeRead: function amphoraeRead(id, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraeRead(id, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {Signal} signal Signal Details.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsCreateSignal: function amphoraeSignalsCreateSignal(id, signal, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraeSignalsCreateSignal(id, signal, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Get\'s the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} property The name or id of the signal property.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsGetSignal: function amphoraeSignalsGetSignal(id, property, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraeSignalsGetSignal(id, property, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Get\'s the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsGetSignals: function amphoraeSignalsGetSignals(id, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraeSignalsGetSignals(id, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {string} signalId Signal Details.
     * @param {UpdateSignal} updateSignal Signal properties to update.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUpdateSignal: function amphoraeSignalsUpdateSignal(id, signalId, updateSignal, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraeSignalsUpdateSignal(id, signalId, updateSignal, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @param {string} id 
     * @param {{ [key: string]: object; }} requestBody 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignal: function amphoraeSignalsUploadSignal(id, requestBody, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraeSignalsUploadSignal(id, requestBody, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @param {string} id 
     * @param {{ [key: string]: object; }} requestBody 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignal2: function amphoraeSignalsUploadSignal2(id, requestBody, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraeSignalsUploadSignal2(id, requestBody, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @param {string} id 
     * @param {Array<{ [key: string]: object; }>} requestBody 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignalBatch: function amphoraeSignalsUploadSignalBatch(id, requestBody, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraeSignalsUploadSignalBatch(id, requestBody, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @param {string} id 
     * @param {Array<{ [key: string]: object; }>} requestBody 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeSignalsUploadSignalBatch2: function amphoraeSignalsUploadSignalBatch2(id, requestBody, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraeSignalsUploadSignalBatch2(id, requestBody, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Updates the details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {DetailedAmphora} detailedAmphora Information to update. Nulls are NOT ignored.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    amphoraeUpdate: function amphoraeUpdate(id, detailedAmphora, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).amphoraeUpdate(id, detailedAmphora, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Purchases an Amphora as the logged in user.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchasesPurchase: function purchasesPurchase(id, xAmphoradataVersion, options) {
      return AmphoraeApiFp(configuration).purchasesPurchase(id, xAmphoradataVersion, options)(axios, basePath);
    }
  };
};
/**
 * AmphoraeApi - object-oriented interface
 * @export
 * @class AmphoraeApi
 * @extends {BaseAPI}
 */


exports.AmphoraeApiFactory = AmphoraeApiFactory;

var AmphoraeApi = /*#__PURE__*/function (_BaseAPI2) {
  _inherits(AmphoraeApi, _BaseAPI2);

  var _super2 = _createSuper(AmphoraeApi);

  function AmphoraeApi() {
    _classCallCheck(this, AmphoraeApi);

    return _super2.apply(this, arguments);
  }

  _createClass(AmphoraeApi, [{
    key: "amphoraQualityGet",

    /**
     * 
     * @summary Gets the data quality metrics for this Amphora.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    value: function amphoraQualityGet(id, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraQualityGet(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Sets the data quality metrics for this Amphora.
     * @param {string} id Amphora Id.
     * @param {Quality} quality The data quality metrics.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraQualitySet",
    value: function amphoraQualitySet(id, quality, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraQualitySet(id, quality, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Creates an Access Control Rule for all on this Amphora.
     * @param {string} id Amphora Id.
     * @param {AllAccessRule} allAccessRule The rule to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeAccessControlsCreateForAll",
    value: function amphoraeAccessControlsCreateForAll(id, allAccessRule, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraeAccessControlsCreateForAll(id, allAccessRule, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Creates an Access Control Rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {OrganisationAccessRule} organisationAccessRule The rule to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeAccessControlsCreateForOrganisation",
    value: function amphoraeAccessControlsCreateForOrganisation(id, organisationAccessRule, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraeAccessControlsCreateForOrganisation(id, organisationAccessRule, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Creates an Access Control rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {UserAccessRule} userAccessRule The rule to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeAccessControlsCreateForUser",
    value: function amphoraeAccessControlsCreateForUser(id, userAccessRule, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraeAccessControlsCreateForUser(id, userAccessRule, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Deletes an Access Control on this Amphora.
     * @param {string} id Amphora Id.
     * @param {string} ruleId The Id of the rule to delete.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeAccessControlsDelete",
    value: function amphoraeAccessControlsDelete(id, ruleId, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraeAccessControlsDelete(id, ruleId, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Get\'s the \'for all\' rule, if it exists, else an empty 200.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeAccessControlsGetForAllRule",
    value: function amphoraeAccessControlsGetForAllRule(id, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraeAccessControlsGetForAllRule(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Get\'s the list of access rules applied to organisations.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeAccessControlsGetOrganisationRules",
    value: function amphoraeAccessControlsGetOrganisationRules(id, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraeAccessControlsGetOrganisationRules(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Get\'s the list of access rules applied to users.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeAccessControlsGetUserRules",
    value: function amphoraeAccessControlsGetUserRules(id, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraeAccessControlsGetUserRules(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Creates a new empty Amphora in the user\'s organisation.
     * @param {CreateAmphora} createAmphora Information for the new Amphora.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeCreate",
    value: function amphoraeCreate(createAmphora, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraeCreate(createAmphora, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Deletes an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeDelete",
    value: function amphoraeDelete(id, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraeDelete(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Creates a file. Returns a blob URL to upload to.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeFilesCreateFileRequest",
    value: function amphoraeFilesCreateFileRequest(id, file, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraeFilesCreateFileRequest(id, file, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Get\'s the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeFilesDeleteFile",
    value: function amphoraeFilesDeleteFile(id, file, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraeFilesDeleteFile(id, file, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Get\'s the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeFilesDownloadFile",
    value: function amphoraeFilesDownloadFile(id, file, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraeFilesDownloadFile(id, file, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Get\'s a list of an Amphora\'s files.
     * @param {string} id Amphora Id.
     * @param {string} [orderBy] Can be alphabetical or lastModified.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeFilesListFiles",
    value: function amphoraeFilesListFiles(id, orderBy, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraeFilesListFiles(id, orderBy, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @param {string} id 
     * @param {string} file 
     * @param {{ [key: string]: string; }} requestBody 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeFilesWriteFileMetadata",
    value: function amphoraeFilesWriteFileMetadata(id, file, requestBody, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraeFilesWriteFileMetadata(id, file, requestBody, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets a list of Amphora for yourself or your org, created or purchased by you (or organisation).
     * @param {string} [scope] \&#39;self\&#39; or \&#39;organisation\&#39;. Defaults to self.
     * @param {string} [accessType] \&#39;created\&#39; or \&#39;purchased\&#39;. Defaults to created.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeList",
    value: function amphoraeList(scope, accessType, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraeList(scope, accessType, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeRead",
    value: function amphoraeRead(id, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraeRead(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {Signal} signal Signal Details.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeSignalsCreateSignal",
    value: function amphoraeSignalsCreateSignal(id, signal, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraeSignalsCreateSignal(id, signal, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Get\'s the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} property The name or id of the signal property.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeSignalsGetSignal",
    value: function amphoraeSignalsGetSignal(id, property, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraeSignalsGetSignal(id, property, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Get\'s the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeSignalsGetSignals",
    value: function amphoraeSignalsGetSignals(id, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraeSignalsGetSignals(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {string} signalId Signal Details.
     * @param {UpdateSignal} updateSignal Signal properties to update.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeSignalsUpdateSignal",
    value: function amphoraeSignalsUpdateSignal(id, signalId, updateSignal, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraeSignalsUpdateSignal(id, signalId, updateSignal, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @param {string} id 
     * @param {{ [key: string]: object; }} requestBody 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeSignalsUploadSignal",
    value: function amphoraeSignalsUploadSignal(id, requestBody, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraeSignalsUploadSignal(id, requestBody, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @param {string} id 
     * @param {{ [key: string]: object; }} requestBody 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeSignalsUploadSignal2",
    value: function amphoraeSignalsUploadSignal2(id, requestBody, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraeSignalsUploadSignal2(id, requestBody, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @param {string} id 
     * @param {Array<{ [key: string]: object; }>} requestBody 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeSignalsUploadSignalBatch",
    value: function amphoraeSignalsUploadSignalBatch(id, requestBody, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraeSignalsUploadSignalBatch(id, requestBody, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @param {string} id 
     * @param {Array<{ [key: string]: object; }>} requestBody 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeSignalsUploadSignalBatch2",
    value: function amphoraeSignalsUploadSignalBatch2(id, requestBody, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraeSignalsUploadSignalBatch2(id, requestBody, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Updates the details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {DetailedAmphora} detailedAmphora Information to update. Nulls are NOT ignored.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "amphoraeUpdate",
    value: function amphoraeUpdate(id, detailedAmphora, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).amphoraeUpdate(id, detailedAmphora, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Purchases an Amphora as the logged in user.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */

  }, {
    key: "purchasesPurchase",
    value: function purchasesPurchase(id, xAmphoradataVersion, options) {
      return AmphoraeApiFp(this.configuration).purchasesPurchase(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
  }]);

  return AmphoraeApi;
}(_base.BaseAPI);
/**
 * ApplicationsApi - axios parameter creator
 * @export
 */


exports.AmphoraeApi = AmphoraeApi;

var ApplicationsApiAxiosParamCreator = function ApplicationsApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary Creates a new application. Applications are external websites that Amphora users can sign in to.
     * @param {CreateApplication} createApplication An application to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsCreateApplication: function applicationsCreateApplication(createApplication, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'createApplication' is not null or undefined
      if (createApplication === null || createApplication === undefined) {
        throw new _base.RequiredError('createApplication', 'Required parameter createApplication was null or undefined when calling applicationsCreateApplication.');
      }

      var localVarPath = "/api/applications";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'POST'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      var needsSerialization = typeof createApplication !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(createApplication !== undefined ? createApplication : {}) : createApplication || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets an application by Id, if it exists.
     * @param {string} id The id of the application to get.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsCreateApplication2: function applicationsCreateApplication2(id, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling applicationsCreateApplication2.');
      }

      var localVarPath = "/api/applications/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Deletes an application. Must be done by an Organisation administrator.
     * @param {string} id The application id to delete.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsDeleteApplication: function applicationsDeleteApplication(id, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling applicationsDeleteApplication.');
      }

      var localVarPath = "/api/applications/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'DELETE'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * ApplicationsApi - functional programming interface
 * @export
 */


exports.ApplicationsApiAxiosParamCreator = ApplicationsApiAxiosParamCreator;

var ApplicationsApiFp = function ApplicationsApiFp(configuration) {
  return {
    /**
     * 
     * @summary Creates a new application. Applications are external websites that Amphora users can sign in to.
     * @param {CreateApplication} createApplication An application to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsCreateApplication: function applicationsCreateApplication(createApplication, xAmphoradataVersion, options) {
      var localVarAxiosArgs = ApplicationsApiAxiosParamCreator(configuration).applicationsCreateApplication(createApplication, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets an application by Id, if it exists.
     * @param {string} id The id of the application to get.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsCreateApplication2: function applicationsCreateApplication2(id, xAmphoradataVersion, options) {
      var localVarAxiosArgs = ApplicationsApiAxiosParamCreator(configuration).applicationsCreateApplication2(id, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Deletes an application. Must be done by an Organisation administrator.
     * @param {string} id The application id to delete.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsDeleteApplication: function applicationsDeleteApplication(id, xAmphoradataVersion, options) {
      var localVarAxiosArgs = ApplicationsApiAxiosParamCreator(configuration).applicationsDeleteApplication(id, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * ApplicationsApi - factory interface
 * @export
 */


exports.ApplicationsApiFp = ApplicationsApiFp;

var ApplicationsApiFactory = function ApplicationsApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary Creates a new application. Applications are external websites that Amphora users can sign in to.
     * @param {CreateApplication} createApplication An application to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsCreateApplication: function applicationsCreateApplication(createApplication, xAmphoradataVersion, options) {
      return ApplicationsApiFp(configuration).applicationsCreateApplication(createApplication, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets an application by Id, if it exists.
     * @param {string} id The id of the application to get.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsCreateApplication2: function applicationsCreateApplication2(id, xAmphoradataVersion, options) {
      return ApplicationsApiFp(configuration).applicationsCreateApplication2(id, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Deletes an application. Must be done by an Organisation administrator.
     * @param {string} id The application id to delete.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applicationsDeleteApplication: function applicationsDeleteApplication(id, xAmphoradataVersion, options) {
      return ApplicationsApiFp(configuration).applicationsDeleteApplication(id, xAmphoradataVersion, options)(axios, basePath);
    }
  };
};
/**
 * ApplicationsApi - object-oriented interface
 * @export
 * @class ApplicationsApi
 * @extends {BaseAPI}
 */


exports.ApplicationsApiFactory = ApplicationsApiFactory;

var ApplicationsApi = /*#__PURE__*/function (_BaseAPI3) {
  _inherits(ApplicationsApi, _BaseAPI3);

  var _super3 = _createSuper(ApplicationsApi);

  function ApplicationsApi() {
    _classCallCheck(this, ApplicationsApi);

    return _super3.apply(this, arguments);
  }

  _createClass(ApplicationsApi, [{
    key: "applicationsCreateApplication",

    /**
     * 
     * @summary Creates a new application. Applications are external websites that Amphora users can sign in to.
     * @param {CreateApplication} createApplication An application to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    value: function applicationsCreateApplication(createApplication, xAmphoradataVersion, options) {
      return ApplicationsApiFp(this.configuration).applicationsCreateApplication(createApplication, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets an application by Id, if it exists.
     * @param {string} id The id of the application to get.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */

  }, {
    key: "applicationsCreateApplication2",
    value: function applicationsCreateApplication2(id, xAmphoradataVersion, options) {
      return ApplicationsApiFp(this.configuration).applicationsCreateApplication2(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Deletes an application. Must be done by an Organisation administrator.
     * @param {string} id The application id to delete.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */

  }, {
    key: "applicationsDeleteApplication",
    value: function applicationsDeleteApplication(id, xAmphoradataVersion, options) {
      return ApplicationsApiFp(this.configuration).applicationsDeleteApplication(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
  }]);

  return ApplicationsApi;
}(_base.BaseAPI);
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */


exports.ApplicationsApi = ApplicationsApi;

var AuthenticationApiAxiosParamCreator = function AuthenticationApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary Returns a JWT (JSON Web Token).             
     * @param {LoginRequest} loginRequest Token Request Parameters.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticationRequestToken: function authenticationRequestToken(loginRequest, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'loginRequest' is not null or undefined
      if (loginRequest === null || loginRequest === undefined) {
        throw new _base.RequiredError('loginRequest', 'Required parameter loginRequest was null or undefined when calling authenticationRequestToken.');
      }

      var localVarPath = "/api/authentication/request";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'POST'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      var needsSerialization = typeof loginRequest !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(loginRequest !== undefined ? loginRequest : {}) : loginRequest || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * AuthenticationApi - functional programming interface
 * @export
 */


exports.AuthenticationApiAxiosParamCreator = AuthenticationApiAxiosParamCreator;

var AuthenticationApiFp = function AuthenticationApiFp(configuration) {
  return {
    /**
     * 
     * @summary Returns a JWT (JSON Web Token).             
     * @param {LoginRequest} loginRequest Token Request Parameters.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticationRequestToken: function authenticationRequestToken(loginRequest, xAmphoradataVersion, options) {
      var localVarAxiosArgs = AuthenticationApiAxiosParamCreator(configuration).authenticationRequestToken(loginRequest, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * AuthenticationApi - factory interface
 * @export
 */


exports.AuthenticationApiFp = AuthenticationApiFp;

var AuthenticationApiFactory = function AuthenticationApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary Returns a JWT (JSON Web Token).             
     * @param {LoginRequest} loginRequest Token Request Parameters.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticationRequestToken: function authenticationRequestToken(loginRequest, xAmphoradataVersion, options) {
      return AuthenticationApiFp(configuration).authenticationRequestToken(loginRequest, xAmphoradataVersion, options)(axios, basePath);
    }
  };
};
/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */


exports.AuthenticationApiFactory = AuthenticationApiFactory;

var AuthenticationApi = /*#__PURE__*/function (_BaseAPI4) {
  _inherits(AuthenticationApi, _BaseAPI4);

  var _super4 = _createSuper(AuthenticationApi);

  function AuthenticationApi() {
    _classCallCheck(this, AuthenticationApi);

    return _super4.apply(this, arguments);
  }

  _createClass(AuthenticationApi, [{
    key: "authenticationRequestToken",

    /**
     * 
     * @summary Returns a JWT (JSON Web Token).             
     * @param {LoginRequest} loginRequest Token Request Parameters.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    value: function authenticationRequestToken(loginRequest, xAmphoradataVersion, options) {
      return AuthenticationApiFp(this.configuration).authenticationRequestToken(loginRequest, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
  }]);

  return AuthenticationApi;
}(_base.BaseAPI);
/**
 * IdentityApi - axios parameter creator
 * @export
 */


exports.AuthenticationApi = AuthenticationApi;

var IdentityApiAxiosParamCreator = function IdentityApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identityGet: function identityGet(xAmphoradataVersion) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var localVarPath = "/identity";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * IdentityApi - functional programming interface
 * @export
 */


exports.IdentityApiAxiosParamCreator = IdentityApiAxiosParamCreator;

var IdentityApiFp = function IdentityApiFp(configuration) {
  return {
    /**
     * 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identityGet: function identityGet(xAmphoradataVersion, options) {
      var localVarAxiosArgs = IdentityApiAxiosParamCreator(configuration).identityGet(xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * IdentityApi - factory interface
 * @export
 */


exports.IdentityApiFp = IdentityApiFp;

var IdentityApiFactory = function IdentityApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identityGet: function identityGet(xAmphoradataVersion, options) {
      return IdentityApiFp(configuration).identityGet(xAmphoradataVersion, options)(axios, basePath);
    }
  };
};
/**
 * IdentityApi - object-oriented interface
 * @export
 * @class IdentityApi
 * @extends {BaseAPI}
 */


exports.IdentityApiFactory = IdentityApiFactory;

var IdentityApi = /*#__PURE__*/function (_BaseAPI5) {
  _inherits(IdentityApi, _BaseAPI5);

  var _super5 = _createSuper(IdentityApi);

  function IdentityApi() {
    _classCallCheck(this, IdentityApi);

    return _super5.apply(this, arguments);
  }

  _createClass(IdentityApi, [{
    key: "identityGet",

    /**
     * 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    value: function identityGet(xAmphoradataVersion, options) {
      return IdentityApiFp(this.configuration).identityGet(xAmphoradataVersion, options)(this.axios, this.basePath);
    }
  }]);

  return IdentityApi;
}(_base.BaseAPI);
/**
 * MarketApi - axios parameter creator
 * @export
 */


exports.IdentityApi = IdentityApi;

var MarketApiAxiosParamCreator = function MarketApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary Finds Amphora using a fuzzy search.
     * @param {string} [query] A string as a search term.
     * @param {number} [top] How many results to return.
     * @param {number} [skip] How many pages (in multiples of top) to skip.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketFind: function marketFind(query, top, skip, xAmphoradataVersion) {
      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
      var localVarPath = "/api/market/search";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (query !== undefined) {
        localVarQueryParameter['query'] = query;
      }

      if (top !== undefined) {
        localVarQueryParameter['top'] = top;
      }

      if (skip !== undefined) {
        localVarQueryParameter['skip'] = skip;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Executes a fuzzy location search.
     * @param {string} [query] Search Text.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketLookupLocation: function marketLookupLocation(query, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var localVarPath = "/api/location/fuzzy";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (query !== undefined) {
        localVarQueryParameter['query'] = query;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * MarketApi - functional programming interface
 * @export
 */


exports.MarketApiAxiosParamCreator = MarketApiAxiosParamCreator;

var MarketApiFp = function MarketApiFp(configuration) {
  return {
    /**
     * 
     * @summary Finds Amphora using a fuzzy search.
     * @param {string} [query] A string as a search term.
     * @param {number} [top] How many results to return.
     * @param {number} [skip] How many pages (in multiples of top) to skip.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketFind: function marketFind(query, top, skip, xAmphoradataVersion, options) {
      var localVarAxiosArgs = MarketApiAxiosParamCreator(configuration).marketFind(query, top, skip, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Executes a fuzzy location search.
     * @param {string} [query] Search Text.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketLookupLocation: function marketLookupLocation(query, xAmphoradataVersion, options) {
      var localVarAxiosArgs = MarketApiAxiosParamCreator(configuration).marketLookupLocation(query, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * MarketApi - factory interface
 * @export
 */


exports.MarketApiFp = MarketApiFp;

var MarketApiFactory = function MarketApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary Finds Amphora using a fuzzy search.
     * @param {string} [query] A string as a search term.
     * @param {number} [top] How many results to return.
     * @param {number} [skip] How many pages (in multiples of top) to skip.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketFind: function marketFind(query, top, skip, xAmphoradataVersion, options) {
      return MarketApiFp(configuration).marketFind(query, top, skip, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Executes a fuzzy location search.
     * @param {string} [query] Search Text.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketLookupLocation: function marketLookupLocation(query, xAmphoradataVersion, options) {
      return MarketApiFp(configuration).marketLookupLocation(query, xAmphoradataVersion, options)(axios, basePath);
    }
  };
};
/**
 * MarketApi - object-oriented interface
 * @export
 * @class MarketApi
 * @extends {BaseAPI}
 */


exports.MarketApiFactory = MarketApiFactory;

var MarketApi = /*#__PURE__*/function (_BaseAPI6) {
  _inherits(MarketApi, _BaseAPI6);

  var _super6 = _createSuper(MarketApi);

  function MarketApi() {
    _classCallCheck(this, MarketApi);

    return _super6.apply(this, arguments);
  }

  _createClass(MarketApi, [{
    key: "marketFind",

    /**
     * 
     * @summary Finds Amphora using a fuzzy search.
     * @param {string} [query] A string as a search term.
     * @param {number} [top] How many results to return.
     * @param {number} [skip] How many pages (in multiples of top) to skip.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketApi
     */
    value: function marketFind(query, top, skip, xAmphoradataVersion, options) {
      return MarketApiFp(this.configuration).marketFind(query, top, skip, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Executes a fuzzy location search.
     * @param {string} [query] Search Text.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketApi
     */

  }, {
    key: "marketLookupLocation",
    value: function marketLookupLocation(query, xAmphoradataVersion, options) {
      return MarketApiFp(this.configuration).marketLookupLocation(query, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
  }]);

  return MarketApi;
}(_base.BaseAPI);
/**
 * OrganisationsApi - axios parameter creator
 * @export
 */


exports.MarketApi = MarketApi;

var OrganisationsApiAxiosParamCreator = function OrganisationsApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary Get\'s an Organisation\'s plan information.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountGetPlan: function accountGetPlan(id, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling accountGetPlan.');
      }

      var localVarPath = "/api/Organisations/{id}/Account/Plan".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Get\'s an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead: function accountRead(id, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling accountRead.');
      }

      var localVarPath = "/api/Organisations/{id}/Account".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Creates a new Organisation. This will assign the logged in user to the organisation.
     * @param {Organisation} organisation Information of the new Organisation.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsCreate: function organisationsCreate(organisation, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'organisation' is not null or undefined
      if (organisation === null || organisation === undefined) {
        throw new _base.RequiredError('organisation', 'Required parameter organisation was null or undefined when calling organisationsCreate.');
      }

      var localVarPath = "/api/Organisations";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'POST'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      var needsSerialization = typeof organisation !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(organisation !== undefined ? organisation : {}) : organisation || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Deletes an organisation.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsDelete: function organisationsDelete(id, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling organisationsDelete.');
      }

      var localVarPath = "/api/Organisations/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'DELETE'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets an organisation\'s details.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsRead: function organisationsRead(id, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling organisationsRead.');
      }

      var localVarPath = "/api/Organisations/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Gets an organisation\'s invitations.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsReadInvitations: function organisationsReadInvitations(id, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling organisationsReadInvitations.');
      }

      var localVarPath = "/api/Organisations/{id}/Invitations".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Get\'s a list of an Organisation\'s Terms of Use.
     * @param {string} id The Id of the Organisation.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsTermsOfUseRead: function organisationsTermsOfUseRead(id, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling organisationsTermsOfUseRead.');
      }

      var localVarPath = "/api/Organisations/{id}/TermsOfUse".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Updates an organisation.
     * @param {string} id Organisation Id.
     * @param {Organisation} organisation Organisation Information. All fields are updated.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsUpdate: function organisationsUpdate(id, organisation, xAmphoradataVersion) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling organisationsUpdate.');
      } // verify required parameter 'organisation' is not null or undefined


      if (organisation === null || organisation === undefined) {
        throw new _base.RequiredError('organisation', 'Required parameter organisation was null or undefined when calling organisationsUpdate.');
      }

      var localVarPath = "/api/Organisations/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'PUT'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      var needsSerialization = typeof organisation !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(organisation !== undefined ? organisation : {}) : organisation || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * OrganisationsApi - functional programming interface
 * @export
 */


exports.OrganisationsApiAxiosParamCreator = OrganisationsApiAxiosParamCreator;

var OrganisationsApiFp = function OrganisationsApiFp(configuration) {
  return {
    /**
     * 
     * @summary Get\'s an Organisation\'s plan information.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountGetPlan: function accountGetPlan(id, xAmphoradataVersion, options) {
      var localVarAxiosArgs = OrganisationsApiAxiosParamCreator(configuration).accountGetPlan(id, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Get\'s an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead: function accountRead(id, xAmphoradataVersion, options) {
      var localVarAxiosArgs = OrganisationsApiAxiosParamCreator(configuration).accountRead(id, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Creates a new Organisation. This will assign the logged in user to the organisation.
     * @param {Organisation} organisation Information of the new Organisation.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsCreate: function organisationsCreate(organisation, xAmphoradataVersion, options) {
      var localVarAxiosArgs = OrganisationsApiAxiosParamCreator(configuration).organisationsCreate(organisation, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Deletes an organisation.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsDelete: function organisationsDelete(id, xAmphoradataVersion, options) {
      var localVarAxiosArgs = OrganisationsApiAxiosParamCreator(configuration).organisationsDelete(id, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets an organisation\'s details.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsRead: function organisationsRead(id, xAmphoradataVersion, options) {
      var localVarAxiosArgs = OrganisationsApiAxiosParamCreator(configuration).organisationsRead(id, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Gets an organisation\'s invitations.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsReadInvitations: function organisationsReadInvitations(id, xAmphoradataVersion, options) {
      var localVarAxiosArgs = OrganisationsApiAxiosParamCreator(configuration).organisationsReadInvitations(id, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Get\'s a list of an Organisation\'s Terms of Use.
     * @param {string} id The Id of the Organisation.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsTermsOfUseRead: function organisationsTermsOfUseRead(id, xAmphoradataVersion, options) {
      var localVarAxiosArgs = OrganisationsApiAxiosParamCreator(configuration).organisationsTermsOfUseRead(id, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Updates an organisation.
     * @param {string} id Organisation Id.
     * @param {Organisation} organisation Organisation Information. All fields are updated.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsUpdate: function organisationsUpdate(id, organisation, xAmphoradataVersion, options) {
      var localVarAxiosArgs = OrganisationsApiAxiosParamCreator(configuration).organisationsUpdate(id, organisation, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * OrganisationsApi - factory interface
 * @export
 */


exports.OrganisationsApiFp = OrganisationsApiFp;

var OrganisationsApiFactory = function OrganisationsApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary Get\'s an Organisation\'s plan information.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountGetPlan: function accountGetPlan(id, xAmphoradataVersion, options) {
      return OrganisationsApiFp(configuration).accountGetPlan(id, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Get\'s an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    accountRead: function accountRead(id, xAmphoradataVersion, options) {
      return OrganisationsApiFp(configuration).accountRead(id, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Creates a new Organisation. This will assign the logged in user to the organisation.
     * @param {Organisation} organisation Information of the new Organisation.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsCreate: function organisationsCreate(organisation, xAmphoradataVersion, options) {
      return OrganisationsApiFp(configuration).organisationsCreate(organisation, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Deletes an organisation.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsDelete: function organisationsDelete(id, xAmphoradataVersion, options) {
      return OrganisationsApiFp(configuration).organisationsDelete(id, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets an organisation\'s details.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsRead: function organisationsRead(id, xAmphoradataVersion, options) {
      return OrganisationsApiFp(configuration).organisationsRead(id, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Gets an organisation\'s invitations.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsReadInvitations: function organisationsReadInvitations(id, xAmphoradataVersion, options) {
      return OrganisationsApiFp(configuration).organisationsReadInvitations(id, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Get\'s a list of an Organisation\'s Terms of Use.
     * @param {string} id The Id of the Organisation.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsTermsOfUseRead: function organisationsTermsOfUseRead(id, xAmphoradataVersion, options) {
      return OrganisationsApiFp(configuration).organisationsTermsOfUseRead(id, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Updates an organisation.
     * @param {string} id Organisation Id.
     * @param {Organisation} organisation Organisation Information. All fields are updated.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    organisationsUpdate: function organisationsUpdate(id, organisation, xAmphoradataVersion, options) {
      return OrganisationsApiFp(configuration).organisationsUpdate(id, organisation, xAmphoradataVersion, options)(axios, basePath);
    }
  };
};
/**
 * OrganisationsApi - object-oriented interface
 * @export
 * @class OrganisationsApi
 * @extends {BaseAPI}
 */


exports.OrganisationsApiFactory = OrganisationsApiFactory;

var OrganisationsApi = /*#__PURE__*/function (_BaseAPI7) {
  _inherits(OrganisationsApi, _BaseAPI7);

  var _super7 = _createSuper(OrganisationsApi);

  function OrganisationsApi() {
    _classCallCheck(this, OrganisationsApi);

    return _super7.apply(this, arguments);
  }

  _createClass(OrganisationsApi, [{
    key: "accountGetPlan",

    /**
     * 
     * @summary Get\'s an Organisation\'s plan information.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    value: function accountGetPlan(id, xAmphoradataVersion, options) {
      return OrganisationsApiFp(this.configuration).accountGetPlan(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Get\'s an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */

  }, {
    key: "accountRead",
    value: function accountRead(id, xAmphoradataVersion, options) {
      return OrganisationsApiFp(this.configuration).accountRead(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Creates a new Organisation. This will assign the logged in user to the organisation.
     * @param {Organisation} organisation Information of the new Organisation.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */

  }, {
    key: "organisationsCreate",
    value: function organisationsCreate(organisation, xAmphoradataVersion, options) {
      return OrganisationsApiFp(this.configuration).organisationsCreate(organisation, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Deletes an organisation.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */

  }, {
    key: "organisationsDelete",
    value: function organisationsDelete(id, xAmphoradataVersion, options) {
      return OrganisationsApiFp(this.configuration).organisationsDelete(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets an organisation\'s details.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */

  }, {
    key: "organisationsRead",
    value: function organisationsRead(id, xAmphoradataVersion, options) {
      return OrganisationsApiFp(this.configuration).organisationsRead(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Gets an organisation\'s invitations.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */

  }, {
    key: "organisationsReadInvitations",
    value: function organisationsReadInvitations(id, xAmphoradataVersion, options) {
      return OrganisationsApiFp(this.configuration).organisationsReadInvitations(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Get\'s a list of an Organisation\'s Terms of Use.
     * @param {string} id The Id of the Organisation.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */

  }, {
    key: "organisationsTermsOfUseRead",
    value: function organisationsTermsOfUseRead(id, xAmphoradataVersion, options) {
      return OrganisationsApiFp(this.configuration).organisationsTermsOfUseRead(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Updates an organisation.
     * @param {string} id Organisation Id.
     * @param {Organisation} organisation Organisation Information. All fields are updated.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */

  }, {
    key: "organisationsUpdate",
    value: function organisationsUpdate(id, organisation, xAmphoradataVersion, options) {
      return OrganisationsApiFp(this.configuration).organisationsUpdate(id, organisation, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
  }]);

  return OrganisationsApi;
}(_base.BaseAPI);
/**
 * PermissionApi - axios parameter creator
 * @export
 */


exports.OrganisationsApi = OrganisationsApi;

var PermissionApiAxiosParamCreator = function PermissionApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary The permission level for each object id in the request.
     * @param {PermissionsRequest} permissionsRequest A request object containing the list of ids to check.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permissionGetPermissions: function permissionGetPermissions(permissionsRequest, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'permissionsRequest' is not null or undefined
      if (permissionsRequest === null || permissionsRequest === undefined) {
        throw new _base.RequiredError('permissionsRequest', 'Required parameter permissionsRequest was null or undefined when calling permissionGetPermissions.');
      }

      var localVarPath = "/api/permissions";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'POST'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      var needsSerialization = typeof permissionsRequest !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(permissionsRequest !== undefined ? permissionsRequest : {}) : permissionsRequest || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * PermissionApi - functional programming interface
 * @export
 */


exports.PermissionApiAxiosParamCreator = PermissionApiAxiosParamCreator;

var PermissionApiFp = function PermissionApiFp(configuration) {
  return {
    /**
     * 
     * @summary The permission level for each object id in the request.
     * @param {PermissionsRequest} permissionsRequest A request object containing the list of ids to check.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permissionGetPermissions: function permissionGetPermissions(permissionsRequest, xAmphoradataVersion, options) {
      var localVarAxiosArgs = PermissionApiAxiosParamCreator(configuration).permissionGetPermissions(permissionsRequest, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * PermissionApi - factory interface
 * @export
 */


exports.PermissionApiFp = PermissionApiFp;

var PermissionApiFactory = function PermissionApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary The permission level for each object id in the request.
     * @param {PermissionsRequest} permissionsRequest A request object containing the list of ids to check.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permissionGetPermissions: function permissionGetPermissions(permissionsRequest, xAmphoradataVersion, options) {
      return PermissionApiFp(configuration).permissionGetPermissions(permissionsRequest, xAmphoradataVersion, options)(axios, basePath);
    }
  };
};
/**
 * PermissionApi - object-oriented interface
 * @export
 * @class PermissionApi
 * @extends {BaseAPI}
 */


exports.PermissionApiFactory = PermissionApiFactory;

var PermissionApi = /*#__PURE__*/function (_BaseAPI8) {
  _inherits(PermissionApi, _BaseAPI8);

  var _super8 = _createSuper(PermissionApi);

  function PermissionApi() {
    _classCallCheck(this, PermissionApi);

    return _super8.apply(this, arguments);
  }

  _createClass(PermissionApi, [{
    key: "permissionGetPermissions",

    /**
     * 
     * @summary The permission level for each object id in the request.
     * @param {PermissionsRequest} permissionsRequest A request object containing the list of ids to check.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    value: function permissionGetPermissions(permissionsRequest, xAmphoradataVersion, options) {
      return PermissionApiFp(this.configuration).permissionGetPermissions(permissionsRequest, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
  }]);

  return PermissionApi;
}(_base.BaseAPI);
/**
 * SearchApi - axios parameter creator
 * @export
 */


exports.PermissionApi = PermissionApi;

var SearchApiAxiosParamCreator = function SearchApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary Searches for Amphorae.
     * @param {string} [term] General search term for text comparison.
     * @param {string} [labels] Comma separated labels that must be included in results.
     * @param {number} [lat] Latitude (center of search area).
     * @param {number} [lon] Longitude (center of search area).
     * @param {number} [dist] Distance from center of search area (describing a circle).
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchAmphorae: function searchSearchAmphorae(term, labels, lat, lon, dist, xAmphoradataVersion) {
      var options = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};
      var localVarPath = "/api/search/amphorae";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (term !== undefined) {
        localVarQueryParameter['term'] = term;
      }

      if (labels !== undefined) {
        localVarQueryParameter['labels'] = labels;
      }

      if (lat !== undefined) {
        localVarQueryParameter['lat'] = lat;
      }

      if (lon !== undefined) {
        localVarQueryParameter['lon'] = lon;
      }

      if (dist !== undefined) {
        localVarQueryParameter['dist'] = dist;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Searches for Amphorae by loction.
     * @param {number} [lat] Latitude.
     * @param {number} [lon] Longitude.
     * @param {number} [dist] Distance from Latitude and Longitude in which to search.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchAmphoraeByLocation: function searchSearchAmphoraeByLocation(lat, lon, dist, xAmphoradataVersion) {
      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
      var localVarPath = "/api/search/amphorae/byLocation";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (lat !== undefined) {
        localVarQueryParameter['lat'] = lat;
      }

      if (lon !== undefined) {
        localVarQueryParameter['lon'] = lon;
      }

      if (dist !== undefined) {
        localVarQueryParameter['dist'] = dist;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Searches for Amphorae in an Organisation.
     * @param {string} [orgId] Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchAmphoraeByOrganisation: function searchSearchAmphoraeByOrganisation(orgId, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var localVarPath = "/api/search/amphorae/byOrganisation";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (orgId !== undefined) {
        localVarQueryParameter['orgId'] = orgId;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Searches for Organisations with fuzzy search.
     * @param {string} [term] Search Term.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchOrganisations: function searchSearchOrganisations(term, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var localVarPath = "/api/search/organisations";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (term !== undefined) {
        localVarQueryParameter['term'] = term;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * SearchApi - functional programming interface
 * @export
 */


exports.SearchApiAxiosParamCreator = SearchApiAxiosParamCreator;

var SearchApiFp = function SearchApiFp(configuration) {
  return {
    /**
     * 
     * @summary Searches for Amphorae.
     * @param {string} [term] General search term for text comparison.
     * @param {string} [labels] Comma separated labels that must be included in results.
     * @param {number} [lat] Latitude (center of search area).
     * @param {number} [lon] Longitude (center of search area).
     * @param {number} [dist] Distance from center of search area (describing a circle).
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchAmphorae: function searchSearchAmphorae(term, labels, lat, lon, dist, xAmphoradataVersion, options) {
      var localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchSearchAmphorae(term, labels, lat, lon, dist, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Searches for Amphorae by loction.
     * @param {number} [lat] Latitude.
     * @param {number} [lon] Longitude.
     * @param {number} [dist] Distance from Latitude and Longitude in which to search.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchAmphoraeByLocation: function searchSearchAmphoraeByLocation(lat, lon, dist, xAmphoradataVersion, options) {
      var localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchSearchAmphoraeByLocation(lat, lon, dist, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Searches for Amphorae in an Organisation.
     * @param {string} [orgId] Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchAmphoraeByOrganisation: function searchSearchAmphoraeByOrganisation(orgId, xAmphoradataVersion, options) {
      var localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchSearchAmphoraeByOrganisation(orgId, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Searches for Organisations with fuzzy search.
     * @param {string} [term] Search Term.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchOrganisations: function searchSearchOrganisations(term, xAmphoradataVersion, options) {
      var localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchSearchOrganisations(term, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * SearchApi - factory interface
 * @export
 */


exports.SearchApiFp = SearchApiFp;

var SearchApiFactory = function SearchApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary Searches for Amphorae.
     * @param {string} [term] General search term for text comparison.
     * @param {string} [labels] Comma separated labels that must be included in results.
     * @param {number} [lat] Latitude (center of search area).
     * @param {number} [lon] Longitude (center of search area).
     * @param {number} [dist] Distance from center of search area (describing a circle).
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchAmphorae: function searchSearchAmphorae(term, labels, lat, lon, dist, xAmphoradataVersion, options) {
      return SearchApiFp(configuration).searchSearchAmphorae(term, labels, lat, lon, dist, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Searches for Amphorae by loction.
     * @param {number} [lat] Latitude.
     * @param {number} [lon] Longitude.
     * @param {number} [dist] Distance from Latitude and Longitude in which to search.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchAmphoraeByLocation: function searchSearchAmphoraeByLocation(lat, lon, dist, xAmphoradataVersion, options) {
      return SearchApiFp(configuration).searchSearchAmphoraeByLocation(lat, lon, dist, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Searches for Amphorae in an Organisation.
     * @param {string} [orgId] Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchAmphoraeByOrganisation: function searchSearchAmphoraeByOrganisation(orgId, xAmphoradataVersion, options) {
      return SearchApiFp(configuration).searchSearchAmphoraeByOrganisation(orgId, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Searches for Organisations with fuzzy search.
     * @param {string} [term] Search Term.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchSearchOrganisations: function searchSearchOrganisations(term, xAmphoradataVersion, options) {
      return SearchApiFp(configuration).searchSearchOrganisations(term, xAmphoradataVersion, options)(axios, basePath);
    }
  };
};
/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */


exports.SearchApiFactory = SearchApiFactory;

var SearchApi = /*#__PURE__*/function (_BaseAPI9) {
  _inherits(SearchApi, _BaseAPI9);

  var _super9 = _createSuper(SearchApi);

  function SearchApi() {
    _classCallCheck(this, SearchApi);

    return _super9.apply(this, arguments);
  }

  _createClass(SearchApi, [{
    key: "searchSearchAmphorae",

    /**
     * 
     * @summary Searches for Amphorae.
     * @param {string} [term] General search term for text comparison.
     * @param {string} [labels] Comma separated labels that must be included in results.
     * @param {number} [lat] Latitude (center of search area).
     * @param {number} [lon] Longitude (center of search area).
     * @param {number} [dist] Distance from center of search area (describing a circle).
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    value: function searchSearchAmphorae(term, labels, lat, lon, dist, xAmphoradataVersion, options) {
      return SearchApiFp(this.configuration).searchSearchAmphorae(term, labels, lat, lon, dist, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Searches for Amphorae by loction.
     * @param {number} [lat] Latitude.
     * @param {number} [lon] Longitude.
     * @param {number} [dist] Distance from Latitude and Longitude in which to search.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */

  }, {
    key: "searchSearchAmphoraeByLocation",
    value: function searchSearchAmphoraeByLocation(lat, lon, dist, xAmphoradataVersion, options) {
      return SearchApiFp(this.configuration).searchSearchAmphoraeByLocation(lat, lon, dist, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Searches for Amphorae in an Organisation.
     * @param {string} [orgId] Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */

  }, {
    key: "searchSearchAmphoraeByOrganisation",
    value: function searchSearchAmphoraeByOrganisation(orgId, xAmphoradataVersion, options) {
      return SearchApiFp(this.configuration).searchSearchAmphoraeByOrganisation(orgId, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Searches for Organisations with fuzzy search.
     * @param {string} [term] Search Term.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */

  }, {
    key: "searchSearchOrganisations",
    value: function searchSearchOrganisations(term, xAmphoradataVersion, options) {
      return SearchApiFp(this.configuration).searchSearchOrganisations(term, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
  }]);

  return SearchApi;
}(_base.BaseAPI);
/**
 * TermsOfUseApi - axios parameter creator
 * @export
 */


exports.SearchApi = SearchApi;

var TermsOfUseApiAxiosParamCreator = function TermsOfUseApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary Accepts a Terms of Use.
     * @param {string} id The Terms of Use id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseAccept: function termsOfUseAccept(id, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling termsOfUseAccept.');
      }

      var localVarPath = "/api/TermsOfUse/{id}/Accepts".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'POST'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Creates a Terms of Use object.
     * @param {CreateTermsOfUse} createTermsOfUse The terms of use to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseCreate: function termsOfUseCreate(createTermsOfUse, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'createTermsOfUse' is not null or undefined
      if (createTermsOfUse === null || createTermsOfUse === undefined) {
        throw new _base.RequiredError('createTermsOfUse', 'Required parameter createTermsOfUse was null or undefined when calling termsOfUseCreate.');
      }

      var localVarPath = "/api/TermsOfUse";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'POST'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      var needsSerialization = typeof createTermsOfUse !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(createTermsOfUse !== undefined ? createTermsOfUse : {}) : createTermsOfUse || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Deletes a Terms of Use object.
     * @param {string} id The terms of use id to delete.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseDelete: function termsOfUseDelete(id, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling termsOfUseDelete.');
      }

      var localVarPath = "/api/TermsOfUse/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'DELETE'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Returns all Terms of Use.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseList: function termsOfUseList(xAmphoradataVersion) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var localVarPath = "/api/TermsOfUse";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Returns all Terms of Use.
     * @param {string} id 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseRead: function termsOfUseRead(id, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new _base.RequiredError('id', 'Required parameter id was null or undefined when calling termsOfUseRead.');
      }

      var localVarPath = "/api/TermsOfUse/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(id)));
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * TermsOfUseApi - functional programming interface
 * @export
 */


exports.TermsOfUseApiAxiosParamCreator = TermsOfUseApiAxiosParamCreator;

var TermsOfUseApiFp = function TermsOfUseApiFp(configuration) {
  return {
    /**
     * 
     * @summary Accepts a Terms of Use.
     * @param {string} id The Terms of Use id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseAccept: function termsOfUseAccept(id, xAmphoradataVersion, options) {
      var localVarAxiosArgs = TermsOfUseApiAxiosParamCreator(configuration).termsOfUseAccept(id, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Creates a Terms of Use object.
     * @param {CreateTermsOfUse} createTermsOfUse The terms of use to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseCreate: function termsOfUseCreate(createTermsOfUse, xAmphoradataVersion, options) {
      var localVarAxiosArgs = TermsOfUseApiAxiosParamCreator(configuration).termsOfUseCreate(createTermsOfUse, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Deletes a Terms of Use object.
     * @param {string} id The terms of use id to delete.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseDelete: function termsOfUseDelete(id, xAmphoradataVersion, options) {
      var localVarAxiosArgs = TermsOfUseApiAxiosParamCreator(configuration).termsOfUseDelete(id, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Returns all Terms of Use.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseList: function termsOfUseList(xAmphoradataVersion, options) {
      var localVarAxiosArgs = TermsOfUseApiAxiosParamCreator(configuration).termsOfUseList(xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Returns all Terms of Use.
     * @param {string} id 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseRead: function termsOfUseRead(id, xAmphoradataVersion, options) {
      var localVarAxiosArgs = TermsOfUseApiAxiosParamCreator(configuration).termsOfUseRead(id, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * TermsOfUseApi - factory interface
 * @export
 */


exports.TermsOfUseApiFp = TermsOfUseApiFp;

var TermsOfUseApiFactory = function TermsOfUseApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary Accepts a Terms of Use.
     * @param {string} id The Terms of Use id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseAccept: function termsOfUseAccept(id, xAmphoradataVersion, options) {
      return TermsOfUseApiFp(configuration).termsOfUseAccept(id, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Creates a Terms of Use object.
     * @param {CreateTermsOfUse} createTermsOfUse The terms of use to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseCreate: function termsOfUseCreate(createTermsOfUse, xAmphoradataVersion, options) {
      return TermsOfUseApiFp(configuration).termsOfUseCreate(createTermsOfUse, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Deletes a Terms of Use object.
     * @param {string} id The terms of use id to delete.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseDelete: function termsOfUseDelete(id, xAmphoradataVersion, options) {
      return TermsOfUseApiFp(configuration).termsOfUseDelete(id, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Returns all Terms of Use.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseList: function termsOfUseList(xAmphoradataVersion, options) {
      return TermsOfUseApiFp(configuration).termsOfUseList(xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Returns all Terms of Use.
     * @param {string} id 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    termsOfUseRead: function termsOfUseRead(id, xAmphoradataVersion, options) {
      return TermsOfUseApiFp(configuration).termsOfUseRead(id, xAmphoradataVersion, options)(axios, basePath);
    }
  };
};
/**
 * TermsOfUseApi - object-oriented interface
 * @export
 * @class TermsOfUseApi
 * @extends {BaseAPI}
 */


exports.TermsOfUseApiFactory = TermsOfUseApiFactory;

var TermsOfUseApi = /*#__PURE__*/function (_BaseAPI10) {
  _inherits(TermsOfUseApi, _BaseAPI10);

  var _super10 = _createSuper(TermsOfUseApi);

  function TermsOfUseApi() {
    _classCallCheck(this, TermsOfUseApi);

    return _super10.apply(this, arguments);
  }

  _createClass(TermsOfUseApi, [{
    key: "termsOfUseAccept",

    /**
     * 
     * @summary Accepts a Terms of Use.
     * @param {string} id The Terms of Use id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsOfUseApi
     */
    value: function termsOfUseAccept(id, xAmphoradataVersion, options) {
      return TermsOfUseApiFp(this.configuration).termsOfUseAccept(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Creates a Terms of Use object.
     * @param {CreateTermsOfUse} createTermsOfUse The terms of use to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsOfUseApi
     */

  }, {
    key: "termsOfUseCreate",
    value: function termsOfUseCreate(createTermsOfUse, xAmphoradataVersion, options) {
      return TermsOfUseApiFp(this.configuration).termsOfUseCreate(createTermsOfUse, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Deletes a Terms of Use object.
     * @param {string} id The terms of use id to delete.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsOfUseApi
     */

  }, {
    key: "termsOfUseDelete",
    value: function termsOfUseDelete(id, xAmphoradataVersion, options) {
      return TermsOfUseApiFp(this.configuration).termsOfUseDelete(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Returns all Terms of Use.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsOfUseApi
     */

  }, {
    key: "termsOfUseList",
    value: function termsOfUseList(xAmphoradataVersion, options) {
      return TermsOfUseApiFp(this.configuration).termsOfUseList(xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Returns all Terms of Use.
     * @param {string} id 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsOfUseApi
     */

  }, {
    key: "termsOfUseRead",
    value: function termsOfUseRead(id, xAmphoradataVersion, options) {
      return TermsOfUseApiFp(this.configuration).termsOfUseRead(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
  }]);

  return TermsOfUseApi;
}(_base.BaseAPI);
/**
 * TimeSeriesApi - axios parameter creator
 * @export
 */


exports.TermsOfUseApi = TermsOfUseApi;

var TimeSeriesApiAxiosParamCreator = function TimeSeriesApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary Updates the details of an Amphora by Id.
     * @param {QueryRequest} queryRequest Time Series query. See https://github.com/microsoft/tsiclient/blob/master/docs/Server.md#functions .
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    timeSeriesQueryTimeSeries: function timeSeriesQueryTimeSeries(queryRequest, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'queryRequest' is not null or undefined
      if (queryRequest === null || queryRequest === undefined) {
        throw new _base.RequiredError('queryRequest', 'Required parameter queryRequest was null or undefined when calling timeSeriesQueryTimeSeries.');
      }

      var localVarPath = "/api/timeseries/query";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'POST'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      var needsSerialization = typeof queryRequest !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(queryRequest !== undefined ? queryRequest : {}) : queryRequest || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * TimeSeriesApi - functional programming interface
 * @export
 */


exports.TimeSeriesApiAxiosParamCreator = TimeSeriesApiAxiosParamCreator;

var TimeSeriesApiFp = function TimeSeriesApiFp(configuration) {
  return {
    /**
     * 
     * @summary Updates the details of an Amphora by Id.
     * @param {QueryRequest} queryRequest Time Series query. See https://github.com/microsoft/tsiclient/blob/master/docs/Server.md#functions .
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    timeSeriesQueryTimeSeries: function timeSeriesQueryTimeSeries(queryRequest, xAmphoradataVersion, options) {
      var localVarAxiosArgs = TimeSeriesApiAxiosParamCreator(configuration).timeSeriesQueryTimeSeries(queryRequest, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * TimeSeriesApi - factory interface
 * @export
 */


exports.TimeSeriesApiFp = TimeSeriesApiFp;

var TimeSeriesApiFactory = function TimeSeriesApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary Updates the details of an Amphora by Id.
     * @param {QueryRequest} queryRequest Time Series query. See https://github.com/microsoft/tsiclient/blob/master/docs/Server.md#functions .
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    timeSeriesQueryTimeSeries: function timeSeriesQueryTimeSeries(queryRequest, xAmphoradataVersion, options) {
      return TimeSeriesApiFp(configuration).timeSeriesQueryTimeSeries(queryRequest, xAmphoradataVersion, options)(axios, basePath);
    }
  };
};
/**
 * TimeSeriesApi - object-oriented interface
 * @export
 * @class TimeSeriesApi
 * @extends {BaseAPI}
 */


exports.TimeSeriesApiFactory = TimeSeriesApiFactory;

var TimeSeriesApi = /*#__PURE__*/function (_BaseAPI11) {
  _inherits(TimeSeriesApi, _BaseAPI11);

  var _super11 = _createSuper(TimeSeriesApi);

  function TimeSeriesApi() {
    _classCallCheck(this, TimeSeriesApi);

    return _super11.apply(this, arguments);
  }

  _createClass(TimeSeriesApi, [{
    key: "timeSeriesQueryTimeSeries",

    /**
     * 
     * @summary Updates the details of an Amphora by Id.
     * @param {QueryRequest} queryRequest Time Series query. See https://github.com/microsoft/tsiclient/blob/master/docs/Server.md#functions .
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeSeriesApi
     */
    value: function timeSeriesQueryTimeSeries(queryRequest, xAmphoradataVersion, options) {
      return TimeSeriesApiFp(this.configuration).timeSeriesQueryTimeSeries(queryRequest, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
  }]);

  return TimeSeriesApi;
}(_base.BaseAPI);
/**
 * UsersApi - axios parameter creator
 * @export
 */


exports.TimeSeriesApi = TimeSeriesApi;

var UsersApiAxiosParamCreator = function UsersApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary Creates a new User. Returns the password.
     * @param {CreateAmphoraUser} createAmphoraUser User parameters.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCreate: function usersCreate(createAmphoraUser, xAmphoradataVersion) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // verify required parameter 'createAmphoraUser' is not null or undefined
      if (createAmphoraUser === null || createAmphoraUser === undefined) {
        throw new _base.RequiredError('createAmphoraUser', 'Required parameter createAmphoraUser was null or undefined when calling usersCreate.');
      }

      var localVarPath = "/api/users";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'POST'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';
      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      var needsSerialization = typeof createAmphoraUser !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(createAmphoraUser !== undefined ? createAmphoraUser : {}) : createAmphoraUser || "";
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },

    /**
     * 
     * @summary Get\'s logged in users information.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersReadSelf: function usersReadSelf(xAmphoradataVersion) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var localVarPath = "/api/users/self";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * UsersApi - functional programming interface
 * @export
 */


exports.UsersApiAxiosParamCreator = UsersApiAxiosParamCreator;

var UsersApiFp = function UsersApiFp(configuration) {
  return {
    /**
     * 
     * @summary Creates a new User. Returns the password.
     * @param {CreateAmphoraUser} createAmphoraUser User parameters.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCreate: function usersCreate(createAmphoraUser, xAmphoradataVersion, options) {
      var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).usersCreate(createAmphoraUser, xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    },

    /**
     * 
     * @summary Get\'s logged in users information.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersReadSelf: function usersReadSelf(xAmphoradataVersion, options) {
      var localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).usersReadSelf(xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * UsersApi - factory interface
 * @export
 */


exports.UsersApiFp = UsersApiFp;

var UsersApiFactory = function UsersApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary Creates a new User. Returns the password.
     * @param {CreateAmphoraUser} createAmphoraUser User parameters.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCreate: function usersCreate(createAmphoraUser, xAmphoradataVersion, options) {
      return UsersApiFp(configuration).usersCreate(createAmphoraUser, xAmphoradataVersion, options)(axios, basePath);
    },

    /**
     * 
     * @summary Get\'s logged in users information.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersReadSelf: function usersReadSelf(xAmphoradataVersion, options) {
      return UsersApiFp(configuration).usersReadSelf(xAmphoradataVersion, options)(axios, basePath);
    }
  };
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */


exports.UsersApiFactory = UsersApiFactory;

var UsersApi = /*#__PURE__*/function (_BaseAPI12) {
  _inherits(UsersApi, _BaseAPI12);

  var _super12 = _createSuper(UsersApi);

  function UsersApi() {
    _classCallCheck(this, UsersApi);

    return _super12.apply(this, arguments);
  }

  _createClass(UsersApi, [{
    key: "usersCreate",

    /**
     * 
     * @summary Creates a new User. Returns the password.
     * @param {CreateAmphoraUser} createAmphoraUser User parameters.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    value: function usersCreate(createAmphoraUser, xAmphoradataVersion, options) {
      return UsersApiFp(this.configuration).usersCreate(createAmphoraUser, xAmphoradataVersion, options)(this.axios, this.basePath);
    }
    /**
     * 
     * @summary Get\'s logged in users information.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */

  }, {
    key: "usersReadSelf",
    value: function usersReadSelf(xAmphoradataVersion, options) {
      return UsersApiFp(this.configuration).usersReadSelf(xAmphoradataVersion, options)(this.axios, this.basePath);
    }
  }]);

  return UsersApi;
}(_base.BaseAPI);
/**
 * VersionApi - axios parameter creator
 * @export
 */


exports.UsersApi = UsersApi;

var VersionApiAxiosParamCreator = function VersionApiAxiosParamCreator(configuration) {
  return {
    /**
     * 
     * @summary Get\'s the current server version.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionGetCurrentVersion: function versionGetCurrentVersion(xAmphoradataVersion) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var localVarPath = "/api/version";
      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      var baseOptions;

      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      var localVarRequestOptions = _objectSpread({
        method: 'GET'
      }, baseOptions, {}, options);

      var localVarHeaderParameter = {};
      var localVarQueryParameter = {}; // authentication Bearer required

      if (configuration && configuration.apiKey) {
        var localVarApiKeyValue = typeof configuration.apiKey === 'function' ? configuration.apiKey("Authorization") : configuration.apiKey;
        localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
      }

      if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
        localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
      }

      localVarUrlObj.query = _objectSpread({}, localVarUrlObj.query, {}, localVarQueryParameter, {}, options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943

      delete localVarUrlObj.search;
      localVarRequestOptions.headers = _objectSpread({}, localVarHeaderParameter, {}, options.headers);
      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
/**
 * VersionApi - functional programming interface
 * @export
 */


exports.VersionApiAxiosParamCreator = VersionApiAxiosParamCreator;

var VersionApiFp = function VersionApiFp(configuration) {
  return {
    /**
     * 
     * @summary Get\'s the current server version.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionGetCurrentVersion: function versionGetCurrentVersion(xAmphoradataVersion, options) {
      var localVarAxiosArgs = VersionApiAxiosParamCreator(configuration).versionGetCurrentVersion(xAmphoradataVersion, options);
      return function () {
        var axios = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _axios["default"];
        var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _base.BASE_PATH;

        var axiosRequestArgs = _objectSpread({}, localVarAxiosArgs.options, {
          url: basePath + localVarAxiosArgs.url
        });

        return axios.request(axiosRequestArgs);
      };
    }
  };
};
/**
 * VersionApi - factory interface
 * @export
 */


exports.VersionApiFp = VersionApiFp;

var VersionApiFactory = function VersionApiFactory(configuration, basePath, axios) {
  return {
    /**
     * 
     * @summary Get\'s the current server version.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionGetCurrentVersion: function versionGetCurrentVersion(xAmphoradataVersion, options) {
      return VersionApiFp(configuration).versionGetCurrentVersion(xAmphoradataVersion, options)(axios, basePath);
    }
  };
};
/**
 * VersionApi - object-oriented interface
 * @export
 * @class VersionApi
 * @extends {BaseAPI}
 */


exports.VersionApiFactory = VersionApiFactory;

var VersionApi = /*#__PURE__*/function (_BaseAPI13) {
  _inherits(VersionApi, _BaseAPI13);

  var _super13 = _createSuper(VersionApi);

  function VersionApi() {
    _classCallCheck(this, VersionApi);

    return _super13.apply(this, arguments);
  }

  _createClass(VersionApi, [{
    key: "versionGetCurrentVersion",

    /**
     * 
     * @summary Get\'s the current server version.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionApi
     */
    value: function versionGetCurrentVersion(xAmphoradataVersion, options) {
      return VersionApiFp(this.configuration).versionGetCurrentVersion(xAmphoradataVersion, options)(this.axios, this.basePath);
    }
  }]);

  return VersionApi;
}(_base.BaseAPI);

exports.VersionApi = VersionApi;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,