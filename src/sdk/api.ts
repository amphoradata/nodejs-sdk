// tslint:disable
/**
 * Amphora Data
 *              Connect information in real time with Amphora Data.                          Learn more at https://docs.amphoradata.com
 *
 * The version of the OpenAPI document: 0.10.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccessLevelQuery
 */
export interface AccessLevelQuery {
    /**
     * Gets or sets The id of the Amphora you are checking.
     * @type {string}
     * @memberof AccessLevelQuery
     */
    amphoraId?: string | null;
    /**
     * Gets or sets the access level that will be checked. Ranges from 0 (none) to 256 (Administer).
     * @type {number}
     * @memberof AccessLevelQuery
     */
    accessLevel?: number;
}
/**
 * 
 * @export
 * @interface AccessLevelResponse
 */
export interface AccessLevelResponse {
    /**
     * Gets or sets The id of the Amphora you are checking.
     * @type {string}
     * @memberof AccessLevelResponse
     */
    amphoraId?: string | null;
    /**
     * Gets or sets the access level that will be checked. Ranges from 0 (none) to 256 (Administer).
     * @type {number}
     * @memberof AccessLevelResponse
     */
    accessLevel?: number;
    /**
     * Gets or sets a value indicating whether is authorized at that level.
     * @type {boolean}
     * @memberof AccessLevelResponse
     */
    isAuthorized?: boolean;
}
/**
 * 
 * @export
 * @interface AccessLevelResponseAllOf
 */
export interface AccessLevelResponseAllOf {
    /**
     * Gets or sets a value indicating whether is authorized at that level.
     * @type {boolean}
     * @memberof AccessLevelResponseAllOf
     */
    isAuthorized?: boolean;
}
/**
 * 
 * @export
 * @interface AccessRuleDtoBase
 */
export interface AccessRuleDtoBase {
    /**
     * 
     * @type {string}
     * @memberof AccessRuleDtoBase
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccessRuleDtoBase
     */
    allowOrDeny?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AccessRuleDtoBase
     */
    priority?: number;
}
/**
 * 
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * 
     * @type {number}
     * @memberof Account
     */
    balance?: number;
}
/**
 * 
 * @export
 * @interface Activity
 */
export interface Activity {
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    id?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Activity
     */
    isDeleted?: boolean | null;
    /**
     * 
     * @type {Date}
     * @memberof Activity
     */
    createdDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof Activity
     */
    name?: string | null;
    /**
     * 
     * @type {Array<Run>}
     * @memberof Activity
     */
    runs?: Array<Run> | null;
}
/**
 * 
 * @export
 * @interface ActivityAllOf
 */
export interface ActivityAllOf {
    /**
     * 
     * @type {string}
     * @memberof ActivityAllOf
     */
    name?: string | null;
    /**
     * 
     * @type {Array<Run>}
     * @memberof ActivityAllOf
     */
    runs?: Array<Run> | null;
}
/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    streetNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    streetName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    municipalitySubdivision?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    municipality?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    countrySecondarySubdivision?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    countrySubdivision?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    postalCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    countryCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    country?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    countryCodeIso3?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    freeformAddress?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    localName?: string | null;
}
/**
 * 
 * @export
 * @interface AggregateSeries
 */
export interface AggregateSeries {
    /**
     * 
     * @type {Array<object>}
     * @memberof AggregateSeries
     */
    timeSeriesId?: Array<object> | null;
    /**
     * 
     * @type {DateTimeRange}
     * @memberof AggregateSeries
     */
    searchSpan?: DateTimeRange | null;
    /**
     * 
     * @type {Tsx}
     * @memberof AggregateSeries
     */
    filter?: Tsx | null;
    /**
     * 
     * @type {string}
     * @memberof AggregateSeries
     */
    interval?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AggregateSeries
     */
    projectedVariables?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Variable; }}
     * @memberof AggregateSeries
     */
    inlineVariables?: { [key: string]: Variable; } | null;
}
/**
 * 
 * @export
 * @interface AggregateVariable
 */
export interface AggregateVariable {
    /**
     * 
     * @type {Tsx}
     * @memberof AggregateVariable
     */
    filter?: Tsx | null;
    /**
     * 
     * @type {string}
     * @memberof AggregateVariable
     */
    kind: string;
    /**
     * 
     * @type {Tsx}
     * @memberof AggregateVariable
     */
    aggregation?: Tsx | null;
}
/**
 * 
 * @export
 * @interface AllAccessRule
 */
export interface AllAccessRule extends AccessRuleDtoBase {
}
/**
 * 
 * @export
 * @interface AmphoraReference
 */
export interface AmphoraReference {
    /**
     * 
     * @type {string}
     * @memberof AmphoraReference
     */
    amphoraId?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AmphoraReference
     */
    filesConsumed?: number | null;
    /**
     * 
     * @type {number}
     * @memberof AmphoraReference
     */
    filesProduced?: number | null;
    /**
     * 
     * @type {number}
     * @memberof AmphoraReference
     */
    signalsConsumed?: number | null;
    /**
     * 
     * @type {number}
     * @memberof AmphoraReference
     */
    signalsProduced?: number | null;
}
/**
 * 
 * @export
 * @interface AmphoraUser
 */
export interface AmphoraUser {
    /**
     * 
     * @type {string}
     * @memberof AmphoraUser
     */
    phoneNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AmphoraUser
     */
    about?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AmphoraUser
     */
    fullName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AmphoraUser
     */
    userName: string;
    /**
     * 
     * @type {string}
     * @memberof AmphoraUser
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof AmphoraUser
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AmphoraUser
     */
    organisationId?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof AmphoraUser
     */
    lastModified?: Date | null;
}
/**
 * 
 * @export
 * @interface AmphoraUserAllOf
 */
export interface AmphoraUserAllOf {
    /**
     * 
     * @type {string}
     * @memberof AmphoraUserAllOf
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof AmphoraUserAllOf
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AmphoraUserAllOf
     */
    organisationId?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof AmphoraUserAllOf
     */
    lastModified?: Date | null;
}
/**
 * 
 * @export
 * @interface AppLocation
 */
export interface AppLocation {
    /**
     * Gets or sets the expected origin from a XMLHttpRequest Must not end in \'/\'.
     * @type {string}
     * @memberof AppLocation
     */
    origin?: string | null;
    /**
     * Gets or sets allowed redirects after login, relative to Origin. Must begin with a \'/\'.
     * @type {Array<string>}
     * @memberof AppLocation
     */
    allowedRedirectPaths?: Array<string> | null;
    /**
     * Gets or sets the allowed redirect after logout. Must be an absolute url.
     * @type {Array<string>}
     * @memberof AppLocation
     */
    postLogoutRedirects?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof AppLocation
     */
    id?: string | null;
}
/**
 * 
 * @export
 * @interface AppLocationAllOf
 */
export interface AppLocationAllOf {
    /**
     * 
     * @type {string}
     * @memberof AppLocationAllOf
     */
    id?: string | null;
}
/**
 * 
 * @export
 * @interface AppLocationBase
 */
export interface AppLocationBase {
    /**
     * Gets or sets the expected origin from a XMLHttpRequest Must not end in \'/\'.
     * @type {string}
     * @memberof AppLocationBase
     */
    origin?: string | null;
    /**
     * Gets or sets allowed redirects after login, relative to Origin. Must begin with a \'/\'.
     * @type {Array<string>}
     * @memberof AppLocationBase
     */
    allowedRedirectPaths?: Array<string> | null;
    /**
     * Gets or sets the allowed redirect after logout. Must be an absolute url.
     * @type {Array<string>}
     * @memberof AppLocationBase
     */
    postLogoutRedirects?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface Application
 */
export interface Application {
    /**
     * Gets or sets the name of your application. Will be shown on the consent page.
     * @type {string}
     * @memberof Application
     */
    name?: string | null;
    /**
     * Gets or sets a url for front channel HTTP logouts.
     * @type {string}
     * @memberof Application
     */
    logoutUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Application
     */
    id?: string | null;
    /**
     * Gets or sets a collection of locations your application will run.
     * @type {Array<AppLocation>}
     * @memberof Application
     */
    locations?: Array<AppLocation> | null;
}
/**
 * 
 * @export
 * @interface ApplicationAllOf
 */
export interface ApplicationAllOf {
    /**
     * 
     * @type {string}
     * @memberof ApplicationAllOf
     */
    id?: string | null;
    /**
     * Gets or sets a collection of locations your application will run.
     * @type {Array<AppLocation>}
     * @memberof ApplicationAllOf
     */
    locations?: Array<AppLocation> | null;
}
/**
 * 
 * @export
 * @interface ApplicationBase
 */
export interface ApplicationBase {
    /**
     * Gets or sets the name of your application. Will be shown on the consent page.
     * @type {string}
     * @memberof ApplicationBase
     */
    name?: string | null;
    /**
     * Gets or sets a url for front channel HTTP logouts.
     * @type {string}
     * @memberof ApplicationBase
     */
    logoutUrl?: string | null;
}
/**
 * 
 * @export
 * @interface BaseAmphoraUser
 */
export interface BaseAmphoraUser {
    /**
     * 
     * @type {string}
     * @memberof BaseAmphoraUser
     */
    phoneNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseAmphoraUser
     */
    about?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseAmphoraUser
     */
    fullName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseAmphoraUser
     */
    userName: string;
}
/**
 * 
 * @export
 * @interface BasicAmphora
 */
export interface BasicAmphora {
    /**
     * 
     * @type {string}
     * @memberof BasicAmphora
     */
    id?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof BasicAmphora
     */
    isDeleted?: boolean | null;
    /**
     * 
     * @type {Date}
     * @memberof BasicAmphora
     */
    createdDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof BasicAmphora
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof BasicAmphora
     */
    price: number;
    /**
     * 
     * @type {string}
     * @memberof BasicAmphora
     */
    labels?: string | null;
}
/**
 * The basic metadata of an Amphora.
 * @export
 * @interface BasicAmphoraAllOf
 */
export interface BasicAmphoraAllOf {
    /**
     * 
     * @type {string}
     * @memberof BasicAmphoraAllOf
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof BasicAmphoraAllOf
     */
    price: number;
    /**
     * 
     * @type {string}
     * @memberof BasicAmphoraAllOf
     */
    labels?: string | null;
}
/**
 * 
 * @export
 * @interface CreateActivity
 */
export interface CreateActivity {
    /**
     * 
     * @type {string}
     * @memberof CreateActivity
     */
    name?: string | null;
}
/**
 * 
 * @export
 * @interface CreateAmphora
 */
export interface CreateAmphora {
    /**
     * 
     * @type {string}
     * @memberof CreateAmphora
     */
    id?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CreateAmphora
     */
    isDeleted?: boolean | null;
    /**
     * 
     * @type {Date}
     * @memberof CreateAmphora
     */
    createdDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof CreateAmphora
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof CreateAmphora
     */
    price: number;
    /**
     * 
     * @type {string}
     * @memberof CreateAmphora
     */
    labels?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateAmphora
     */
    description: string;
    /**
     * 
     * @type {number}
     * @memberof CreateAmphora
     */
    lat?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CreateAmphora
     */
    lon?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CreateAmphora
     */
    termsOfUseId?: string | null;
}
/**
 * 
 * @export
 * @interface CreateAmphoraUser
 */
export interface CreateAmphoraUser {
    /**
     * 
     * @type {string}
     * @memberof CreateAmphoraUser
     */
    phoneNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateAmphoraUser
     */
    about?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateAmphoraUser
     */
    fullName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateAmphoraUser
     */
    userName: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAmphoraUser
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAmphoraUser
     */
    confirmPassword?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateAmphoraUser
     */
    email: string;
}
/**
 * 
 * @export
 * @interface CreateAmphoraUserAllOf
 */
export interface CreateAmphoraUserAllOf {
    /**
     * 
     * @type {string}
     * @memberof CreateAmphoraUserAllOf
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAmphoraUserAllOf
     */
    confirmPassword?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateAmphoraUserAllOf
     */
    email: string;
}
/**
 * 
 * @export
 * @interface CreateAppLocation
 */
export interface CreateAppLocation extends AppLocationBase {
}
/**
 * 
 * @export
 * @interface CreateApplication
 */
export interface CreateApplication {
    /**
     * Gets or sets the name of your application. Will be shown on the consent page.
     * @type {string}
     * @memberof CreateApplication
     */
    name?: string | null;
    /**
     * Gets or sets a url for front channel HTTP logouts.
     * @type {string}
     * @memberof CreateApplication
     */
    logoutUrl?: string | null;
    /**
     * Gets or sets a collection of locations your application will run.
     * @type {Array<CreateAppLocation>}
     * @memberof CreateApplication
     */
    locations?: Array<CreateAppLocation> | null;
}
/**
 * 
 * @export
 * @interface CreateApplicationAllOf
 */
export interface CreateApplicationAllOf {
    /**
     * Gets or sets a collection of locations your application will run.
     * @type {Array<CreateAppLocation>}
     * @memberof CreateApplicationAllOf
     */
    locations?: Array<CreateAppLocation> | null;
}
/**
 * 
 * @export
 * @interface CreateSignal
 */
export interface CreateSignal {
    /**
     * 
     * @type {string}
     * @memberof CreateSignal
     */
    property?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateSignal
     */
    valueType?: string | null;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof CreateSignal
     */
    attributes?: { [key: string]: string; } | null;
}
/**
 * 
 * @export
 * @interface CreateTermsOfUse
 */
export interface CreateTermsOfUse {
    /**
     * 
     * @type {string}
     * @memberof CreateTermsOfUse
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTermsOfUse
     */
    contents: string;
}
/**
 * 
 * @export
 * @interface DateTimeRange
 */
export interface DateTimeRange {
    /**
     * 
     * @type {Date}
     * @memberof DateTimeRange
     */
    from?: Date;
    /**
     * 
     * @type {Date}
     * @memberof DateTimeRange
     */
    to?: Date;
}
/**
 * 
 * @export
 * @interface DetailedAmphora
 */
export interface DetailedAmphora {
    /**
     * 
     * @type {string}
     * @memberof DetailedAmphora
     */
    id?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DetailedAmphora
     */
    isDeleted?: boolean | null;
    /**
     * 
     * @type {Date}
     * @memberof DetailedAmphora
     */
    createdDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof DetailedAmphora
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof DetailedAmphora
     */
    price: number;
    /**
     * 
     * @type {string}
     * @memberof DetailedAmphora
     */
    labels?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DetailedAmphora
     */
    description: string;
    /**
     * 
     * @type {number}
     * @memberof DetailedAmphora
     */
    lat?: number | null;
    /**
     * 
     * @type {number}
     * @memberof DetailedAmphora
     */
    lon?: number | null;
    /**
     * 
     * @type {string}
     * @memberof DetailedAmphora
     */
    termsOfUseId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DetailedAmphora
     */
    organisationId?: string | null;
    /**
     * 
     * @type {number}
     * @memberof DetailedAmphora
     */
    purchaseCount?: number | null;
    /**
     * 
     * @type {number}
     * @memberof DetailedAmphora
     */
    signalCount?: number | null;
}
/**
 * 
 * @export
 * @interface DetailedAmphoraAllOf
 */
export interface DetailedAmphoraAllOf {
    /**
     * 
     * @type {string}
     * @memberof DetailedAmphoraAllOf
     */
    organisationId?: string | null;
    /**
     * 
     * @type {number}
     * @memberof DetailedAmphoraAllOf
     */
    purchaseCount?: number | null;
    /**
     * 
     * @type {number}
     * @memberof DetailedAmphoraAllOf
     */
    signalCount?: number | null;
}
/**
 * 
 * @export
 * @interface EditAmphora
 */
export interface EditAmphora {
    /**
     * 
     * @type {string}
     * @memberof EditAmphora
     */
    id?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof EditAmphora
     */
    isDeleted?: boolean | null;
    /**
     * 
     * @type {Date}
     * @memberof EditAmphora
     */
    createdDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof EditAmphora
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof EditAmphora
     */
    price: number;
    /**
     * 
     * @type {string}
     * @memberof EditAmphora
     */
    labels?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EditAmphora
     */
    description: string;
    /**
     * 
     * @type {number}
     * @memberof EditAmphora
     */
    lat?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EditAmphora
     */
    lon?: number | null;
    /**
     * 
     * @type {string}
     * @memberof EditAmphora
     */
    termsOfUseId?: string | null;
}
/**
 * 
 * @export
 * @interface EditAmphoraAllOf
 */
export interface EditAmphoraAllOf {
    /**
     * 
     * @type {string}
     * @memberof EditAmphoraAllOf
     */
    description: string;
    /**
     * 
     * @type {number}
     * @memberof EditAmphoraAllOf
     */
    lat?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EditAmphoraAllOf
     */
    lon?: number | null;
    /**
     * 
     * @type {string}
     * @memberof EditAmphoraAllOf
     */
    termsOfUseId?: string | null;
}
/**
 * 
 * @export
 * @interface Entity
 */
export interface Entity {
    /**
     * 
     * @type {string}
     * @memberof Entity
     */
    id?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Entity
     */
    isDeleted?: boolean | null;
    /**
     * 
     * @type {Date}
     * @memberof Entity
     */
    createdDate?: Date | null;
}
/**
 * 
 * @export
 * @interface EventProperty
 */
export interface EventProperty {
    /**
     * 
     * @type {string}
     * @memberof EventProperty
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventProperty
     */
    type?: string | null;
}
/**
 * 
 * @export
 * @interface FileListOptions
 */
export interface FileListOptions {
    /**
     * Gets or sets how many files to return. Defaults to 64.
     * @type {number}
     * @memberof FileListOptions
     */
    take?: number;
    /**
     * Gets or sets how many files to skip before returning. Defaults to 0.
     * @type {number}
     * @memberof FileListOptions
     */
    skip?: number;
    /**
     * Gets or sets the the orderBy parameter. Options are Alphabetical or LastModified.
     * @type {string}
     * @memberof FileListOptions
     */
    orderBy?: string | null;
    /**
     * Gets or sets a prefix filter for all file names. Is case sensitive.
     * @type {string}
     * @memberof FileListOptions
     */
    prefix?: string | null;
}
/**
 * 
 * @export
 * @interface FileQueryOptions
 */
export interface FileQueryOptions {
    /**
     * Gets or sets how many files to return. Defaults to 64.
     * @type {number}
     * @memberof FileQueryOptions
     */
    take?: number;
    /**
     * Gets or sets how many files to skip before returning. Defaults to 0.
     * @type {number}
     * @memberof FileQueryOptions
     */
    skip?: number;
    /**
     * Gets or sets the the orderBy parameter. Options are Alphabetical or LastModified.
     * @type {string}
     * @memberof FileQueryOptions
     */
    orderBy?: string | null;
    /**
     * Gets or sets a prefix filter for all file names. Is case sensitive.
     * @type {string}
     * @memberof FileQueryOptions
     */
    prefix?: string | null;
    /**
     * Gets or sets the attribute filters.
     * @type {{ [key: string]: string; }}
     * @memberof FileQueryOptions
     */
    attributes?: { [key: string]: string; } | null;
    /**
     * Gets or sets a value indicating whether whether all attributes are required to match. Defaults to false.
     * @type {boolean}
     * @memberof FileQueryOptions
     */
    allAttributes?: boolean;
}
/**
 * 
 * @export
 * @interface FileQueryOptionsAllOf
 */
export interface FileQueryOptionsAllOf {
    /**
     * Gets or sets the attribute filters.
     * @type {{ [key: string]: string; }}
     * @memberof FileQueryOptionsAllOf
     */
    attributes?: { [key: string]: string; } | null;
    /**
     * Gets or sets a value indicating whether whether all attributes are required to match. Defaults to false.
     * @type {boolean}
     * @memberof FileQueryOptionsAllOf
     */
    allAttributes?: boolean;
}
/**
 * 
 * @export
 * @interface FuzzySearchResponse
 */
export interface FuzzySearchResponse {
    /**
     * 
     * @type {Summary}
     * @memberof FuzzySearchResponse
     */
    summary?: Summary | null;
    /**
     * 
     * @type {Array<Result>}
     * @memberof FuzzySearchResponse
     */
    results?: Array<Result> | null;
}
/**
 * 
 * @export
 * @interface GetEvents
 */
export interface GetEvents {
    /**
     * 
     * @type {Array<object>}
     * @memberof GetEvents
     */
    timeSeriesId?: Array<object> | null;
    /**
     * 
     * @type {DateTimeRange}
     * @memberof GetEvents
     */
    searchSpan?: DateTimeRange | null;
    /**
     * 
     * @type {Tsx}
     * @memberof GetEvents
     */
    filter?: Tsx | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetEvents
     */
    projectedProperties?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface GetSeries
 */
export interface GetSeries {
    /**
     * 
     * @type {Array<object>}
     * @memberof GetSeries
     */
    timeSeriesId?: Array<object> | null;
    /**
     * 
     * @type {DateTimeRange}
     * @memberof GetSeries
     */
    searchSpan?: DateTimeRange | null;
    /**
     * 
     * @type {Tsx}
     * @memberof GetSeries
     */
    filter?: Tsx | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetSeries
     */
    projectedVariables?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: Variable; }}
     * @memberof GetSeries
     */
    inlineVariables?: { [key: string]: Variable; } | null;
}
/**
 * 
 * @export
 * @interface Invitation
 */
export interface Invitation {
    /**
     * 
     * @type {string}
     * @memberof Invitation
     */
    targetEmail: string;
    /**
     * 
     * @type {string}
     * @memberof Invitation
     */
    targetOrganisationId?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Invitation
     */
    isClaimed?: boolean | null;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    password: string;
}
/**
 * 
 * @export
 * @interface NumericVariable
 */
export interface NumericVariable {
    /**
     * 
     * @type {Tsx}
     * @memberof NumericVariable
     */
    filter?: Tsx | null;
    /**
     * 
     * @type {string}
     * @memberof NumericVariable
     */
    kind: string;
    /**
     * 
     * @type {Tsx}
     * @memberof NumericVariable
     */
    value?: Tsx | null;
    /**
     * 
     * @type {Tsx}
     * @memberof NumericVariable
     */
    aggregation?: Tsx | null;
}
/**
 * 
 * @export
 * @interface Organisation
 */
export interface Organisation {
    /**
     * 
     * @type {string}
     * @memberof Organisation
     */
    id?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Organisation
     */
    isDeleted?: boolean | null;
    /**
     * 
     * @type {Date}
     * @memberof Organisation
     */
    createdDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof Organisation
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Organisation
     */
    about: string;
    /**
     * 
     * @type {string}
     * @memberof Organisation
     */
    websiteUrl: string;
    /**
     * 
     * @type {string}
     * @memberof Organisation
     */
    address?: string | null;
}
/**
 * 
 * @export
 * @interface OrganisationAccessRule
 */
export interface OrganisationAccessRule {
    /**
     * 
     * @type {string}
     * @memberof OrganisationAccessRule
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrganisationAccessRule
     */
    allowOrDeny?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrganisationAccessRule
     */
    priority?: number;
    /**
     * 
     * @type {string}
     * @memberof OrganisationAccessRule
     */
    organisationId: string;
}
/**
 * 
 * @export
 * @interface OrganisationAccessRuleAllOf
 */
export interface OrganisationAccessRuleAllOf {
    /**
     * 
     * @type {string}
     * @memberof OrganisationAccessRuleAllOf
     */
    organisationId: string;
}
/**
 * 
 * @export
 * @interface OrganisationAllOf
 */
export interface OrganisationAllOf {
    /**
     * 
     * @type {string}
     * @memberof OrganisationAllOf
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof OrganisationAllOf
     */
    about: string;
    /**
     * 
     * @type {string}
     * @memberof OrganisationAllOf
     */
    websiteUrl: string;
    /**
     * 
     * @type {string}
     * @memberof OrganisationAllOf
     */
    address?: string | null;
}
/**
 * 
 * @export
 * @interface PagedResponse
 */
export interface PagedResponse {
    /**
     * 
     * @type {string}
     * @memberof PagedResponse
     */
    continuationToken?: string | null;
}
/**
 * 
 * @export
 * @interface PermissionsRequest
 */
export interface PermissionsRequest {
    /**
     * 
     * @type {Array<AccessLevelQuery>}
     * @memberof PermissionsRequest
     */
    accessQueries?: Array<AccessLevelQuery> | null;
}
/**
 * 
 * @export
 * @interface PermissionsResponse
 */
export interface PermissionsResponse {
    /**
     * 
     * @type {Array<AccessLevelResponse>}
     * @memberof PermissionsResponse
     */
    accessResponses?: Array<AccessLevelResponse> | null;
}
/**
 * 
 * @export
 * @interface PlanInformation
 */
export interface PlanInformation {
    /**
     * 
     * @type {PlanTypes}
     * @memberof PlanInformation
     */
    planType?: PlanTypes;
    /**
     * 
     * @type {string}
     * @memberof PlanInformation
     */
    friendlyName?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum PlanTypes {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2
}

/**
 * 
 * @export
 * @interface Position
 */
export interface Position {
    /**
     * 
     * @type {number}
     * @memberof Position
     */
    lat?: number;
    /**
     * 
     * @type {number}
     * @memberof Position
     */
    lon?: number;
}
/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    type?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    title?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    status?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    detail?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    instance?: string | null;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ProblemDetails
     */
    extensions?: { [key: string]: object; } | null;
}
/**
 * 
 * @export
 * @interface PropertyValues
 */
export interface PropertyValues {
    /**
     * 
     * @type {string}
     * @memberof PropertyValues
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PropertyValues
     */
    type?: string | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof PropertyValues
     */
    values?: Array<object> | null;
}
/**
 * 
 * @export
 * @interface PropertyValuesAllOf
 */
export interface PropertyValuesAllOf {
    /**
     * 
     * @type {Array<object>}
     * @memberof PropertyValuesAllOf
     */
    values?: Array<object> | null;
}
/**
 * Quality metrics for an Amphora, between 1 and 4.
 * @export
 * @interface Quality
 */
export interface Quality {
    /**
     * 
     * @type {number}
     * @memberof Quality
     */
    accuracy?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Quality
     */
    completeness?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Quality
     */
    granularity?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Quality
     */
    reliability?: number | null;
}
/**
 * 
 * @export
 * @interface QueryRequest
 */
export interface QueryRequest {
    /**
     * 
     * @type {GetEvents}
     * @memberof QueryRequest
     */
    getEvents?: GetEvents | null;
    /**
     * 
     * @type {GetSeries}
     * @memberof QueryRequest
     */
    getSeries?: GetSeries | null;
    /**
     * 
     * @type {AggregateSeries}
     * @memberof QueryRequest
     */
    aggregateSeries?: AggregateSeries | null;
}
/**
 * 
 * @export
 * @interface QueryResultPage
 */
export interface QueryResultPage {
    /**
     * 
     * @type {string}
     * @memberof QueryResultPage
     */
    continuationToken?: string | null;
    /**
     * 
     * @type {Array<Date>}
     * @memberof QueryResultPage
     */
    timestamps?: Array<Date> | null;
    /**
     * 
     * @type {Array<PropertyValues>}
     * @memberof QueryResultPage
     */
    properties?: Array<PropertyValues> | null;
}
/**
 * 
 * @export
 * @interface QueryResultPageAllOf
 */
export interface QueryResultPageAllOf {
    /**
     * 
     * @type {Array<Date>}
     * @memberof QueryResultPageAllOf
     */
    timestamps?: Array<Date> | null;
    /**
     * 
     * @type {Array<PropertyValues>}
     * @memberof QueryResultPageAllOf
     */
    properties?: Array<PropertyValues> | null;
}
/**
 * 
 * @export
 * @interface Result
 */
export interface Result {
    /**
     * 
     * @type {string}
     * @memberof Result
     */
    id?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Result
     */
    score?: number;
    /**
     * 
     * @type {Address}
     * @memberof Result
     */
    address?: Address | null;
    /**
     * 
     * @type {Position}
     * @memberof Result
     */
    position?: Position | null;
    /**
     * 
     * @type {string}
     * @memberof Result
     */
    info?: string | null;
}
/**
 * 
 * @export
 * @interface Run
 */
export interface Run {
    /**
     * 
     * @type {string}
     * @memberof Run
     */
    id?: string | null;
    /**
     * 
     * @type {VersionInfo}
     * @memberof Run
     */
    versionInfo?: VersionInfo | null;
    /**
     * 
     * @type {string}
     * @memberof Run
     */
    startedBy?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Run
     */
    success?: boolean | null;
    /**
     * 
     * @type {Date}
     * @memberof Run
     */
    startTime?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof Run
     */
    endTime?: Date | null;
    /**
     * 
     * @type {Array<AmphoraReference>}
     * @memberof Run
     */
    amphoraReferences?: Array<AmphoraReference> | null;
}
/**
 * 
 * @export
 * @interface Signal
 */
export interface Signal {
    /**
     * 
     * @type {string}
     * @memberof Signal
     */
    property?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Signal
     */
    valueType?: string | null;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Signal
     */
    attributes?: { [key: string]: string; } | null;
    /**
     * 
     * @type {string}
     * @memberof Signal
     */
    id?: string | null;
}
/**
 * 
 * @export
 * @interface Summary
 */
export interface Summary {
    /**
     * 
     * @type {string}
     * @memberof Summary
     */
    query?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Summary
     */
    queryType?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Summary
     */
    numResults?: number;
    /**
     * 
     * @type {number}
     * @memberof Summary
     */
    totalResults?: number;
    /**
     * 
     * @type {number}
     * @memberof Summary
     */
    fuzzyLevel?: number;
}
/**
 * 
 * @export
 * @interface TermsOfUse
 */
export interface TermsOfUse {
    /**
     * 
     * @type {string}
     * @memberof TermsOfUse
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TermsOfUse
     */
    contents: string;
    /**
     * 
     * @type {string}
     * @memberof TermsOfUse
     */
    id?: string | null;
}
/**
 * 
 * @export
 * @interface Tsx
 */
export interface Tsx {
    /**
     * 
     * @type {string}
     * @memberof Tsx
     */
    tsx?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateApplication
 */
export interface UpdateApplication {
    /**
     * Gets or sets the name of your application. Will be shown on the consent page.
     * @type {string}
     * @memberof UpdateApplication
     */
    name?: string | null;
    /**
     * Gets or sets a url for front channel HTTP logouts.
     * @type {string}
     * @memberof UpdateApplication
     */
    logoutUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateApplication
     */
    id?: string | null;
    /**
     * Gets or sets a collection of locations your application will run.
     * @type {Array<CreateAppLocation>}
     * @memberof UpdateApplication
     */
    locations?: Array<CreateAppLocation> | null;
}
/**
 * 
 * @export
 * @interface UpdateApplicationAllOf
 */
export interface UpdateApplicationAllOf {
    /**
     * 
     * @type {string}
     * @memberof UpdateApplicationAllOf
     */
    id?: string | null;
    /**
     * Gets or sets a collection of locations your application will run.
     * @type {Array<CreateAppLocation>}
     * @memberof UpdateApplicationAllOf
     */
    locations?: Array<CreateAppLocation> | null;
}
/**
 * 
 * @export
 * @interface UpdateRun
 */
export interface UpdateRun {
    /**
     * Gets or sets whether the run failed or succeeded. Setting this will end the run.
     * @type {boolean}
     * @memberof UpdateRun
     */
    success?: boolean | null;
}
/**
 * 
 * @export
 * @interface UpdateSignal
 */
export interface UpdateSignal {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof UpdateSignal
     */
    meta?: { [key: string]: string; } | null;
}
/**
 * 
 * @export
 * @interface UploadResponse
 */
export interface UploadResponse {
    /**
     * 
     * @type {string}
     * @memberof UploadResponse
     */
    url?: string | null;
}
/**
 * 
 * @export
 * @interface UserAccessRule
 */
export interface UserAccessRule {
    /**
     * 
     * @type {string}
     * @memberof UserAccessRule
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserAccessRule
     */
    allowOrDeny?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserAccessRule
     */
    priority?: number;
    /**
     * 
     * @type {string}
     * @memberof UserAccessRule
     */
    username: string;
}
/**
 * 
 * @export
 * @interface UserAccessRuleAllOf
 */
export interface UserAccessRuleAllOf {
    /**
     * 
     * @type {string}
     * @memberof UserAccessRuleAllOf
     */
    username: string;
}
/**
 * 
 * @export
 * @interface Variable
 */
export interface Variable {
    /**
     * 
     * @type {Tsx}
     * @memberof Variable
     */
    filter?: Tsx | null;
    /**
     * 
     * @type {string}
     * @memberof Variable
     */
    kind: string;
}
/**
 * 
 * @export
 * @interface VersionInfo
 */
export interface VersionInfo {
    /**
     * 
     * @type {number}
     * @memberof VersionInfo
     */
    major?: number;
    /**
     * 
     * @type {number}
     * @memberof VersionInfo
     */
    minor?: number;
    /**
     * 
     * @type {number}
     * @memberof VersionInfo
     */
    patch?: number;
}

/**
 * ActivitiesApi - axios parameter creator
 * @export
 */
export const ActivitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new activity.
         * @param {CreateActivity} createActivity Metadata of the new activity.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activitiesCreateActivity(createActivity: CreateActivity, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'createActivity' is not null or undefined
            if (createActivity === null || createActivity === undefined) {
                throw new RequiredError('createActivity','Required parameter createActivity was null or undefined when calling activitiesCreateActivity.');
            }
            const localVarPath = `/api/activities`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof createActivity !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createActivity !== undefined ? createActivity : {}) : (createActivity || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an activity.
         * @param {string} id The activity Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activitiesDeleteActivity(id: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling activitiesDeleteActivity.');
            }
            const localVarPath = `/api/activities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the metadata of an activity.
         * @param {string} id The activity Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activitiesReadActivity(id: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling activitiesReadActivity.');
            }
            const localVarPath = `/api/activities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary References an Amphora during a run.
         * @param {string} id The activity Id.
         * @param {string} runId The run Id.
         * @param {string} amphoraId The Id of the Amphora to reference.
         * @param {AmphoraReference} amphoraReference Information about the reference.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activitiesReferenceAmphora(id: string, runId: string, amphoraId: string, amphoraReference: AmphoraReference, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling activitiesReferenceAmphora.');
            }
            // verify required parameter 'runId' is not null or undefined
            if (runId === null || runId === undefined) {
                throw new RequiredError('runId','Required parameter runId was null or undefined when calling activitiesReferenceAmphora.');
            }
            // verify required parameter 'amphoraId' is not null or undefined
            if (amphoraId === null || amphoraId === undefined) {
                throw new RequiredError('amphoraId','Required parameter amphoraId was null or undefined when calling activitiesReferenceAmphora.');
            }
            // verify required parameter 'amphoraReference' is not null or undefined
            if (amphoraReference === null || amphoraReference === undefined) {
                throw new RequiredError('amphoraReference','Required parameter amphoraReference was null or undefined when calling activitiesReferenceAmphora.');
            }
            const localVarPath = `/api/activities/{id}/Runs/{runId}/amphorae/{amphoraId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"runId"}}`, encodeURIComponent(String(runId)))
                .replace(`{${"amphoraId"}}`, encodeURIComponent(String(amphoraId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof amphoraReference !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(amphoraReference !== undefined ? amphoraReference : {}) : (amphoraReference || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Starts a new run of an activity.
         * @param {string} id The activity id in which to start a run.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activitiesStartRun(id: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling activitiesStartRun.');
            }
            const localVarPath = `/api/activities/{id}/Runs`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates and completes a run.
         * @param {string} id The activity Id.
         * @param {string} runId The run Id.
         * @param {UpdateRun} updateRun Information about the update.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activitiesUpdateRun(id: string, runId: string, updateRun: UpdateRun, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling activitiesUpdateRun.');
            }
            // verify required parameter 'runId' is not null or undefined
            if (runId === null || runId === undefined) {
                throw new RequiredError('runId','Required parameter runId was null or undefined when calling activitiesUpdateRun.');
            }
            // verify required parameter 'updateRun' is not null or undefined
            if (updateRun === null || updateRun === undefined) {
                throw new RequiredError('updateRun','Required parameter updateRun was null or undefined when calling activitiesUpdateRun.');
            }
            const localVarPath = `/api/activities/{id}/Runs/{runId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"runId"}}`, encodeURIComponent(String(runId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof updateRun !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateRun !== undefined ? updateRun : {}) : (updateRun || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActivitiesApi - functional programming interface
 * @export
 */
export const ActivitiesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new activity.
         * @param {CreateActivity} createActivity Metadata of the new activity.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activitiesCreateActivity(createActivity: CreateActivity, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Activity> {
            const localVarAxiosArgs = ActivitiesApiAxiosParamCreator(configuration).activitiesCreateActivity(createActivity, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes an activity.
         * @param {string} id The activity Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activitiesDeleteActivity(id: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any> {
            const localVarAxiosArgs = ActivitiesApiAxiosParamCreator(configuration).activitiesDeleteActivity(id, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets the metadata of an activity.
         * @param {string} id The activity Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activitiesReadActivity(id: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Activity> {
            const localVarAxiosArgs = ActivitiesApiAxiosParamCreator(configuration).activitiesReadActivity(id, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary References an Amphora during a run.
         * @param {string} id The activity Id.
         * @param {string} runId The run Id.
         * @param {string} amphoraId The Id of the Amphora to reference.
         * @param {AmphoraReference} amphoraReference Information about the reference.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activitiesReferenceAmphora(id: string, runId: string, amphoraId: string, amphoraReference: AmphoraReference, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AmphoraReference> {
            const localVarAxiosArgs = ActivitiesApiAxiosParamCreator(configuration).activitiesReferenceAmphora(id, runId, amphoraId, amphoraReference, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Starts a new run of an activity.
         * @param {string} id The activity id in which to start a run.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activitiesStartRun(id: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Run> {
            const localVarAxiosArgs = ActivitiesApiAxiosParamCreator(configuration).activitiesStartRun(id, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Updates and completes a run.
         * @param {string} id The activity Id.
         * @param {string} runId The run Id.
         * @param {UpdateRun} updateRun Information about the update.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activitiesUpdateRun(id: string, runId: string, updateRun: UpdateRun, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Run> {
            const localVarAxiosArgs = ActivitiesApiAxiosParamCreator(configuration).activitiesUpdateRun(id, runId, updateRun, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ActivitiesApi - factory interface
 * @export
 */
export const ActivitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Creates a new activity.
         * @param {CreateActivity} createActivity Metadata of the new activity.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activitiesCreateActivity(createActivity: CreateActivity, xAmphoradataVersion?: string, options?: any) {
            return ActivitiesApiFp(configuration).activitiesCreateActivity(createActivity, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Deletes an activity.
         * @param {string} id The activity Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activitiesDeleteActivity(id: string, xAmphoradataVersion?: string, options?: any) {
            return ActivitiesApiFp(configuration).activitiesDeleteActivity(id, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets the metadata of an activity.
         * @param {string} id The activity Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activitiesReadActivity(id: string, xAmphoradataVersion?: string, options?: any) {
            return ActivitiesApiFp(configuration).activitiesReadActivity(id, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary References an Amphora during a run.
         * @param {string} id The activity Id.
         * @param {string} runId The run Id.
         * @param {string} amphoraId The Id of the Amphora to reference.
         * @param {AmphoraReference} amphoraReference Information about the reference.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activitiesReferenceAmphora(id: string, runId: string, amphoraId: string, amphoraReference: AmphoraReference, xAmphoradataVersion?: string, options?: any) {
            return ActivitiesApiFp(configuration).activitiesReferenceAmphora(id, runId, amphoraId, amphoraReference, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Starts a new run of an activity.
         * @param {string} id The activity id in which to start a run.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activitiesStartRun(id: string, xAmphoradataVersion?: string, options?: any) {
            return ActivitiesApiFp(configuration).activitiesStartRun(id, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Updates and completes a run.
         * @param {string} id The activity Id.
         * @param {string} runId The run Id.
         * @param {UpdateRun} updateRun Information about the update.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activitiesUpdateRun(id: string, runId: string, updateRun: UpdateRun, xAmphoradataVersion?: string, options?: any) {
            return ActivitiesApiFp(configuration).activitiesUpdateRun(id, runId, updateRun, xAmphoradataVersion, options)(axios, basePath);
        },
    };
};

/**
 * ActivitiesApi - object-oriented interface
 * @export
 * @class ActivitiesApi
 * @extends {BaseAPI}
 */
export class ActivitiesApi extends BaseAPI {
    /**
     * 
     * @summary Creates a new activity.
     * @param {CreateActivity} createActivity Metadata of the new activity.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public activitiesCreateActivity(createActivity: CreateActivity, xAmphoradataVersion?: string, options?: any) {
        return ActivitiesApiFp(this.configuration).activitiesCreateActivity(createActivity, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Deletes an activity.
     * @param {string} id The activity Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public activitiesDeleteActivity(id: string, xAmphoradataVersion?: string, options?: any) {
        return ActivitiesApiFp(this.configuration).activitiesDeleteActivity(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets the metadata of an activity.
     * @param {string} id The activity Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public activitiesReadActivity(id: string, xAmphoradataVersion?: string, options?: any) {
        return ActivitiesApiFp(this.configuration).activitiesReadActivity(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary References an Amphora during a run.
     * @param {string} id The activity Id.
     * @param {string} runId The run Id.
     * @param {string} amphoraId The Id of the Amphora to reference.
     * @param {AmphoraReference} amphoraReference Information about the reference.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public activitiesReferenceAmphora(id: string, runId: string, amphoraId: string, amphoraReference: AmphoraReference, xAmphoradataVersion?: string, options?: any) {
        return ActivitiesApiFp(this.configuration).activitiesReferenceAmphora(id, runId, amphoraId, amphoraReference, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Starts a new run of an activity.
     * @param {string} id The activity id in which to start a run.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public activitiesStartRun(id: string, xAmphoradataVersion?: string, options?: any) {
        return ActivitiesApiFp(this.configuration).activitiesStartRun(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Updates and completes a run.
     * @param {string} id The activity Id.
     * @param {string} runId The run Id.
     * @param {UpdateRun} updateRun Information about the update.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivitiesApi
     */
    public activitiesUpdateRun(id: string, runId: string, updateRun: UpdateRun, xAmphoradataVersion?: string, options?: any) {
        return ActivitiesApiFp(this.configuration).activitiesUpdateRun(id, runId, updateRun, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

}


/**
 * AmphoraeApi - axios parameter creator
 * @export
 */
export const AmphoraeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets the data quality metrics for this Amphora.
         * @param {string} id Amphora Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraQualityGet(id: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraQualityGet.');
            }
            const localVarPath = `/api/amphorae/{id}/quality`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sets the data quality metrics for this Amphora.
         * @param {string} id Amphora Id.
         * @param {Quality} quality The data quality metrics.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraQualitySet(id: string, quality: Quality, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraQualitySet.');
            }
            // verify required parameter 'quality' is not null or undefined
            if (quality === null || quality === undefined) {
                throw new RequiredError('quality','Required parameter quality was null or undefined when calling amphoraQualitySet.');
            }
            const localVarPath = `/api/amphorae/{id}/quality`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof quality !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(quality !== undefined ? quality : {}) : (quality || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an Access Control Rule for all on this Amphora.
         * @param {string} id Amphora Id.
         * @param {AllAccessRule} allAccessRule The rule to create.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeAccessControlsCreateForAll(id: string, allAccessRule: AllAccessRule, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraeAccessControlsCreateForAll.');
            }
            // verify required parameter 'allAccessRule' is not null or undefined
            if (allAccessRule === null || allAccessRule === undefined) {
                throw new RequiredError('allAccessRule','Required parameter allAccessRule was null or undefined when calling amphoraeAccessControlsCreateForAll.');
            }
            const localVarPath = `/api/amphorae/{id}/AccessControls/ForAll`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof allAccessRule !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(allAccessRule !== undefined ? allAccessRule : {}) : (allAccessRule || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an Access Control Rule on this Amphora.
         * @param {string} id Amphora Id.
         * @param {OrganisationAccessRule} organisationAccessRule The rule to create.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeAccessControlsCreateForOrganisation(id: string, organisationAccessRule: OrganisationAccessRule, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraeAccessControlsCreateForOrganisation.');
            }
            // verify required parameter 'organisationAccessRule' is not null or undefined
            if (organisationAccessRule === null || organisationAccessRule === undefined) {
                throw new RequiredError('organisationAccessRule','Required parameter organisationAccessRule was null or undefined when calling amphoraeAccessControlsCreateForOrganisation.');
            }
            const localVarPath = `/api/amphorae/{id}/AccessControls/ForOrganisation`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof organisationAccessRule !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(organisationAccessRule !== undefined ? organisationAccessRule : {}) : (organisationAccessRule || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an Access Control rule on this Amphora.
         * @param {string} id Amphora Id.
         * @param {UserAccessRule} userAccessRule The rule to create.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeAccessControlsCreateForUser(id: string, userAccessRule: UserAccessRule, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraeAccessControlsCreateForUser.');
            }
            // verify required parameter 'userAccessRule' is not null or undefined
            if (userAccessRule === null || userAccessRule === undefined) {
                throw new RequiredError('userAccessRule','Required parameter userAccessRule was null or undefined when calling amphoraeAccessControlsCreateForUser.');
            }
            const localVarPath = `/api/amphorae/{id}/AccessControls/ForUser`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof userAccessRule !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userAccessRule !== undefined ? userAccessRule : {}) : (userAccessRule || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an Access Control on this Amphora.
         * @param {string} id Amphora Id.
         * @param {string} ruleId The Id of the rule to delete.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeAccessControlsDelete(id: string, ruleId: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraeAccessControlsDelete.');
            }
            // verify required parameter 'ruleId' is not null or undefined
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId','Required parameter ruleId was null or undefined when calling amphoraeAccessControlsDelete.');
            }
            const localVarPath = `/api/amphorae/{id}/AccessControls/{ruleId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"ruleId"}}`, encodeURIComponent(String(ruleId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get\'s the \'for all\' rule, if it exists, else an empty 200.
         * @param {string} id Amphora Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeAccessControlsGetForAllRule(id: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraeAccessControlsGetForAllRule.');
            }
            const localVarPath = `/api/amphorae/{id}/AccessControls/ForAll`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get\'s the list of access rules applied to organisations.
         * @param {string} id Amphora Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeAccessControlsGetOrganisationRules(id: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraeAccessControlsGetOrganisationRules.');
            }
            const localVarPath = `/api/amphorae/{id}/AccessControls/ForOrganisation`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get\'s the list of access rules applied to users.
         * @param {string} id Amphora Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeAccessControlsGetUserRules(id: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraeAccessControlsGetUserRules.');
            }
            const localVarPath = `/api/amphorae/{id}/AccessControls/ForUser`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new empty Amphora in the user\'s organisation.
         * @param {CreateAmphora} createAmphora Information for the new Amphora.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeCreate(createAmphora: CreateAmphora, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'createAmphora' is not null or undefined
            if (createAmphora === null || createAmphora === undefined) {
                throw new RequiredError('createAmphora','Required parameter createAmphora was null or undefined when calling amphoraeCreate.');
            }
            const localVarPath = `/api/amphorae`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof createAmphora !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createAmphora !== undefined ? createAmphora : {}) : (createAmphora || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an Amphora.
         * @param {string} id Amphora Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeDelete(id: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraeDelete.');
            }
            const localVarPath = `/api/amphorae/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a file. Returns a blob URL to upload to.
         * @param {string} id Amphora Id.
         * @param {string} file The name of the file.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeFilesCreateFileRequest(id: string, file: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraeFilesCreateFileRequest.');
            }
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling amphoraeFilesCreateFileRequest.');
            }
            const localVarPath = `/api/amphorae/{id}/files/{file}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"file"}}`, encodeURIComponent(String(file)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get\'s the contents of a file. Returns application/octet-stream.
         * @param {string} id Amphora Id.
         * @param {string} file The name of the file.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeFilesDeleteFile(id: string, file: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraeFilesDeleteFile.');
            }
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling amphoraeFilesDeleteFile.');
            }
            const localVarPath = `/api/amphorae/{id}/files/{file}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"file"}}`, encodeURIComponent(String(file)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get\'s the contents of a file. Returns application/octet-stream.
         * @param {string} id Amphora Id.
         * @param {string} file The name of the file.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeFilesDownloadFile(id: string, file: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraeFilesDownloadFile.');
            }
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling amphoraeFilesDownloadFile.');
            }
            const localVarPath = `/api/amphorae/{id}/files/{file}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"file"}}`, encodeURIComponent(String(file)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lists an Amphora\'s files.
         * @param {string} id Amphora Id.
         * @param {number} [take] Gets or sets how many files to return. Defaults to 64.
         * @param {number} [skip] Gets or sets how many files to skip before returning. Defaults to 0.
         * @param {string} [orderBy] Gets or sets the the orderBy parameter. Options are Alphabetical or LastModified.
         * @param {string} [prefix] Gets or sets a prefix filter for all file names. Is case sensitive.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeFilesListFiles(id: string, take?: number, skip?: number, orderBy?: string, prefix?: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraeFilesListFiles.');
            }
            const localVarPath = `/api/amphorae/{id}/files`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['OrderBy'] = orderBy;
            }

            if (prefix !== undefined) {
                localVarQueryParameter['Prefix'] = prefix;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Queries an Amphora\'s files.
         * @param {string} id Amphora Id.
         * @param {FileQueryOptions} fileQueryOptions Option for querying the files.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeFilesQueryFiles(id: string, fileQueryOptions: FileQueryOptions, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraeFilesQueryFiles.');
            }
            // verify required parameter 'fileQueryOptions' is not null or undefined
            if (fileQueryOptions === null || fileQueryOptions === undefined) {
                throw new RequiredError('fileQueryOptions','Required parameter fileQueryOptions was null or undefined when calling amphoraeFilesQueryFiles.');
            }
            const localVarPath = `/api/amphorae/{id}/files`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof fileQueryOptions !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(fileQueryOptions !== undefined ? fileQueryOptions : {}) : (fileQueryOptions || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get\'s the attributes of a file.
         * @param {string} id Amphora Id.
         * @param {string} file The name of the file.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeFilesReadFileAttributes(id: string, file: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraeFilesReadFileAttributes.');
            }
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling amphoraeFilesReadFileAttributes.');
            }
            const localVarPath = `/api/amphorae/{id}/files/{file}/attributes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"file"}}`, encodeURIComponent(String(file)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} file 
         * @param {{ [key: string]: string; }} requestBody 
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeFilesWriteFileAttributes(id: string, file: string, requestBody: { [key: string]: string; }, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraeFilesWriteFileAttributes.');
            }
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling amphoraeFilesWriteFileAttributes.');
            }
            // verify required parameter 'requestBody' is not null or undefined
            if (requestBody === null || requestBody === undefined) {
                throw new RequiredError('requestBody','Required parameter requestBody was null or undefined when calling amphoraeFilesWriteFileAttributes.');
            }
            const localVarPath = `/api/amphorae/{id}/files/{file}/attributes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"file"}}`, encodeURIComponent(String(file)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a list of Amphora for yourself or your org, created or purchased by you (or organisation).
         * @param {string} [scope] \&#39;self\&#39; or \&#39;organisation\&#39;. Defaults to self.
         * @param {string} [accessType] \&#39;created\&#39; or \&#39;purchased\&#39;. Defaults to created.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeList(scope?: string, accessType?: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/amphorae`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (scope !== undefined) {
                localVarQueryParameter['scope'] = scope;
            }

            if (accessType !== undefined) {
                localVarQueryParameter['accessType'] = accessType;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets details of an Amphora by Id.
         * @param {string} id Amphora Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeRead(id: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraeRead.');
            }
            const localVarPath = `/api/amphorae/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Associates a signal with an Amphora. Signal is created if not existing.
         * @param {string} id Amphora Id.
         * @param {CreateSignal} createSignal Signal Details.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeSignalsCreateSignal(id: string, createSignal: CreateSignal, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraeSignalsCreateSignal.');
            }
            // verify required parameter 'createSignal' is not null or undefined
            if (createSignal === null || createSignal === undefined) {
                throw new RequiredError('createSignal','Required parameter createSignal was null or undefined when calling amphoraeSignalsCreateSignal.');
            }
            const localVarPath = `/api/amphorae/{id}/signals`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof createSignal !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createSignal !== undefined ? createSignal : {}) : (createSignal || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get\'s the signals associated with an Amphora.
         * @param {string} id Amphora Id.
         * @param {string} property The name or id of the signal property.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeSignalsGetSignal(id: string, property: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraeSignalsGetSignal.');
            }
            // verify required parameter 'property' is not null or undefined
            if (property === null || property === undefined) {
                throw new RequiredError('property','Required parameter property was null or undefined when calling amphoraeSignalsGetSignal.');
            }
            const localVarPath = `/api/amphorae/{id}/signals/{property}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"property"}}`, encodeURIComponent(String(property)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get\'s the signals associated with an Amphora.
         * @param {string} id Amphora Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeSignalsGetSignals(id: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraeSignalsGetSignals.');
            }
            const localVarPath = `/api/amphorae/{id}/signals`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Associates a signal with an Amphora. Signal is created if not existing.
         * @param {string} id Amphora Id.
         * @param {string} signalId Signal Details.
         * @param {UpdateSignal} updateSignal Signal properties to update.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeSignalsUpdateSignal(id: string, signalId: string, updateSignal: UpdateSignal, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraeSignalsUpdateSignal.');
            }
            // verify required parameter 'signalId' is not null or undefined
            if (signalId === null || signalId === undefined) {
                throw new RequiredError('signalId','Required parameter signalId was null or undefined when calling amphoraeSignalsUpdateSignal.');
            }
            // verify required parameter 'updateSignal' is not null or undefined
            if (updateSignal === null || updateSignal === undefined) {
                throw new RequiredError('updateSignal','Required parameter updateSignal was null or undefined when calling amphoraeSignalsUpdateSignal.');
            }
            const localVarPath = `/api/amphorae/{id}/signals/{signalId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"signalId"}}`, encodeURIComponent(String(signalId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof updateSignal !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateSignal !== undefined ? updateSignal : {}) : (updateSignal || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {{ [key: string]: object; }} requestBody 
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeSignalsUploadSignal(id: string, requestBody: { [key: string]: object; }, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraeSignalsUploadSignal.');
            }
            // verify required parameter 'requestBody' is not null or undefined
            if (requestBody === null || requestBody === undefined) {
                throw new RequiredError('requestBody','Required parameter requestBody was null or undefined when calling amphoraeSignalsUploadSignal.');
            }
            const localVarPath = `/api/amphorae/{id}/signals/values`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {{ [key: string]: object; }} requestBody 
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeSignalsUploadSignal2(id: string, requestBody: { [key: string]: object; }, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraeSignalsUploadSignal2.');
            }
            // verify required parameter 'requestBody' is not null or undefined
            if (requestBody === null || requestBody === undefined) {
                throw new RequiredError('requestBody','Required parameter requestBody was null or undefined when calling amphoraeSignalsUploadSignal2.');
            }
            const localVarPath = `/api/amphorae/{id}/signalValues`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Array<{ [key: string]: object; }>} requestBody 
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeSignalsUploadSignalBatch(id: string, requestBody: Array<{ [key: string]: object; }>, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraeSignalsUploadSignalBatch.');
            }
            // verify required parameter 'requestBody' is not null or undefined
            if (requestBody === null || requestBody === undefined) {
                throw new RequiredError('requestBody','Required parameter requestBody was null or undefined when calling amphoraeSignalsUploadSignalBatch.');
            }
            const localVarPath = `/api/amphorae/{id}/signals/batchvalues`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Array<{ [key: string]: object; }>} requestBody 
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeSignalsUploadSignalBatch2(id: string, requestBody: Array<{ [key: string]: object; }>, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraeSignalsUploadSignalBatch2.');
            }
            // verify required parameter 'requestBody' is not null or undefined
            if (requestBody === null || requestBody === undefined) {
                throw new RequiredError('requestBody','Required parameter requestBody was null or undefined when calling amphoraeSignalsUploadSignalBatch2.');
            }
            const localVarPath = `/api/amphorae/{id}/batchSignalValues`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the details of an Amphora by Id.
         * @param {string} id Amphora Id.
         * @param {DetailedAmphora} detailedAmphora Information to update. Nulls are NOT ignored.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeUpdate(id: string, detailedAmphora: DetailedAmphora, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling amphoraeUpdate.');
            }
            // verify required parameter 'detailedAmphora' is not null or undefined
            if (detailedAmphora === null || detailedAmphora === undefined) {
                throw new RequiredError('detailedAmphora','Required parameter detailedAmphora was null or undefined when calling amphoraeUpdate.');
            }
            const localVarPath = `/api/amphorae/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof detailedAmphora !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(detailedAmphora !== undefined ? detailedAmphora : {}) : (detailedAmphora || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Purchases an Amphora as the logged in user.
         * @param {string} id Amphora Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchasesPurchase(id: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling purchasesPurchase.');
            }
            const localVarPath = `/api/Amphorae/{id}/Purchases`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AmphoraeApi - functional programming interface
 * @export
 */
export const AmphoraeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets the data quality metrics for this Amphora.
         * @param {string} id Amphora Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraQualityGet(id: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Quality> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraQualityGet(id, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Sets the data quality metrics for this Amphora.
         * @param {string} id Amphora Id.
         * @param {Quality} quality The data quality metrics.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraQualitySet(id: string, quality: Quality, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Quality> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraQualitySet(id, quality, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Creates an Access Control Rule for all on this Amphora.
         * @param {string} id Amphora Id.
         * @param {AllAccessRule} allAccessRule The rule to create.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeAccessControlsCreateForAll(id: string, allAccessRule: AllAccessRule, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AllAccessRule> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeAccessControlsCreateForAll(id, allAccessRule, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Creates an Access Control Rule on this Amphora.
         * @param {string} id Amphora Id.
         * @param {OrganisationAccessRule} organisationAccessRule The rule to create.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeAccessControlsCreateForOrganisation(id: string, organisationAccessRule: OrganisationAccessRule, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAccessRule> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeAccessControlsCreateForOrganisation(id, organisationAccessRule, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Creates an Access Control rule on this Amphora.
         * @param {string} id Amphora Id.
         * @param {UserAccessRule} userAccessRule The rule to create.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeAccessControlsCreateForUser(id: string, userAccessRule: UserAccessRule, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAccessRule> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeAccessControlsCreateForUser(id, userAccessRule, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes an Access Control on this Amphora.
         * @param {string} id Amphora Id.
         * @param {string} ruleId The Id of the rule to delete.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeAccessControlsDelete(id: string, ruleId: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeAccessControlsDelete(id, ruleId, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get\'s the \'for all\' rule, if it exists, else an empty 200.
         * @param {string} id Amphora Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeAccessControlsGetForAllRule(id: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AllAccessRule> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeAccessControlsGetForAllRule(id, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get\'s the list of access rules applied to organisations.
         * @param {string} id Amphora Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeAccessControlsGetOrganisationRules(id: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganisationAccessRule>> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeAccessControlsGetOrganisationRules(id, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get\'s the list of access rules applied to users.
         * @param {string} id Amphora Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeAccessControlsGetUserRules(id: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserAccessRule>> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeAccessControlsGetUserRules(id, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Creates a new empty Amphora in the user\'s organisation.
         * @param {CreateAmphora} createAmphora Information for the new Amphora.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeCreate(createAmphora: CreateAmphora, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailedAmphora> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeCreate(createAmphora, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes an Amphora.
         * @param {string} id Amphora Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeDelete(id: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeDelete(id, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Creates a file. Returns a blob URL to upload to.
         * @param {string} id Amphora Id.
         * @param {string} file The name of the file.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeFilesCreateFileRequest(id: string, file: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadResponse> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeFilesCreateFileRequest(id, file, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get\'s the contents of a file. Returns application/octet-stream.
         * @param {string} id Amphora Id.
         * @param {string} file The name of the file.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeFilesDeleteFile(id: string, file: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeFilesDeleteFile(id, file, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get\'s the contents of a file. Returns application/octet-stream.
         * @param {string} id Amphora Id.
         * @param {string} file The name of the file.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeFilesDownloadFile(id: string, file: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeFilesDownloadFile(id, file, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Lists an Amphora\'s files.
         * @param {string} id Amphora Id.
         * @param {number} [take] Gets or sets how many files to return. Defaults to 64.
         * @param {number} [skip] Gets or sets how many files to skip before returning. Defaults to 0.
         * @param {string} [orderBy] Gets or sets the the orderBy parameter. Options are Alphabetical or LastModified.
         * @param {string} [prefix] Gets or sets a prefix filter for all file names. Is case sensitive.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeFilesListFiles(id: string, take?: number, skip?: number, orderBy?: string, prefix?: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeFilesListFiles(id, take, skip, orderBy, prefix, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Queries an Amphora\'s files.
         * @param {string} id Amphora Id.
         * @param {FileQueryOptions} fileQueryOptions Option for querying the files.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeFilesQueryFiles(id: string, fileQueryOptions: FileQueryOptions, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeFilesQueryFiles(id, fileQueryOptions, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get\'s the attributes of a file.
         * @param {string} id Amphora Id.
         * @param {string} file The name of the file.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeFilesReadFileAttributes(id: string, file: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeFilesReadFileAttributes(id, file, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} file 
         * @param {{ [key: string]: string; }} requestBody 
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeFilesWriteFileAttributes(id: string, file: string, requestBody: { [key: string]: string; }, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeFilesWriteFileAttributes(id, file, requestBody, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets a list of Amphora for yourself or your org, created or purchased by you (or organisation).
         * @param {string} [scope] \&#39;self\&#39; or \&#39;organisation\&#39;. Defaults to self.
         * @param {string} [accessType] \&#39;created\&#39; or \&#39;purchased\&#39;. Defaults to created.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeList(scope?: string, accessType?: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DetailedAmphora>> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeList(scope, accessType, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets details of an Amphora by Id.
         * @param {string} id Amphora Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeRead(id: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailedAmphora> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeRead(id, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Associates a signal with an Amphora. Signal is created if not existing.
         * @param {string} id Amphora Id.
         * @param {CreateSignal} createSignal Signal Details.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeSignalsCreateSignal(id: string, createSignal: CreateSignal, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signal> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeSignalsCreateSignal(id, createSignal, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get\'s the signals associated with an Amphora.
         * @param {string} id Amphora Id.
         * @param {string} property The name or id of the signal property.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeSignalsGetSignal(id: string, property: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signal> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeSignalsGetSignal(id, property, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get\'s the signals associated with an Amphora.
         * @param {string} id Amphora Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeSignalsGetSignals(id: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Signal>> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeSignalsGetSignals(id, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Associates a signal with an Amphora. Signal is created if not existing.
         * @param {string} id Amphora Id.
         * @param {string} signalId Signal Details.
         * @param {UpdateSignal} updateSignal Signal properties to update.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeSignalsUpdateSignal(id: string, signalId: string, updateSignal: UpdateSignal, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signal> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeSignalsUpdateSignal(id, signalId, updateSignal, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {{ [key: string]: object; }} requestBody 
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeSignalsUploadSignal(id: string, requestBody: { [key: string]: object; }, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeSignalsUploadSignal(id, requestBody, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {{ [key: string]: object; }} requestBody 
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeSignalsUploadSignal2(id: string, requestBody: { [key: string]: object; }, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeSignalsUploadSignal2(id, requestBody, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Array<{ [key: string]: object; }>} requestBody 
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeSignalsUploadSignalBatch(id: string, requestBody: Array<{ [key: string]: object; }>, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeSignalsUploadSignalBatch(id, requestBody, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Array<{ [key: string]: object; }>} requestBody 
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeSignalsUploadSignalBatch2(id: string, requestBody: Array<{ [key: string]: object; }>, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeSignalsUploadSignalBatch2(id, requestBody, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Updates the details of an Amphora by Id.
         * @param {string} id Amphora Id.
         * @param {DetailedAmphora} detailedAmphora Information to update. Nulls are NOT ignored.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeUpdate(id: string, detailedAmphora: DetailedAmphora, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailedAmphora> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).amphoraeUpdate(id, detailedAmphora, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Purchases an Amphora as the logged in user.
         * @param {string} id Amphora Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchasesPurchase(id: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = AmphoraeApiAxiosParamCreator(configuration).purchasesPurchase(id, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AmphoraeApi - factory interface
 * @export
 */
export const AmphoraeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Gets the data quality metrics for this Amphora.
         * @param {string} id Amphora Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraQualityGet(id: string, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraQualityGet(id, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Sets the data quality metrics for this Amphora.
         * @param {string} id Amphora Id.
         * @param {Quality} quality The data quality metrics.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraQualitySet(id: string, quality: Quality, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraQualitySet(id, quality, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Creates an Access Control Rule for all on this Amphora.
         * @param {string} id Amphora Id.
         * @param {AllAccessRule} allAccessRule The rule to create.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeAccessControlsCreateForAll(id: string, allAccessRule: AllAccessRule, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeAccessControlsCreateForAll(id, allAccessRule, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Creates an Access Control Rule on this Amphora.
         * @param {string} id Amphora Id.
         * @param {OrganisationAccessRule} organisationAccessRule The rule to create.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeAccessControlsCreateForOrganisation(id: string, organisationAccessRule: OrganisationAccessRule, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeAccessControlsCreateForOrganisation(id, organisationAccessRule, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Creates an Access Control rule on this Amphora.
         * @param {string} id Amphora Id.
         * @param {UserAccessRule} userAccessRule The rule to create.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeAccessControlsCreateForUser(id: string, userAccessRule: UserAccessRule, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeAccessControlsCreateForUser(id, userAccessRule, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Deletes an Access Control on this Amphora.
         * @param {string} id Amphora Id.
         * @param {string} ruleId The Id of the rule to delete.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeAccessControlsDelete(id: string, ruleId: string, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeAccessControlsDelete(id, ruleId, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get\'s the \'for all\' rule, if it exists, else an empty 200.
         * @param {string} id Amphora Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeAccessControlsGetForAllRule(id: string, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeAccessControlsGetForAllRule(id, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get\'s the list of access rules applied to organisations.
         * @param {string} id Amphora Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeAccessControlsGetOrganisationRules(id: string, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeAccessControlsGetOrganisationRules(id, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get\'s the list of access rules applied to users.
         * @param {string} id Amphora Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeAccessControlsGetUserRules(id: string, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeAccessControlsGetUserRules(id, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Creates a new empty Amphora in the user\'s organisation.
         * @param {CreateAmphora} createAmphora Information for the new Amphora.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeCreate(createAmphora: CreateAmphora, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeCreate(createAmphora, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Deletes an Amphora.
         * @param {string} id Amphora Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeDelete(id: string, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeDelete(id, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Creates a file. Returns a blob URL to upload to.
         * @param {string} id Amphora Id.
         * @param {string} file The name of the file.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeFilesCreateFileRequest(id: string, file: string, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeFilesCreateFileRequest(id, file, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get\'s the contents of a file. Returns application/octet-stream.
         * @param {string} id Amphora Id.
         * @param {string} file The name of the file.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeFilesDeleteFile(id: string, file: string, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeFilesDeleteFile(id, file, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get\'s the contents of a file. Returns application/octet-stream.
         * @param {string} id Amphora Id.
         * @param {string} file The name of the file.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeFilesDownloadFile(id: string, file: string, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeFilesDownloadFile(id, file, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Lists an Amphora\'s files.
         * @param {string} id Amphora Id.
         * @param {number} [take] Gets or sets how many files to return. Defaults to 64.
         * @param {number} [skip] Gets or sets how many files to skip before returning. Defaults to 0.
         * @param {string} [orderBy] Gets or sets the the orderBy parameter. Options are Alphabetical or LastModified.
         * @param {string} [prefix] Gets or sets a prefix filter for all file names. Is case sensitive.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeFilesListFiles(id: string, take?: number, skip?: number, orderBy?: string, prefix?: string, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeFilesListFiles(id, take, skip, orderBy, prefix, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Queries an Amphora\'s files.
         * @param {string} id Amphora Id.
         * @param {FileQueryOptions} fileQueryOptions Option for querying the files.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeFilesQueryFiles(id: string, fileQueryOptions: FileQueryOptions, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeFilesQueryFiles(id, fileQueryOptions, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get\'s the attributes of a file.
         * @param {string} id Amphora Id.
         * @param {string} file The name of the file.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeFilesReadFileAttributes(id: string, file: string, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeFilesReadFileAttributes(id, file, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} file 
         * @param {{ [key: string]: string; }} requestBody 
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeFilesWriteFileAttributes(id: string, file: string, requestBody: { [key: string]: string; }, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeFilesWriteFileAttributes(id, file, requestBody, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets a list of Amphora for yourself or your org, created or purchased by you (or organisation).
         * @param {string} [scope] \&#39;self\&#39; or \&#39;organisation\&#39;. Defaults to self.
         * @param {string} [accessType] \&#39;created\&#39; or \&#39;purchased\&#39;. Defaults to created.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeList(scope?: string, accessType?: string, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeList(scope, accessType, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets details of an Amphora by Id.
         * @param {string} id Amphora Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeRead(id: string, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeRead(id, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Associates a signal with an Amphora. Signal is created if not existing.
         * @param {string} id Amphora Id.
         * @param {CreateSignal} createSignal Signal Details.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeSignalsCreateSignal(id: string, createSignal: CreateSignal, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeSignalsCreateSignal(id, createSignal, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get\'s the signals associated with an Amphora.
         * @param {string} id Amphora Id.
         * @param {string} property The name or id of the signal property.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeSignalsGetSignal(id: string, property: string, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeSignalsGetSignal(id, property, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get\'s the signals associated with an Amphora.
         * @param {string} id Amphora Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeSignalsGetSignals(id: string, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeSignalsGetSignals(id, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Associates a signal with an Amphora. Signal is created if not existing.
         * @param {string} id Amphora Id.
         * @param {string} signalId Signal Details.
         * @param {UpdateSignal} updateSignal Signal properties to update.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeSignalsUpdateSignal(id: string, signalId: string, updateSignal: UpdateSignal, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeSignalsUpdateSignal(id, signalId, updateSignal, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {{ [key: string]: object; }} requestBody 
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeSignalsUploadSignal(id: string, requestBody: { [key: string]: object; }, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeSignalsUploadSignal(id, requestBody, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {{ [key: string]: object; }} requestBody 
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeSignalsUploadSignal2(id: string, requestBody: { [key: string]: object; }, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeSignalsUploadSignal2(id, requestBody, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {Array<{ [key: string]: object; }>} requestBody 
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeSignalsUploadSignalBatch(id: string, requestBody: Array<{ [key: string]: object; }>, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeSignalsUploadSignalBatch(id, requestBody, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {Array<{ [key: string]: object; }>} requestBody 
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeSignalsUploadSignalBatch2(id: string, requestBody: Array<{ [key: string]: object; }>, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeSignalsUploadSignalBatch2(id, requestBody, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Updates the details of an Amphora by Id.
         * @param {string} id Amphora Id.
         * @param {DetailedAmphora} detailedAmphora Information to update. Nulls are NOT ignored.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amphoraeUpdate(id: string, detailedAmphora: DetailedAmphora, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).amphoraeUpdate(id, detailedAmphora, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Purchases an Amphora as the logged in user.
         * @param {string} id Amphora Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchasesPurchase(id: string, xAmphoradataVersion?: string, options?: any) {
            return AmphoraeApiFp(configuration).purchasesPurchase(id, xAmphoradataVersion, options)(axios, basePath);
        },
    };
};

/**
 * AmphoraeApi - object-oriented interface
 * @export
 * @class AmphoraeApi
 * @extends {BaseAPI}
 */
export class AmphoraeApi extends BaseAPI {
    /**
     * 
     * @summary Gets the data quality metrics for this Amphora.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraQualityGet(id: string, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraQualityGet(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Sets the data quality metrics for this Amphora.
     * @param {string} id Amphora Id.
     * @param {Quality} quality The data quality metrics.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraQualitySet(id: string, quality: Quality, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraQualitySet(id, quality, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Creates an Access Control Rule for all on this Amphora.
     * @param {string} id Amphora Id.
     * @param {AllAccessRule} allAccessRule The rule to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeAccessControlsCreateForAll(id: string, allAccessRule: AllAccessRule, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeAccessControlsCreateForAll(id, allAccessRule, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Creates an Access Control Rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {OrganisationAccessRule} organisationAccessRule The rule to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeAccessControlsCreateForOrganisation(id: string, organisationAccessRule: OrganisationAccessRule, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeAccessControlsCreateForOrganisation(id, organisationAccessRule, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Creates an Access Control rule on this Amphora.
     * @param {string} id Amphora Id.
     * @param {UserAccessRule} userAccessRule The rule to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeAccessControlsCreateForUser(id: string, userAccessRule: UserAccessRule, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeAccessControlsCreateForUser(id, userAccessRule, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Deletes an Access Control on this Amphora.
     * @param {string} id Amphora Id.
     * @param {string} ruleId The Id of the rule to delete.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeAccessControlsDelete(id: string, ruleId: string, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeAccessControlsDelete(id, ruleId, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get\'s the \'for all\' rule, if it exists, else an empty 200.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeAccessControlsGetForAllRule(id: string, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeAccessControlsGetForAllRule(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get\'s the list of access rules applied to organisations.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeAccessControlsGetOrganisationRules(id: string, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeAccessControlsGetOrganisationRules(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get\'s the list of access rules applied to users.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeAccessControlsGetUserRules(id: string, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeAccessControlsGetUserRules(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Creates a new empty Amphora in the user\'s organisation.
     * @param {CreateAmphora} createAmphora Information for the new Amphora.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeCreate(createAmphora: CreateAmphora, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeCreate(createAmphora, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Deletes an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeDelete(id: string, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeDelete(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Creates a file. Returns a blob URL to upload to.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeFilesCreateFileRequest(id: string, file: string, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeFilesCreateFileRequest(id, file, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get\'s the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeFilesDeleteFile(id: string, file: string, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeFilesDeleteFile(id, file, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get\'s the contents of a file. Returns application/octet-stream.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeFilesDownloadFile(id: string, file: string, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeFilesDownloadFile(id, file, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Lists an Amphora\'s files.
     * @param {string} id Amphora Id.
     * @param {number} [take] Gets or sets how many files to return. Defaults to 64.
     * @param {number} [skip] Gets or sets how many files to skip before returning. Defaults to 0.
     * @param {string} [orderBy] Gets or sets the the orderBy parameter. Options are Alphabetical or LastModified.
     * @param {string} [prefix] Gets or sets a prefix filter for all file names. Is case sensitive.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeFilesListFiles(id: string, take?: number, skip?: number, orderBy?: string, prefix?: string, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeFilesListFiles(id, take, skip, orderBy, prefix, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Queries an Amphora\'s files.
     * @param {string} id Amphora Id.
     * @param {FileQueryOptions} fileQueryOptions Option for querying the files.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeFilesQueryFiles(id: string, fileQueryOptions: FileQueryOptions, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeFilesQueryFiles(id, fileQueryOptions, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get\'s the attributes of a file.
     * @param {string} id Amphora Id.
     * @param {string} file The name of the file.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeFilesReadFileAttributes(id: string, file: string, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeFilesReadFileAttributes(id, file, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {string} file 
     * @param {{ [key: string]: string; }} requestBody 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeFilesWriteFileAttributes(id: string, file: string, requestBody: { [key: string]: string; }, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeFilesWriteFileAttributes(id, file, requestBody, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets a list of Amphora for yourself or your org, created or purchased by you (or organisation).
     * @param {string} [scope] \&#39;self\&#39; or \&#39;organisation\&#39;. Defaults to self.
     * @param {string} [accessType] \&#39;created\&#39; or \&#39;purchased\&#39;. Defaults to created.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeList(scope?: string, accessType?: string, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeList(scope, accessType, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeRead(id: string, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeRead(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {CreateSignal} createSignal Signal Details.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeSignalsCreateSignal(id: string, createSignal: CreateSignal, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeSignalsCreateSignal(id, createSignal, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get\'s the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} property The name or id of the signal property.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeSignalsGetSignal(id: string, property: string, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeSignalsGetSignal(id, property, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get\'s the signals associated with an Amphora.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeSignalsGetSignals(id: string, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeSignalsGetSignals(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Associates a signal with an Amphora. Signal is created if not existing.
     * @param {string} id Amphora Id.
     * @param {string} signalId Signal Details.
     * @param {UpdateSignal} updateSignal Signal properties to update.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeSignalsUpdateSignal(id: string, signalId: string, updateSignal: UpdateSignal, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeSignalsUpdateSignal(id, signalId, updateSignal, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {{ [key: string]: object; }} requestBody 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeSignalsUploadSignal(id: string, requestBody: { [key: string]: object; }, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeSignalsUploadSignal(id, requestBody, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {{ [key: string]: object; }} requestBody 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeSignalsUploadSignal2(id: string, requestBody: { [key: string]: object; }, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeSignalsUploadSignal2(id, requestBody, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {Array<{ [key: string]: object; }>} requestBody 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeSignalsUploadSignalBatch(id: string, requestBody: Array<{ [key: string]: object; }>, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeSignalsUploadSignalBatch(id, requestBody, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {Array<{ [key: string]: object; }>} requestBody 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeSignalsUploadSignalBatch2(id: string, requestBody: Array<{ [key: string]: object; }>, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeSignalsUploadSignalBatch2(id, requestBody, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Updates the details of an Amphora by Id.
     * @param {string} id Amphora Id.
     * @param {DetailedAmphora} detailedAmphora Information to update. Nulls are NOT ignored.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public amphoraeUpdate(id: string, detailedAmphora: DetailedAmphora, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).amphoraeUpdate(id, detailedAmphora, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Purchases an Amphora as the logged in user.
     * @param {string} id Amphora Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmphoraeApi
     */
    public purchasesPurchase(id: string, xAmphoradataVersion?: string, options?: any) {
        return AmphoraeApiFp(this.configuration).purchasesPurchase(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

}


/**
 * ApplicationsApi - axios parameter creator
 * @export
 */
export const ApplicationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new application. Applications are external websites that Amphora users can sign in to.
         * @param {CreateApplication} createApplication An application to create.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsCreateApplication(createApplication: CreateApplication, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'createApplication' is not null or undefined
            if (createApplication === null || createApplication === undefined) {
                throw new RequiredError('createApplication','Required parameter createApplication was null or undefined when calling applicationsCreateApplication.');
            }
            const localVarPath = `/api/applications`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof createApplication !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createApplication !== undefined ? createApplication : {}) : (createApplication || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an application. Must be done by an Organisation administrator.
         * @param {string} id The application id to delete.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsDeleteApplication(id: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling applicationsDeleteApplication.');
            }
            const localVarPath = `/api/applications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets an application by Id, if it exists.
         * @param {string} id The id of the application to get.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsReadApplication(id: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling applicationsReadApplication.');
            }
            const localVarPath = `/api/applications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an application by Id, if it exists.
         * @param {string} id The id of the application to update.
         * @param {UpdateApplication} updateApplication The information to update (old locations will be deleted).
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsUpdateApplication(id: string, updateApplication: UpdateApplication, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling applicationsUpdateApplication.');
            }
            // verify required parameter 'updateApplication' is not null or undefined
            if (updateApplication === null || updateApplication === undefined) {
                throw new RequiredError('updateApplication','Required parameter updateApplication was null or undefined when calling applicationsUpdateApplication.');
            }
            const localVarPath = `/api/applications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof updateApplication !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateApplication !== undefined ? updateApplication : {}) : (updateApplication || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationsApi - functional programming interface
 * @export
 */
export const ApplicationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new application. Applications are external websites that Amphora users can sign in to.
         * @param {CreateApplication} createApplication An application to create.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsCreateApplication(createApplication: CreateApplication, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application> {
            const localVarAxiosArgs = ApplicationsApiAxiosParamCreator(configuration).applicationsCreateApplication(createApplication, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes an application. Must be done by an Organisation administrator.
         * @param {string} id The application id to delete.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsDeleteApplication(id: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application> {
            const localVarAxiosArgs = ApplicationsApiAxiosParamCreator(configuration).applicationsDeleteApplication(id, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets an application by Id, if it exists.
         * @param {string} id The id of the application to get.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsReadApplication(id: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application> {
            const localVarAxiosArgs = ApplicationsApiAxiosParamCreator(configuration).applicationsReadApplication(id, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Updates an application by Id, if it exists.
         * @param {string} id The id of the application to update.
         * @param {UpdateApplication} updateApplication The information to update (old locations will be deleted).
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsUpdateApplication(id: string, updateApplication: UpdateApplication, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application> {
            const localVarAxiosArgs = ApplicationsApiAxiosParamCreator(configuration).applicationsUpdateApplication(id, updateApplication, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ApplicationsApi - factory interface
 * @export
 */
export const ApplicationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Creates a new application. Applications are external websites that Amphora users can sign in to.
         * @param {CreateApplication} createApplication An application to create.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsCreateApplication(createApplication: CreateApplication, xAmphoradataVersion?: string, options?: any) {
            return ApplicationsApiFp(configuration).applicationsCreateApplication(createApplication, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Deletes an application. Must be done by an Organisation administrator.
         * @param {string} id The application id to delete.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsDeleteApplication(id: string, xAmphoradataVersion?: string, options?: any) {
            return ApplicationsApiFp(configuration).applicationsDeleteApplication(id, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets an application by Id, if it exists.
         * @param {string} id The id of the application to get.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsReadApplication(id: string, xAmphoradataVersion?: string, options?: any) {
            return ApplicationsApiFp(configuration).applicationsReadApplication(id, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Updates an application by Id, if it exists.
         * @param {string} id The id of the application to update.
         * @param {UpdateApplication} updateApplication The information to update (old locations will be deleted).
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationsUpdateApplication(id: string, updateApplication: UpdateApplication, xAmphoradataVersion?: string, options?: any) {
            return ApplicationsApiFp(configuration).applicationsUpdateApplication(id, updateApplication, xAmphoradataVersion, options)(axios, basePath);
        },
    };
};

/**
 * ApplicationsApi - object-oriented interface
 * @export
 * @class ApplicationsApi
 * @extends {BaseAPI}
 */
export class ApplicationsApi extends BaseAPI {
    /**
     * 
     * @summary Creates a new application. Applications are external websites that Amphora users can sign in to.
     * @param {CreateApplication} createApplication An application to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public applicationsCreateApplication(createApplication: CreateApplication, xAmphoradataVersion?: string, options?: any) {
        return ApplicationsApiFp(this.configuration).applicationsCreateApplication(createApplication, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Deletes an application. Must be done by an Organisation administrator.
     * @param {string} id The application id to delete.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public applicationsDeleteApplication(id: string, xAmphoradataVersion?: string, options?: any) {
        return ApplicationsApiFp(this.configuration).applicationsDeleteApplication(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets an application by Id, if it exists.
     * @param {string} id The id of the application to get.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public applicationsReadApplication(id: string, xAmphoradataVersion?: string, options?: any) {
        return ApplicationsApiFp(this.configuration).applicationsReadApplication(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Updates an application by Id, if it exists.
     * @param {string} id The id of the application to update.
     * @param {UpdateApplication} updateApplication The information to update (old locations will be deleted).
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApi
     */
    public applicationsUpdateApplication(id: string, updateApplication: UpdateApplication, xAmphoradataVersion?: string, options?: any) {
        return ApplicationsApiFp(this.configuration).applicationsUpdateApplication(id, updateApplication, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

}


/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns a JWT (JSON Web Token).             
         * @param {LoginRequest} loginRequest Token Request Parameters.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationRequestToken(loginRequest: LoginRequest, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'loginRequest' is not null or undefined
            if (loginRequest === null || loginRequest === undefined) {
                throw new RequiredError('loginRequest','Required parameter loginRequest was null or undefined when calling authenticationRequestToken.');
            }
            const localVarPath = `/api/authentication/request`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof loginRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginRequest !== undefined ? loginRequest : {}) : (loginRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns a JWT (JSON Web Token).             
         * @param {LoginRequest} loginRequest Token Request Parameters.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationRequestToken(loginRequest: LoginRequest, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = AuthenticationApiAxiosParamCreator(configuration).authenticationRequestToken(loginRequest, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Returns a JWT (JSON Web Token).             
         * @param {LoginRequest} loginRequest Token Request Parameters.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationRequestToken(loginRequest: LoginRequest, xAmphoradataVersion?: string, options?: any) {
            return AuthenticationApiFp(configuration).authenticationRequestToken(loginRequest, xAmphoradataVersion, options)(axios, basePath);
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @summary Returns a JWT (JSON Web Token).             
     * @param {LoginRequest} loginRequest Token Request Parameters.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authenticationRequestToken(loginRequest: LoginRequest, xAmphoradataVersion?: string, options?: any) {
        return AuthenticationApiFp(this.configuration).authenticationRequestToken(loginRequest, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

}


/**
 * GeoApi - axios parameter creator
 * @export
 */
export const GeoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Executes a fuzzy location search.
         * @param {string} [query] Search Text.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        geoLookupLocation(query?: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/geo/search/fuzzy`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeoApi - functional programming interface
 * @export
 */
export const GeoApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Executes a fuzzy location search.
         * @param {string} [query] Search Text.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        geoLookupLocation(query?: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FuzzySearchResponse> {
            const localVarAxiosArgs = GeoApiAxiosParamCreator(configuration).geoLookupLocation(query, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GeoApi - factory interface
 * @export
 */
export const GeoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Executes a fuzzy location search.
         * @param {string} [query] Search Text.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        geoLookupLocation(query?: string, xAmphoradataVersion?: string, options?: any) {
            return GeoApiFp(configuration).geoLookupLocation(query, xAmphoradataVersion, options)(axios, basePath);
        },
    };
};

/**
 * GeoApi - object-oriented interface
 * @export
 * @class GeoApi
 * @extends {BaseAPI}
 */
export class GeoApi extends BaseAPI {
    /**
     * 
     * @summary Executes a fuzzy location search.
     * @param {string} [query] Search Text.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeoApi
     */
    public geoLookupLocation(query?: string, xAmphoradataVersion?: string, options?: any) {
        return GeoApiFp(this.configuration).geoLookupLocation(query, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

}


/**
 * IdentityApi - axios parameter creator
 * @export
 */
export const IdentityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityGet(xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            const localVarPath = `/identity`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdentityApi - functional programming interface
 * @export
 */
export const IdentityApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityGet(xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any> {
            const localVarAxiosArgs = IdentityApiAxiosParamCreator(configuration).identityGet(xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * IdentityApi - factory interface
 * @export
 */
export const IdentityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityGet(xAmphoradataVersion?: string, options?: any) {
            return IdentityApiFp(configuration).identityGet(xAmphoradataVersion, options)(axios, basePath);
        },
    };
};

/**
 * IdentityApi - object-oriented interface
 * @export
 * @class IdentityApi
 * @extends {BaseAPI}
 */
export class IdentityApi extends BaseAPI {
    /**
     * 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public identityGet(xAmphoradataVersion?: string, options?: any) {
        return IdentityApiFp(this.configuration).identityGet(xAmphoradataVersion, options)(this.axios, this.basePath);
    }

}


/**
 * OrganisationsApi - axios parameter creator
 * @export
 */
export const OrganisationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get\'s an Organisation\'s plan information.
         * @param {string} id Organisation Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountGetPlan(id: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling accountGetPlan.');
            }
            const localVarPath = `/api/Organisations/{id}/Account/Plan`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get\'s an Organisation\'s account information.
         * @param {string} id Organisation Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountRead(id: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling accountRead.');
            }
            const localVarPath = `/api/Organisations/{id}/Account`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new Organisation. This will assign the logged in user to the organisation.
         * @param {Organisation} organisation Information of the new Organisation.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsCreate(organisation: Organisation, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'organisation' is not null or undefined
            if (organisation === null || organisation === undefined) {
                throw new RequiredError('organisation','Required parameter organisation was null or undefined when calling organisationsCreate.');
            }
            const localVarPath = `/api/Organisations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof organisation !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(organisation !== undefined ? organisation : {}) : (organisation || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes an organisation.
         * @param {string} id Organisation Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsDelete(id: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling organisationsDelete.');
            }
            const localVarPath = `/api/Organisations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets an organisation\'s details.
         * @param {string} id Organisation Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsRead(id: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling organisationsRead.');
            }
            const localVarPath = `/api/Organisations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets an organisation\'s invitations.
         * @param {string} id Organisation Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsReadInvitations(id: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling organisationsReadInvitations.');
            }
            const localVarPath = `/api/Organisations/{id}/Invitations`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get\'s a list of an Organisation\'s Terms of Use.
         * @param {string} id The Id of the Organisation.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsTermsOfUseRead(id: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling organisationsTermsOfUseRead.');
            }
            const localVarPath = `/api/Organisations/{id}/TermsOfUse`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates an organisation.
         * @param {string} id Organisation Id.
         * @param {Organisation} organisation Organisation Information. All fields are updated.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsUpdate(id: string, organisation: Organisation, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling organisationsUpdate.');
            }
            // verify required parameter 'organisation' is not null or undefined
            if (organisation === null || organisation === undefined) {
                throw new RequiredError('organisation','Required parameter organisation was null or undefined when calling organisationsUpdate.');
            }
            const localVarPath = `/api/Organisations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof organisation !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(organisation !== undefined ? organisation : {}) : (organisation || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganisationsApi - functional programming interface
 * @export
 */
export const OrganisationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get\'s an Organisation\'s plan information.
         * @param {string} id Organisation Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountGetPlan(id: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanInformation> {
            const localVarAxiosArgs = OrganisationsApiAxiosParamCreator(configuration).accountGetPlan(id, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get\'s an Organisation\'s account information.
         * @param {string} id Organisation Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountRead(id: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account> {
            const localVarAxiosArgs = OrganisationsApiAxiosParamCreator(configuration).accountRead(id, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Creates a new Organisation. This will assign the logged in user to the organisation.
         * @param {Organisation} organisation Information of the new Organisation.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsCreate(organisation: Organisation, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organisation> {
            const localVarAxiosArgs = OrganisationsApiAxiosParamCreator(configuration).organisationsCreate(organisation, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes an organisation.
         * @param {string} id Organisation Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsDelete(id: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = OrganisationsApiAxiosParamCreator(configuration).organisationsDelete(id, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets an organisation\'s details.
         * @param {string} id Organisation Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsRead(id: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organisation> {
            const localVarAxiosArgs = OrganisationsApiAxiosParamCreator(configuration).organisationsRead(id, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets an organisation\'s invitations.
         * @param {string} id Organisation Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsReadInvitations(id: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Invitation>> {
            const localVarAxiosArgs = OrganisationsApiAxiosParamCreator(configuration).organisationsReadInvitations(id, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get\'s a list of an Organisation\'s Terms of Use.
         * @param {string} id The Id of the Organisation.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsTermsOfUseRead(id: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TermsOfUse>> {
            const localVarAxiosArgs = OrganisationsApiAxiosParamCreator(configuration).organisationsTermsOfUseRead(id, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Updates an organisation.
         * @param {string} id Organisation Id.
         * @param {Organisation} organisation Organisation Information. All fields are updated.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsUpdate(id: string, organisation: Organisation, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any> {
            const localVarAxiosArgs = OrganisationsApiAxiosParamCreator(configuration).organisationsUpdate(id, organisation, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OrganisationsApi - factory interface
 * @export
 */
export const OrganisationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get\'s an Organisation\'s plan information.
         * @param {string} id Organisation Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountGetPlan(id: string, xAmphoradataVersion?: string, options?: any) {
            return OrganisationsApiFp(configuration).accountGetPlan(id, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get\'s an Organisation\'s account information.
         * @param {string} id Organisation Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountRead(id: string, xAmphoradataVersion?: string, options?: any) {
            return OrganisationsApiFp(configuration).accountRead(id, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Creates a new Organisation. This will assign the logged in user to the organisation.
         * @param {Organisation} organisation Information of the new Organisation.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsCreate(organisation: Organisation, xAmphoradataVersion?: string, options?: any) {
            return OrganisationsApiFp(configuration).organisationsCreate(organisation, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Deletes an organisation.
         * @param {string} id Organisation Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsDelete(id: string, xAmphoradataVersion?: string, options?: any) {
            return OrganisationsApiFp(configuration).organisationsDelete(id, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets an organisation\'s details.
         * @param {string} id Organisation Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsRead(id: string, xAmphoradataVersion?: string, options?: any) {
            return OrganisationsApiFp(configuration).organisationsRead(id, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets an organisation\'s invitations.
         * @param {string} id Organisation Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsReadInvitations(id: string, xAmphoradataVersion?: string, options?: any) {
            return OrganisationsApiFp(configuration).organisationsReadInvitations(id, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get\'s a list of an Organisation\'s Terms of Use.
         * @param {string} id The Id of the Organisation.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsTermsOfUseRead(id: string, xAmphoradataVersion?: string, options?: any) {
            return OrganisationsApiFp(configuration).organisationsTermsOfUseRead(id, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Updates an organisation.
         * @param {string} id Organisation Id.
         * @param {Organisation} organisation Organisation Information. All fields are updated.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organisationsUpdate(id: string, organisation: Organisation, xAmphoradataVersion?: string, options?: any) {
            return OrganisationsApiFp(configuration).organisationsUpdate(id, organisation, xAmphoradataVersion, options)(axios, basePath);
        },
    };
};

/**
 * OrganisationsApi - object-oriented interface
 * @export
 * @class OrganisationsApi
 * @extends {BaseAPI}
 */
export class OrganisationsApi extends BaseAPI {
    /**
     * 
     * @summary Get\'s an Organisation\'s plan information.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    public accountGetPlan(id: string, xAmphoradataVersion?: string, options?: any) {
        return OrganisationsApiFp(this.configuration).accountGetPlan(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get\'s an Organisation\'s account information.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    public accountRead(id: string, xAmphoradataVersion?: string, options?: any) {
        return OrganisationsApiFp(this.configuration).accountRead(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Creates a new Organisation. This will assign the logged in user to the organisation.
     * @param {Organisation} organisation Information of the new Organisation.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    public organisationsCreate(organisation: Organisation, xAmphoradataVersion?: string, options?: any) {
        return OrganisationsApiFp(this.configuration).organisationsCreate(organisation, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Deletes an organisation.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    public organisationsDelete(id: string, xAmphoradataVersion?: string, options?: any) {
        return OrganisationsApiFp(this.configuration).organisationsDelete(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets an organisation\'s details.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    public organisationsRead(id: string, xAmphoradataVersion?: string, options?: any) {
        return OrganisationsApiFp(this.configuration).organisationsRead(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets an organisation\'s invitations.
     * @param {string} id Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    public organisationsReadInvitations(id: string, xAmphoradataVersion?: string, options?: any) {
        return OrganisationsApiFp(this.configuration).organisationsReadInvitations(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get\'s a list of an Organisation\'s Terms of Use.
     * @param {string} id The Id of the Organisation.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    public organisationsTermsOfUseRead(id: string, xAmphoradataVersion?: string, options?: any) {
        return OrganisationsApiFp(this.configuration).organisationsTermsOfUseRead(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Updates an organisation.
     * @param {string} id Organisation Id.
     * @param {Organisation} organisation Organisation Information. All fields are updated.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationsApi
     */
    public organisationsUpdate(id: string, organisation: Organisation, xAmphoradataVersion?: string, options?: any) {
        return OrganisationsApiFp(this.configuration).organisationsUpdate(id, organisation, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

}


/**
 * PermissionApi - axios parameter creator
 * @export
 */
export const PermissionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary The permission level for each object id in the request.
         * @param {PermissionsRequest} permissionsRequest A request object containing the list of ids to check.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permissionGetPermissions(permissionsRequest: PermissionsRequest, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'permissionsRequest' is not null or undefined
            if (permissionsRequest === null || permissionsRequest === undefined) {
                throw new RequiredError('permissionsRequest','Required parameter permissionsRequest was null or undefined when calling permissionGetPermissions.');
            }
            const localVarPath = `/api/permissions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof permissionsRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(permissionsRequest !== undefined ? permissionsRequest : {}) : (permissionsRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PermissionApi - functional programming interface
 * @export
 */
export const PermissionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary The permission level for each object id in the request.
         * @param {PermissionsRequest} permissionsRequest A request object containing the list of ids to check.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permissionGetPermissions(permissionsRequest: PermissionsRequest, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermissionsResponse> {
            const localVarAxiosArgs = PermissionApiAxiosParamCreator(configuration).permissionGetPermissions(permissionsRequest, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PermissionApi - factory interface
 * @export
 */
export const PermissionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary The permission level for each object id in the request.
         * @param {PermissionsRequest} permissionsRequest A request object containing the list of ids to check.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permissionGetPermissions(permissionsRequest: PermissionsRequest, xAmphoradataVersion?: string, options?: any) {
            return PermissionApiFp(configuration).permissionGetPermissions(permissionsRequest, xAmphoradataVersion, options)(axios, basePath);
        },
    };
};

/**
 * PermissionApi - object-oriented interface
 * @export
 * @class PermissionApi
 * @extends {BaseAPI}
 */
export class PermissionApi extends BaseAPI {
    /**
     * 
     * @summary The permission level for each object id in the request.
     * @param {PermissionsRequest} permissionsRequest A request object containing the list of ids to check.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    public permissionGetPermissions(permissionsRequest: PermissionsRequest, xAmphoradataVersion?: string, options?: any) {
        return PermissionApiFp(this.configuration).permissionGetPermissions(permissionsRequest, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

}


/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Searches for Amphorae.
         * @param {string} [term] General search term for text comparison.
         * @param {string} [labels] Comma separated labels that must be included in results.
         * @param {number} [lat] Latitude (center of search area).
         * @param {number} [lon] Longitude (center of search area).
         * @param {number} [dist] Distance from center of search area (describing a circle).
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSearchAmphorae(term?: string, labels?: string, lat?: number, lon?: number, dist?: number, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/search/amphorae`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }

            if (labels !== undefined) {
                localVarQueryParameter['labels'] = labels;
            }

            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }

            if (lon !== undefined) {
                localVarQueryParameter['lon'] = lon;
            }

            if (dist !== undefined) {
                localVarQueryParameter['dist'] = dist;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Searches for Amphorae by loction.
         * @param {number} [lat] Latitude.
         * @param {number} [lon] Longitude.
         * @param {number} [dist] Distance from Latitude and Longitude in which to search.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSearchAmphoraeByLocation(lat?: number, lon?: number, dist?: number, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/search/amphorae/byLocation`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }

            if (lon !== undefined) {
                localVarQueryParameter['lon'] = lon;
            }

            if (dist !== undefined) {
                localVarQueryParameter['dist'] = dist;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Searches for Amphorae in an Organisation.
         * @param {string} [orgId] Organisation Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSearchAmphoraeByOrganisation(orgId?: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/search/amphorae/byOrganisation`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Searches for Organisations with fuzzy search.
         * @param {string} [term] Search Term.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSearchOrganisations(term?: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/search/organisations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Searches for Amphorae.
         * @param {string} [term] General search term for text comparison.
         * @param {string} [labels] Comma separated labels that must be included in results.
         * @param {number} [lat] Latitude (center of search area).
         * @param {number} [lon] Longitude (center of search area).
         * @param {number} [dist] Distance from center of search area (describing a circle).
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSearchAmphorae(term?: string, labels?: string, lat?: number, lon?: number, dist?: number, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BasicAmphora>> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchSearchAmphorae(term, labels, lat, lon, dist, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Searches for Amphorae by loction.
         * @param {number} [lat] Latitude.
         * @param {number} [lon] Longitude.
         * @param {number} [dist] Distance from Latitude and Longitude in which to search.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSearchAmphoraeByLocation(lat?: number, lon?: number, dist?: number, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BasicAmphora>> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchSearchAmphoraeByLocation(lat, lon, dist, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Searches for Amphorae in an Organisation.
         * @param {string} [orgId] Organisation Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSearchAmphoraeByOrganisation(orgId?: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BasicAmphora>> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchSearchAmphoraeByOrganisation(orgId, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Searches for Organisations with fuzzy search.
         * @param {string} [term] Search Term.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSearchOrganisations(term?: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Organisation>> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).searchSearchOrganisations(term, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Searches for Amphorae.
         * @param {string} [term] General search term for text comparison.
         * @param {string} [labels] Comma separated labels that must be included in results.
         * @param {number} [lat] Latitude (center of search area).
         * @param {number} [lon] Longitude (center of search area).
         * @param {number} [dist] Distance from center of search area (describing a circle).
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSearchAmphorae(term?: string, labels?: string, lat?: number, lon?: number, dist?: number, xAmphoradataVersion?: string, options?: any) {
            return SearchApiFp(configuration).searchSearchAmphorae(term, labels, lat, lon, dist, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Searches for Amphorae by loction.
         * @param {number} [lat] Latitude.
         * @param {number} [lon] Longitude.
         * @param {number} [dist] Distance from Latitude and Longitude in which to search.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSearchAmphoraeByLocation(lat?: number, lon?: number, dist?: number, xAmphoradataVersion?: string, options?: any) {
            return SearchApiFp(configuration).searchSearchAmphoraeByLocation(lat, lon, dist, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Searches for Amphorae in an Organisation.
         * @param {string} [orgId] Organisation Id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSearchAmphoraeByOrganisation(orgId?: string, xAmphoradataVersion?: string, options?: any) {
            return SearchApiFp(configuration).searchSearchAmphoraeByOrganisation(orgId, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Searches for Organisations with fuzzy search.
         * @param {string} [term] Search Term.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSearchOrganisations(term?: string, xAmphoradataVersion?: string, options?: any) {
            return SearchApiFp(configuration).searchSearchOrganisations(term, xAmphoradataVersion, options)(axios, basePath);
        },
    };
};

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
    /**
     * 
     * @summary Searches for Amphorae.
     * @param {string} [term] General search term for text comparison.
     * @param {string} [labels] Comma separated labels that must be included in results.
     * @param {number} [lat] Latitude (center of search area).
     * @param {number} [lon] Longitude (center of search area).
     * @param {number} [dist] Distance from center of search area (describing a circle).
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchSearchAmphorae(term?: string, labels?: string, lat?: number, lon?: number, dist?: number, xAmphoradataVersion?: string, options?: any) {
        return SearchApiFp(this.configuration).searchSearchAmphorae(term, labels, lat, lon, dist, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Searches for Amphorae by loction.
     * @param {number} [lat] Latitude.
     * @param {number} [lon] Longitude.
     * @param {number} [dist] Distance from Latitude and Longitude in which to search.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchSearchAmphoraeByLocation(lat?: number, lon?: number, dist?: number, xAmphoradataVersion?: string, options?: any) {
        return SearchApiFp(this.configuration).searchSearchAmphoraeByLocation(lat, lon, dist, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Searches for Amphorae in an Organisation.
     * @param {string} [orgId] Organisation Id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchSearchAmphoraeByOrganisation(orgId?: string, xAmphoradataVersion?: string, options?: any) {
        return SearchApiFp(this.configuration).searchSearchAmphoraeByOrganisation(orgId, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Searches for Organisations with fuzzy search.
     * @param {string} [term] Search Term.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchSearchOrganisations(term?: string, xAmphoradataVersion?: string, options?: any) {
        return SearchApiFp(this.configuration).searchSearchOrganisations(term, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

}


/**
 * TermsOfUseApi - axios parameter creator
 * @export
 */
export const TermsOfUseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Accepts a Terms of Use.
         * @param {string} id The Terms of Use id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsOfUseAccept(id: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling termsOfUseAccept.');
            }
            const localVarPath = `/api/TermsOfUse/{id}/Accepts`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a Terms of Use object.
         * @param {CreateTermsOfUse} createTermsOfUse The terms of use to create.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsOfUseCreate(createTermsOfUse: CreateTermsOfUse, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'createTermsOfUse' is not null or undefined
            if (createTermsOfUse === null || createTermsOfUse === undefined) {
                throw new RequiredError('createTermsOfUse','Required parameter createTermsOfUse was null or undefined when calling termsOfUseCreate.');
            }
            const localVarPath = `/api/TermsOfUse`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof createTermsOfUse !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createTermsOfUse !== undefined ? createTermsOfUse : {}) : (createTermsOfUse || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a Terms of Use object.
         * @param {string} id The terms of use id to delete.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsOfUseDelete(id: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling termsOfUseDelete.');
            }
            const localVarPath = `/api/TermsOfUse/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all Terms of Use.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsOfUseList(xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/TermsOfUse`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns all Terms of Use.
         * @param {string} id 
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsOfUseRead(id: string, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling termsOfUseRead.');
            }
            const localVarPath = `/api/TermsOfUse/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TermsOfUseApi - functional programming interface
 * @export
 */
export const TermsOfUseApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Accepts a Terms of Use.
         * @param {string} id The Terms of Use id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsOfUseAccept(id: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any> {
            const localVarAxiosArgs = TermsOfUseApiAxiosParamCreator(configuration).termsOfUseAccept(id, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Creates a Terms of Use object.
         * @param {CreateTermsOfUse} createTermsOfUse The terms of use to create.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsOfUseCreate(createTermsOfUse: CreateTermsOfUse, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsOfUse> {
            const localVarAxiosArgs = TermsOfUseApiAxiosParamCreator(configuration).termsOfUseCreate(createTermsOfUse, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes a Terms of Use object.
         * @param {string} id The terms of use id to delete.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsOfUseDelete(id: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any> {
            const localVarAxiosArgs = TermsOfUseApiAxiosParamCreator(configuration).termsOfUseDelete(id, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns all Terms of Use.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsOfUseList(xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TermsOfUse>> {
            const localVarAxiosArgs = TermsOfUseApiAxiosParamCreator(configuration).termsOfUseList(xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns all Terms of Use.
         * @param {string} id 
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsOfUseRead(id: string, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsOfUse> {
            const localVarAxiosArgs = TermsOfUseApiAxiosParamCreator(configuration).termsOfUseRead(id, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TermsOfUseApi - factory interface
 * @export
 */
export const TermsOfUseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Accepts a Terms of Use.
         * @param {string} id The Terms of Use id.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsOfUseAccept(id: string, xAmphoradataVersion?: string, options?: any) {
            return TermsOfUseApiFp(configuration).termsOfUseAccept(id, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Creates a Terms of Use object.
         * @param {CreateTermsOfUse} createTermsOfUse The terms of use to create.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsOfUseCreate(createTermsOfUse: CreateTermsOfUse, xAmphoradataVersion?: string, options?: any) {
            return TermsOfUseApiFp(configuration).termsOfUseCreate(createTermsOfUse, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Deletes a Terms of Use object.
         * @param {string} id The terms of use id to delete.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsOfUseDelete(id: string, xAmphoradataVersion?: string, options?: any) {
            return TermsOfUseApiFp(configuration).termsOfUseDelete(id, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Returns all Terms of Use.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsOfUseList(xAmphoradataVersion?: string, options?: any) {
            return TermsOfUseApiFp(configuration).termsOfUseList(xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Returns all Terms of Use.
         * @param {string} id 
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsOfUseRead(id: string, xAmphoradataVersion?: string, options?: any) {
            return TermsOfUseApiFp(configuration).termsOfUseRead(id, xAmphoradataVersion, options)(axios, basePath);
        },
    };
};

/**
 * TermsOfUseApi - object-oriented interface
 * @export
 * @class TermsOfUseApi
 * @extends {BaseAPI}
 */
export class TermsOfUseApi extends BaseAPI {
    /**
     * 
     * @summary Accepts a Terms of Use.
     * @param {string} id The Terms of Use id.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsOfUseApi
     */
    public termsOfUseAccept(id: string, xAmphoradataVersion?: string, options?: any) {
        return TermsOfUseApiFp(this.configuration).termsOfUseAccept(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Creates a Terms of Use object.
     * @param {CreateTermsOfUse} createTermsOfUse The terms of use to create.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsOfUseApi
     */
    public termsOfUseCreate(createTermsOfUse: CreateTermsOfUse, xAmphoradataVersion?: string, options?: any) {
        return TermsOfUseApiFp(this.configuration).termsOfUseCreate(createTermsOfUse, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Deletes a Terms of Use object.
     * @param {string} id The terms of use id to delete.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsOfUseApi
     */
    public termsOfUseDelete(id: string, xAmphoradataVersion?: string, options?: any) {
        return TermsOfUseApiFp(this.configuration).termsOfUseDelete(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Returns all Terms of Use.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsOfUseApi
     */
    public termsOfUseList(xAmphoradataVersion?: string, options?: any) {
        return TermsOfUseApiFp(this.configuration).termsOfUseList(xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Returns all Terms of Use.
     * @param {string} id 
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsOfUseApi
     */
    public termsOfUseRead(id: string, xAmphoradataVersion?: string, options?: any) {
        return TermsOfUseApiFp(this.configuration).termsOfUseRead(id, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

}


/**
 * TimeSeriesApi - axios parameter creator
 * @export
 */
export const TimeSeriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Updates the details of an Amphora by Id.
         * @param {QueryRequest} queryRequest Time Series query. See https://github.com/microsoft/tsiclient/blob/master/docs/Server.md#functions .
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeSeriesQueryTimeSeries(queryRequest: QueryRequest, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'queryRequest' is not null or undefined
            if (queryRequest === null || queryRequest === undefined) {
                throw new RequiredError('queryRequest','Required parameter queryRequest was null or undefined when calling timeSeriesQueryTimeSeries.');
            }
            const localVarPath = `/api/timeseries/query`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof queryRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(queryRequest !== undefined ? queryRequest : {}) : (queryRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimeSeriesApi - functional programming interface
 * @export
 */
export const TimeSeriesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Updates the details of an Amphora by Id.
         * @param {QueryRequest} queryRequest Time Series query. See https://github.com/microsoft/tsiclient/blob/master/docs/Server.md#functions .
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeSeriesQueryTimeSeries(queryRequest: QueryRequest, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultPage> {
            const localVarAxiosArgs = TimeSeriesApiAxiosParamCreator(configuration).timeSeriesQueryTimeSeries(queryRequest, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TimeSeriesApi - factory interface
 * @export
 */
export const TimeSeriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Updates the details of an Amphora by Id.
         * @param {QueryRequest} queryRequest Time Series query. See https://github.com/microsoft/tsiclient/blob/master/docs/Server.md#functions .
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeSeriesQueryTimeSeries(queryRequest: QueryRequest, xAmphoradataVersion?: string, options?: any) {
            return TimeSeriesApiFp(configuration).timeSeriesQueryTimeSeries(queryRequest, xAmphoradataVersion, options)(axios, basePath);
        },
    };
};

/**
 * TimeSeriesApi - object-oriented interface
 * @export
 * @class TimeSeriesApi
 * @extends {BaseAPI}
 */
export class TimeSeriesApi extends BaseAPI {
    /**
     * 
     * @summary Updates the details of an Amphora by Id.
     * @param {QueryRequest} queryRequest Time Series query. See https://github.com/microsoft/tsiclient/blob/master/docs/Server.md#functions .
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeSeriesApi
     */
    public timeSeriesQueryTimeSeries(queryRequest: QueryRequest, xAmphoradataVersion?: string, options?: any) {
        return TimeSeriesApiFp(this.configuration).timeSeriesQueryTimeSeries(queryRequest, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new User. Returns the password.
         * @param {CreateAmphoraUser} createAmphoraUser User parameters.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCreate(createAmphoraUser: CreateAmphoraUser, xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            // verify required parameter 'createAmphoraUser' is not null or undefined
            if (createAmphoraUser === null || createAmphoraUser === undefined) {
                throw new RequiredError('createAmphoraUser','Required parameter createAmphoraUser was null or undefined when calling usersCreate.');
            }
            const localVarPath = `/api/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof createAmphoraUser !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createAmphoraUser !== undefined ? createAmphoraUser : {}) : (createAmphoraUser || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get\'s logged in users information.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersReadSelf(xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/users/self`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new User. Returns the password.
         * @param {CreateAmphoraUser} createAmphoraUser User parameters.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCreate(createAmphoraUser: CreateAmphoraUser, xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AmphoraUser> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).usersCreate(createAmphoraUser, xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get\'s logged in users information.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersReadSelf(xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AmphoraUser> {
            const localVarAxiosArgs = UsersApiAxiosParamCreator(configuration).usersReadSelf(xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Creates a new User. Returns the password.
         * @param {CreateAmphoraUser} createAmphoraUser User parameters.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCreate(createAmphoraUser: CreateAmphoraUser, xAmphoradataVersion?: string, options?: any) {
            return UsersApiFp(configuration).usersCreate(createAmphoraUser, xAmphoradataVersion, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get\'s logged in users information.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersReadSelf(xAmphoradataVersion?: string, options?: any) {
            return UsersApiFp(configuration).usersReadSelf(xAmphoradataVersion, options)(axios, basePath);
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Creates a new User. Returns the password.
     * @param {CreateAmphoraUser} createAmphoraUser User parameters.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersCreate(createAmphoraUser: CreateAmphoraUser, xAmphoradataVersion?: string, options?: any) {
        return UsersApiFp(this.configuration).usersCreate(createAmphoraUser, xAmphoradataVersion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get\'s logged in users information.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersReadSelf(xAmphoradataVersion?: string, options?: any) {
        return UsersApiFp(this.configuration).usersReadSelf(xAmphoradataVersion, options)(this.axios, this.basePath);
    }

}


/**
 * VersionApi - axios parameter creator
 * @export
 */
export const VersionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get\'s the current server version.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGetCurrentVersion(xAmphoradataVersion?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/version`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (xAmphoradataVersion !== undefined && xAmphoradataVersion !== null) {
                localVarHeaderParameter['x-amphoradata-version'] = String(xAmphoradataVersion);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VersionApi - functional programming interface
 * @export
 */
export const VersionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get\'s the current server version.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGetCurrentVersion(xAmphoradataVersion?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = VersionApiAxiosParamCreator(configuration).versionGetCurrentVersion(xAmphoradataVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * VersionApi - factory interface
 * @export
 */
export const VersionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get\'s the current server version.
         * @param {string} [xAmphoradataVersion] API Version Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGetCurrentVersion(xAmphoradataVersion?: string, options?: any) {
            return VersionApiFp(configuration).versionGetCurrentVersion(xAmphoradataVersion, options)(axios, basePath);
        },
    };
};

/**
 * VersionApi - object-oriented interface
 * @export
 * @class VersionApi
 * @extends {BaseAPI}
 */
export class VersionApi extends BaseAPI {
    /**
     * 
     * @summary Get\'s the current server version.
     * @param {string} [xAmphoradataVersion] API Version Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionApi
     */
    public versionGetCurrentVersion(xAmphoradataVersion?: string, options?: any) {
        return VersionApiFp(this.configuration).versionGetCurrentVersion(xAmphoradataVersion, options)(this.axios, this.basePath);
    }

}


