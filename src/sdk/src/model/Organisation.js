/**
 * Amphora Data Api
 * API for interacting with the Amphora Data platform.
 *
 * The version of the OpenAPI document: 0.9.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Entity from './Entity';
import OrganisationAllOf from './OrganisationAllOf';

/**
 * The Organisation model module.
 * @module model/Organisation
 * @version 0.9.7
 */
class Organisation {
    /**
     * Constructs a new <code>Organisation</code>.
     * @alias module:model/Organisation
     * @implements module:model/Entity
     * @implements module:model/OrganisationAllOf
     * @param name {String} 
     * @param about {String} 
     * @param websiteUrl {String} 
     */
    constructor(name, about, websiteUrl) { 
        Entity.initialize(this);OrganisationAllOf.initialize(this, name, about, websiteUrl);
        Organisation.initialize(this, name, about, websiteUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, about, websiteUrl) { 
        obj['name'] = name;
        obj['about'] = about;
        obj['websiteUrl'] = websiteUrl;
    }

    /**
     * Constructs a <code>Organisation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Organisation} obj Optional instance to populate.
     * @return {module:model/Organisation} The populated <code>Organisation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Organisation();
            Entity.constructFromObject(data, obj);
            OrganisationAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isDeleted')) {
                obj['isDeleted'] = ApiClient.convertToType(data['isDeleted'], 'Boolean');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('about')) {
                obj['about'] = ApiClient.convertToType(data['about'], 'String');
            }
            if (data.hasOwnProperty('websiteUrl')) {
                obj['websiteUrl'] = ApiClient.convertToType(data['websiteUrl'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} id
 */
Organisation.prototype['id'] = undefined;

/**
 * @member {Boolean} isDeleted
 */
Organisation.prototype['isDeleted'] = undefined;

/**
 * @member {Date} createdDate
 */
Organisation.prototype['createdDate'] = undefined;

/**
 * @member {String} name
 */
Organisation.prototype['name'] = undefined;

/**
 * @member {String} about
 */
Organisation.prototype['about'] = undefined;

/**
 * @member {String} websiteUrl
 */
Organisation.prototype['websiteUrl'] = undefined;

/**
 * @member {String} address
 */
Organisation.prototype['address'] = undefined;


// Implement Entity interface:
/**
 * @member {String} id
 */
Entity.prototype['id'] = undefined;
/**
 * @member {Boolean} isDeleted
 */
Entity.prototype['isDeleted'] = undefined;
/**
 * @member {Date} createdDate
 */
Entity.prototype['createdDate'] = undefined;
// Implement OrganisationAllOf interface:
/**
 * @member {String} name
 */
OrganisationAllOf.prototype['name'] = undefined;
/**
 * @member {String} about
 */
OrganisationAllOf.prototype['about'] = undefined;
/**
 * @member {String} websiteUrl
 */
OrganisationAllOf.prototype['websiteUrl'] = undefined;
/**
 * @member {String} address
 */
OrganisationAllOf.prototype['address'] = undefined;




export default Organisation;

