/**
 * Amphora Data Api
 * API for interacting with the Amphora Data platform.
 *
 * The version of the OpenAPI document: 0.9.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Account from '../model/Account';
import Organisation from '../model/Organisation';
import PlanInformation from '../model/PlanInformation';
import ProblemDetails from '../model/ProblemDetails';
import TermsAndConditions from '../model/TermsAndConditions';

/**
* Organisations service.
* @module api/OrganisationsApi
* @version 0.9.7
*/
export default class OrganisationsApi {

    /**
    * Constructs a new OrganisationsApi. 
    * @alias module:api/OrganisationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accountGetPlan operation.
     * @callback module:api/OrganisationsApi~accountGetPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlanInformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get's an Organisation's plan information.
     * @param {String} id Organisation Id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAmphoradataVersion API Version Number
     * @param {module:api/OrganisationsApi~accountGetPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlanInformation}
     */
    accountGetPlan(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling accountGetPlan");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'x-amphoradata-version': opts['xAmphoradataVersion']
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlanInformation;
      return this.apiClient.callApi(
        '/api/Organisations/{id}/Account/Plan', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountRead operation.
     * @callback module:api/OrganisationsApi~accountReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get's an Organisation's account information.
     * @param {String} id Organisation Id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAmphoradataVersion API Version Number
     * @param {module:api/OrganisationsApi~accountReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    accountRead(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling accountRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'x-amphoradata-version': opts['xAmphoradataVersion']
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/api/Organisations/{id}/Account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsCreate operation.
     * @callback module:api/OrganisationsApi~organisationsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organisation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Organisation. This will assign the logged in user to the organisation.
     * @param {module:model/Organisation} organisation Information of the new Organisation.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAmphoradataVersion API Version Number
     * @param {module:api/OrganisationsApi~organisationsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organisation}
     */
    organisationsCreate(organisation, opts, callback) {
      opts = opts || {};
      let postBody = organisation;
      // verify the required parameter 'organisation' is set
      if (organisation === undefined || organisation === null) {
        throw new Error("Missing the required parameter 'organisation' when calling organisationsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-amphoradata-version': opts['xAmphoradataVersion']
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Organisation;
      return this.apiClient.callApi(
        '/api/organisations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsDelete operation.
     * @callback module:api/OrganisationsApi~organisationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an organisation.
     * @param {String} id Organisation Id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAmphoradataVersion API Version Number
     * @param {module:api/OrganisationsApi~organisationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    organisationsDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'x-amphoradata-version': opts['xAmphoradataVersion']
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/organisations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsRead operation.
     * @callback module:api/OrganisationsApi~organisationsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organisation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an organisation's details.
     * @param {String} id Organisation Id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAmphoradataVersion API Version Number
     * @param {module:api/OrganisationsApi~organisationsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organisation}
     */
    organisationsRead(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'x-amphoradata-version': opts['xAmphoradataVersion']
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Organisation;
      return this.apiClient.callApi(
        '/api/organisations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the organisationsUpdate operation.
     * @callback module:api/OrganisationsApi~organisationsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an organisation.
     * @param {String} id Organisation Id.
     * @param {module:model/Organisation} organisation Organisation Information. All fields are updated.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAmphoradataVersion API Version Number
     * @param {module:api/OrganisationsApi~organisationsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    organisationsUpdate(id, organisation, opts, callback) {
      opts = opts || {};
      let postBody = organisation;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling organisationsUpdate");
      }
      // verify the required parameter 'organisation' is set
      if (organisation === undefined || organisation === null) {
        throw new Error("Missing the required parameter 'organisation' when calling organisationsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'x-amphoradata-version': opts['xAmphoradataVersion']
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/api/organisations/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the termsAndConditionsCreate operation.
     * @callback module:api/OrganisationsApi~termsAndConditionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TermsAndConditions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds new Terms and Conditions to your Organisations T/C Library.
     * @param {String} id The Id of the Organisation.
     * @param {module:model/TermsAndConditions} termsAndConditions The new Terms and Conditions.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAmphoradataVersion API Version Number
     * @param {module:api/OrganisationsApi~termsAndConditionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TermsAndConditions}
     */
    termsAndConditionsCreate(id, termsAndConditions, opts, callback) {
      opts = opts || {};
      let postBody = termsAndConditions;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling termsAndConditionsCreate");
      }
      // verify the required parameter 'termsAndConditions' is set
      if (termsAndConditions === undefined || termsAndConditions === null) {
        throw new Error("Missing the required parameter 'termsAndConditions' when calling termsAndConditionsCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'x-amphoradata-version': opts['xAmphoradataVersion']
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TermsAndConditions;
      return this.apiClient.callApi(
        '/api/Organisations/{id}/TermsAndConditions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the termsAndConditionsRead operation.
     * @callback module:api/OrganisationsApi~termsAndConditionsReadCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TermsAndConditions>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get's a list of an Organisation's Terms and Conditions.
     * @param {String} id The Id of the Organisation.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAmphoradataVersion API Version Number
     * @param {module:api/OrganisationsApi~termsAndConditionsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TermsAndConditions>}
     */
    termsAndConditionsRead(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling termsAndConditionsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'x-amphoradata-version': opts['xAmphoradataVersion']
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TermsAndConditions];
      return this.apiClient.callApi(
        '/api/Organisations/{id}/TermsAndConditions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
