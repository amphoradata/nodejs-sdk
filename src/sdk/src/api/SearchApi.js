/**
 * Amphora Data Api
 * API for interacting with the Amphora Data platform.
 *
 * The version of the OpenAPI document: 0.9.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BasicAmphora from '../model/BasicAmphora';
import Organisation from '../model/Organisation';
import SearchParameters from '../model/SearchParameters';

/**
* Search service.
* @module api/SearchApi
* @version 0.9.7
*/
export default class SearchApi {

    /**
    * Constructs a new SearchApi. 
    * @alias module:api/SearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the searchSearchAmphorae operation.
     * @callback module:api/SearchApi~searchSearchAmphoraeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BasicAmphora>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for Amphorae.
     * @param {module:model/SearchParameters} searchParameters Search parameters.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAmphoradataVersion API Version Number
     * @param {module:api/SearchApi~searchSearchAmphoraeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BasicAmphora>}
     */
    searchSearchAmphorae(searchParameters, opts, callback) {
      opts = opts || {};
      let postBody = searchParameters;
      // verify the required parameter 'searchParameters' is set
      if (searchParameters === undefined || searchParameters === null) {
        throw new Error("Missing the required parameter 'searchParameters' when calling searchSearchAmphorae");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-amphoradata-version': opts['xAmphoradataVersion']
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [BasicAmphora];
      return this.apiClient.callApi(
        '/api/search/amphorae', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchSearchAmphoraeByLocation operation.
     * @callback module:api/SearchApi~searchSearchAmphoraeByLocationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BasicAmphora>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for Amphorae by loction.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.lat Latitude.
     * @param {Number} opts.lon Longitude.
     * @param {Number} opts.dist Distance from Latitude and Longitude in which to search. (default to 10.0)
     * @param {String} opts.xAmphoradataVersion API Version Number
     * @param {module:api/SearchApi~searchSearchAmphoraeByLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BasicAmphora>}
     */
    searchSearchAmphoraeByLocation(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'lat': opts['lat'],
        'lon': opts['lon'],
        'dist': opts['dist']
      };
      let headerParams = {
        'x-amphoradata-version': opts['xAmphoradataVersion']
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BasicAmphora];
      return this.apiClient.callApi(
        '/api/search/amphorae/byLocation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchSearchAmphoraeByOrganisation operation.
     * @callback module:api/SearchApi~searchSearchAmphoraeByOrganisationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BasicAmphora>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for Amphorae in an Organisation.
     * @param {Object} opts Optional parameters
     * @param {String} opts.orgId Organisation Id.
     * @param {String} opts.xAmphoradataVersion API Version Number
     * @param {module:api/SearchApi~searchSearchAmphoraeByOrganisationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BasicAmphora>}
     */
    searchSearchAmphoraeByOrganisation(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'orgId': opts['orgId']
      };
      let headerParams = {
        'x-amphoradata-version': opts['xAmphoradataVersion']
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BasicAmphora];
      return this.apiClient.callApi(
        '/api/search/amphorae/byOrganisation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchSearchOrganisations operation.
     * @callback module:api/SearchApi~searchSearchOrganisationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Organisation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for Organisations with fuzzy search.
     * @param {Object} opts Optional parameters
     * @param {String} opts.term Search Term.
     * @param {String} opts.xAmphoradataVersion API Version Number
     * @param {module:api/SearchApi~searchSearchOrganisationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Organisation>}
     */
    searchSearchOrganisations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'term': opts['term']
      };
      let headerParams = {
        'x-amphoradata-version': opts['xAmphoradataVersion']
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Organisation];
      return this.apiClient.callApi(
        '/api/search/organisations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
