/**
 * Amphora Data Api
 * API for interacting with the Amphora Data platform.
 *
 * The version of the OpenAPI document: 0.9.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BasicAmphora from '../model/BasicAmphora';
import FuzzySearchResponse from '../model/FuzzySearchResponse';

/**
* Market service.
* @module api/MarketApi
* @version 0.9.7
*/
export default class MarketApi {

    /**
    * Constructs a new MarketApi. 
    * @alias module:api/MarketApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the marketFind operation.
     * @callback module:api/MarketApi~marketFindCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BasicAmphora>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds Amphora using a fuzzy search.
     * @param {Object} opts Optional parameters
     * @param {String} opts.query A string as a search term.
     * @param {Number} opts.top How many results to return.
     * @param {Number} opts.skip How many pages (in multiples of top) to skip.
     * @param {String} opts.xAmphoradataVersion API Version Number
     * @param {module:api/MarketApi~marketFindCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BasicAmphora>}
     */
    marketFind(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'top': opts['top'],
        'skip': opts['skip']
      };
      let headerParams = {
        'x-amphoradata-version': opts['xAmphoradataVersion']
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BasicAmphora];
      return this.apiClient.callApi(
        '/api/market/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the marketLookupLocation operation.
     * @callback module:api/MarketApi~marketLookupLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FuzzySearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Executes a fuzzy location search.
     * @param {Object} opts Optional parameters
     * @param {String} opts.query Search Text.
     * @param {String} opts.xAmphoradataVersion API Version Number
     * @param {module:api/MarketApi~marketLookupLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FuzzySearchResponse}
     */
    marketLookupLocation(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query']
      };
      let headerParams = {
        'x-amphoradata-version': opts['xAmphoradataVersion']
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FuzzySearchResponse;
      return this.apiClient.callApi(
        '/api/location/fuzzy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
