/**
 * Amphora Data Api
 * API for interacting with the Amphora Data platform.
 *
 * The version of the OpenAPI document: 0.9.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AmphoraUser from '../model/AmphoraUser';
import CreateAmphoraUser from '../model/CreateAmphoraUser';

/**
* Users service.
* @module api/UsersApi
* @version 0.9.7
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usersCreate operation.
     * @callback module:api/UsersApi~usersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AmphoraUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new User. Returns the password.
     * @param {module:model/CreateAmphoraUser} createAmphoraUser User parameters.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAmphoradataVersion API Version Number
     * @param {module:api/UsersApi~usersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AmphoraUser}
     */
    usersCreate(createAmphoraUser, opts, callback) {
      opts = opts || {};
      let postBody = createAmphoraUser;
      // verify the required parameter 'createAmphoraUser' is set
      if (createAmphoraUser === undefined || createAmphoraUser === null) {
        throw new Error("Missing the required parameter 'createAmphoraUser' when calling usersCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-amphoradata-version': opts['xAmphoradataVersion']
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AmphoraUser;
      return this.apiClient.callApi(
        '/api/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersReadSelf operation.
     * @callback module:api/UsersApi~usersReadSelfCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AmphoraUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get's logged in users information.
     * @param {Object} opts Optional parameters
     * @param {String} opts.xAmphoradataVersion API Version Number
     * @param {module:api/UsersApi~usersReadSelfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AmphoraUser}
     */
    usersReadSelf(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-amphoradata-version': opts['xAmphoradataVersion']
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AmphoraUser;
      return this.apiClient.callApi(
        '/api/users/self', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
